{
  "version": 3,
  "sources": ["../src/platform/web/index.ts", "../src/common/platform.ts", "../src/common/lib/util/logger.ts", "../src/common/lib/util/utils.ts", "../src/common/lib/types/errorinfo.ts", "../src/common/lib/types/message.ts", "../src/common/lib/types/presencemessage.ts", "../package.json", "../src/common/lib/util/defaults.ts", "../src/common/lib/util/multicaster.ts", "../src/common/constants/HttpMethods.ts", "../src/common/lib/client/auth.ts", "../src/common/lib/client/baseclient.ts", "../src/common/lib/types/devicedetails.ts", "../src/common/lib/client/resource.ts", "../src/common/lib/client/paginatedresource.ts", "../src/common/lib/types/pushchannelsubscription.ts", "../src/common/lib/client/push.ts", "../src/common/lib/util/eventemitter.ts", "../src/common/lib/client/presence.ts", "../src/common/lib/client/channel.ts", "../src/common/lib/types/stats.ts", "../src/common/lib/client/rest.ts", "../src/common/lib/client/defaultrest.ts", "../src/common/lib/types/protocolmessage.ts", "../src/common/lib/transport/messagequeue.ts", "../src/common/lib/transport/protocol.ts", "../src/common/lib/client/connectionstatechange.ts", "../src/common/lib/transport/connectionerrors.ts", "../src/common/lib/transport/transport.ts", "../src/common/lib/transport/websockettransport.ts", "../src/common/constants/HttpStatusCodes.ts", "../src/common/lib/transport/connectionmanager.ts", "../src/common/lib/client/connection.ts", "../src/common/lib/client/channelstatechange.ts", "../src/common/lib/client/realtimepresence.ts", "../src/common/lib/client/realtimechannel.ts", "../src/common/lib/client/realtime.ts", "../src/platform/web/lib/util/hmac-sha256.ts", "../src/platform/web/lib/util/bufferutils.ts", "../src/platform/web/lib/util/crypto.ts", "../src/common/constants/XHRStates.ts", "../src/platform/web/lib/transport/xhrrequest.ts", "../src/platform/web/lib/transport/fetchrequest.ts", "../src/platform/web/lib/util/http.ts", "../src/platform/web/lib/util/msgpack.ts", "../src/platform/web/config.ts", "../src/common/lib/transport/comettransport.ts", "../src/platform/web/lib/transport/xhrpollingtransport.ts", "../src/platform/web/lib/transport/xhrstreamingtransport.ts", "../src/platform/web/lib/transport/index.js", "../src/platform/web/lib/util/webstorage.ts", "../src/common/constants/TransportNames.ts", "../src/platform/web/lib/util/defaults.ts"],
  "sourcesContent": ["// Common\nimport { DefaultRest as Rest } from '../../common/lib/client/defaultrest';\nimport Realtime from '../../common/lib/client/realtime';\nimport Platform from '../../common/platform';\n\n// Platform Specific\nimport BufferUtils from './lib/util/bufferutils';\n// @ts-ignore\nimport CryptoFactory from './lib/util/crypto';\nimport Http from './lib/util/http';\nimport Config from './config';\n// @ts-ignore\nimport Transports from './lib/transport';\nimport Logger from '../../common/lib/util/logger';\nimport { getDefaults } from '../../common/lib/util/defaults';\nimport WebStorage from './lib/util/webstorage';\nimport PlatformDefaults from './lib/util/defaults';\nimport msgpack from './lib/util/msgpack';\n\nconst Crypto = CryptoFactory(Config, BufferUtils);\n\nPlatform.Crypto = Crypto;\nPlatform.BufferUtils = BufferUtils;\nPlatform.Http = Http;\nPlatform.Config = Config;\nPlatform.Transports = Transports;\nPlatform.WebStorage = WebStorage;\n\nRest.Crypto = Crypto;\nRealtime.Crypto = Crypto;\n\nLogger.initLogHandlers();\n\nPlatform.Defaults = getDefaults(PlatformDefaults);\n\nif (Platform.Config.agent) {\n  // @ts-ignore\n  Platform.Defaults.agent += ' ' + Platform.Config.agent;\n}\n\n/* If using IE8, don't attempt to upgrade from xhr_polling to xhr_streaming -\n * while it can do streaming, the low max http-connections-per-host limit means\n * that the polling transport is crippled during the upgrade process. So just\n * leave it at the base transport */\nif (Platform.Config.noUpgrade) {\n  Platform.Defaults.upgradeTransports = [];\n}\n\nexport { Rest, Realtime, msgpack };\n\nexport default {\n  Rest,\n  Realtime,\n  msgpack,\n};\n", "import { IPlatformConfig } from './types/IPlatformConfig';\nimport { IHttp } from './types/http';\nimport ConnectionManager from './lib/transport/connectionmanager';\nimport IDefaults from './types/IDefaults';\nimport IWebStorage from './types/IWebStorage';\nimport IBufferUtils from './types/IBufferUtils';\nimport Transport from './lib/transport/transport';\nimport * as WebBufferUtils from '../platform/web/lib/util/bufferutils';\nimport * as NodeBufferUtils from '../platform/nodejs/lib/util/bufferutils';\n\ntype Bufferlike = WebBufferUtils.Bufferlike | NodeBufferUtils.Bufferlike;\ntype BufferUtilsOutput = WebBufferUtils.Output | NodeBufferUtils.Output;\ntype ToBufferOutput = WebBufferUtils.ToBufferOutput | NodeBufferUtils.ToBufferOutput;\n\nexport default class Platform {\n  static Config: IPlatformConfig;\n  /*\n     What we actually _want_ is for Platform to be a generic class\n     parameterised by Bufferlike etc, but that requires far-reaching changes to\n     components that make use of Platform. So instead we have to advertise a\n     BufferUtils object that accepts a broader range of data types than it\n     can in reality handle.\n   */\n  static BufferUtils: IBufferUtils<Bufferlike, BufferUtilsOutput, ToBufferOutput>;\n  /*\n     This should be a class whose static methods implement the ICryptoStatic\n     interface, but (for the same reasons as described in the BufferUtils\n     comment above) Platform doesn\u2019t currently allow us to express the\n     generic parameters, hence keeping the type as `any`.\n   */\n  static Crypto: any;\n  static Http: typeof IHttp;\n  static Transports: Array<(connectionManager: typeof ConnectionManager) => Transport>;\n  static Defaults: IDefaults;\n  static WebStorage: IWebStorage | null;\n}\n", "import Platform from 'common/platform';\n\nexport type LoggerOptions = {\n  handler: LoggerFunction;\n  level: LogLevels;\n};\ntype LoggerFunction = (...args: string[]) => void;\n\n// Workaround for salesforce lightning locker compatibility\n// This is a shorthand version of Utils.getGlobalObject (which we can't use here without creating a circular import)\nlet globalObject = typeof global !== 'undefined' ? global : typeof window !== 'undefined' ? window : self;\n\nenum LogLevels {\n  None = 0,\n  Error = 1,\n  Major = 2,\n  Minor = 3,\n  Micro = 4,\n}\n\nfunction pad(timeSegment: number, three?: number) {\n  return `${timeSegment}`.padStart(three ? 3 : 2, '0');\n}\n\nfunction getHandler(logger: Function): Function {\n  return Platform.Config.logTimestamps\n    ? function (msg: unknown) {\n        const time = new Date();\n        logger(\n          pad(time.getHours()) +\n            ':' +\n            pad(time.getMinutes()) +\n            ':' +\n            pad(time.getSeconds()) +\n            '.' +\n            pad(time.getMilliseconds(), 1) +\n            ' ' +\n            msg\n        );\n      }\n    : logger;\n}\n\nconst getDefaultLoggers = (): [Function, Function] => {\n  let consoleLogger;\n  let errorLogger;\n\n  /* Can't just check for console && console.log; fails in IE <=9 */\n  if (\n    (typeof Window === 'undefined' && typeof WorkerGlobalScope === 'undefined') /* node */ ||\n    typeof globalObject?.console?.log?.apply === 'function' /* sensible browsers */\n  ) {\n    consoleLogger = function (...args: unknown[]) {\n      console.log.apply(console, args);\n    };\n    errorLogger = console.warn\n      ? function (...args: unknown[]) {\n          console.warn.apply(console, args);\n        }\n      : consoleLogger;\n  } else if (globalObject?.console.log as unknown) {\n    /* IE <= 9 with the console open -- console.log does not\n     * inherit from Function, so has no apply method */\n    consoleLogger = errorLogger = function () {\n      Function.prototype.apply.call(console.log, console, arguments);\n    };\n  } else {\n    /* IE <= 9 when dev tools are closed - window.console not even defined */\n    consoleLogger = errorLogger = function () {};\n  }\n\n  return [consoleLogger, errorLogger].map(getHandler) as [Function, Function];\n};\n\nclass Logger {\n  private static logLevel: LogLevels = LogLevels.Error; // default logLevel\n  private static logHandler: Function;\n  private static logErrorHandler: Function;\n\n  // public constants\n  static readonly LOG_NONE: LogLevels = LogLevels.None;\n  static readonly LOG_ERROR: LogLevels = LogLevels.Error;\n  static readonly LOG_MAJOR: LogLevels = LogLevels.Major;\n  static readonly LOG_MINOR: LogLevels = LogLevels.Minor;\n  static readonly LOG_MICRO: LogLevels = LogLevels.Micro;\n  // aliases\n  static readonly LOG_DEFAULT: LogLevels = LogLevels.Error;\n  static readonly LOG_DEBUG: LogLevels = LogLevels.Micro;\n\n  constructor() {\n    Logger.logLevel = Logger.LOG_DEFAULT;\n  }\n\n  static initLogHandlers() {\n    const [logHandler, logErrorHandler] = getDefaultLoggers();\n    this.logHandler = logHandler;\n    this.logErrorHandler = logErrorHandler;\n  }\n\n  /* public static functions */\n  static logAction = (level: LogLevels, action: string, message?: string) => {\n    if (Logger.shouldLog(level)) {\n      (level === LogLevels.Error ? Logger.logErrorHandler : Logger.logHandler)('Ably: ' + action + ': ' + message);\n    }\n  };\n\n  /* Where a logging operation is expensive, such as serialisation of data, use shouldLog will prevent\n\t   the object being serialised if the log level will not output the message */\n  static shouldLog = (level: LogLevels) => {\n    return level <= Logger.logLevel;\n  };\n\n  static setLog = (level: LogLevels | undefined, handler: Function | undefined) => {\n    if (level !== undefined) Logger.logLevel = level;\n    if (handler !== undefined) Logger.logHandler = Logger.logErrorHandler = handler;\n  };\n}\n\nexport default Logger;\n", "import Platform from 'common/platform';\nimport ErrorInfo, { PartialErrorInfo } from 'common/lib/types/errorinfo';\nimport Realtime from '../client/realtime';\nimport { BaseClient } from '../client/baseclient';\n\nfunction randomPosn(arrOrStr: Array<unknown> | string) {\n  return Math.floor(Math.random() * arrOrStr.length);\n}\n\n/*\n * Add a set of properties to a target object\n * target: the target object\n * props:  an object whose enumerable properties are\n *         added, by reference only\n */\nexport function mixin(\n  target: Record<string, unknown>,\n  ...args: Array<object | undefined | null>\n): Record<string, unknown> {\n  for (let i = 0; i < args.length; i++) {\n    const source = args[i];\n    if (!source) {\n      break;\n    }\n    const hasOwnProperty = Object.prototype.hasOwnProperty;\n    for (const key in source) {\n      if (!hasOwnProperty || hasOwnProperty.call(source, key)) {\n        target[key] = (source as Record<string, unknown>)[key];\n      }\n    }\n  }\n  return target;\n}\n\n/*\n * Add a set of properties to a target object\n * target: the target object\n * props:  an object whose enumerable properties are\n *         added, by reference only\n */\nexport function copy<T = Record<string, unknown>>(src: T | Record<string, unknown> | null | undefined): T {\n  return mixin({}, src as Record<string, unknown>) as T;\n}\n\n/*\n * Determine whether or not a given object is\n * an array.\n */\nexport const isArray =\n  Array.isArray ||\n  function (value: unknown): value is Array<unknown> {\n    return Object.prototype.toString.call(value) == '[object Array]';\n  };\n\n/*\n * Ensures that an Array object is always returned\n * returning the original Array of obj is an Array\n * else wrapping the obj in a single element Array\n */\nexport function ensureArray(obj: Record<string, unknown>): unknown[] {\n  if (isEmptyArg(obj)) {\n    return [];\n  }\n  if (isArray(obj)) {\n    return obj;\n  }\n  return [obj];\n}\n\nexport function isObject(ob: unknown): ob is Record<string, unknown> {\n  return Object.prototype.toString.call(ob) == '[object Object]';\n}\n\n/*\n * Determine whether or not an object contains\n * any enumerable properties.\n * ob: the object\n */\nexport function isEmpty(ob: Record<string, unknown> | unknown[]): boolean {\n  for (const prop in ob) return false;\n  return true;\n}\n\n/*\n * Determine whether or not an argument to an overloaded function is\n * undefined (missing) or null.\n * This method is useful when constructing functions such as (WebIDL terminology):\n *   off([TreatUndefinedAs=Null] DOMString? event)\n * as you can then confirm the argument using:\n *   Utils.isEmptyArg(event)\n */\n\nexport function isEmptyArg(arg: unknown): arg is null | undefined {\n  return arg === null || arg === undefined;\n}\n\n/*\n * Perform a simple shallow clone of an object.\n * Result is an object irrespective of whether\n * the input is an object or array. All\n * enumerable properties are copied.\n * ob: the object\n */\nexport function shallowClone(ob: Record<string, unknown>): Record<string, unknown> {\n  const result = new Object() as Record<string, unknown>;\n  for (const prop in ob) result[prop] = ob[prop];\n  return result;\n}\n\n/*\n * Clone an object by creating a new object with the\n * given object as its prototype. Optionally\n * a set of additional own properties can be\n * supplied to be added to the newly created clone.\n * ob:            the object to be cloned\n * ownProperties: optional object with additional\n *                properties to add\n */\nexport function prototypicalClone(\n  ob: Record<string, unknown>,\n  ownProperties: Record<string, unknown>\n): Record<string, unknown> {\n  class F {}\n  F.prototype = ob;\n  const result = new F() as Record<string, unknown>;\n  if (ownProperties) mixin(result, ownProperties);\n  return result;\n}\n\n/*\n * Declare a constructor to represent a subclass\n * of another constructor\n * If platform has a built-in version we use that from Platform, else we\n * define here (so can make use of other Utils fns)\n * See node.js util.inherits\n */\nexport const inherits = function (ctor: any, superCtor: Function) {\n  if (Platform.Config.inherits) {\n    Platform.Config.inherits(ctor, superCtor);\n    return;\n  }\n  ctor.super_ = superCtor;\n  ctor.prototype = prototypicalClone(superCtor.prototype, { constructor: ctor });\n};\n\n/*\n * Determine whether or not an object has an enumerable\n * property whose value equals a given value.\n * ob:  the object\n * val: the value to find\n */\nexport function containsValue(ob: Record<string, unknown>, val: unknown): boolean {\n  for (const i in ob) {\n    if (ob[i] == val) return true;\n  }\n  return false;\n}\n\nexport function intersect<T>(arr: Array<string>, ob: string[] | Record<string, T>): string[] {\n  return isArray(ob) ? arrIntersect(arr, ob) : arrIntersectOb(arr, ob);\n}\n\nexport function arrIntersect<T>(arr1: Array<T>, arr2: Array<T>): Array<T> {\n  const result = [];\n  for (let i = 0; i < arr1.length; i++) {\n    const member = arr1[i];\n    if (arrIndexOf(arr2, member) != -1) result.push(member);\n  }\n  return result;\n}\n\nexport function arrIntersectOb(arr: Array<string>, ob: Record<string, unknown>): string[] {\n  const result = [];\n  for (let i = 0; i < arr.length; i++) {\n    const member = arr[i];\n    if (member in ob) result.push(member);\n  }\n  return result;\n}\n\nexport function arrSubtract<T>(arr1: Array<T>, arr2: Array<T>): Array<T> {\n  const result = [];\n  for (let i = 0; i < arr1.length; i++) {\n    const element = arr1[i];\n    if (arrIndexOf(arr2, element) == -1) result.push(element);\n  }\n  return result;\n}\n\nexport const arrIndexOf = (Array.prototype.indexOf as unknown)\n  ? function (arr: Array<unknown>, elem: unknown, fromIndex?: number) {\n      return arr.indexOf(elem, fromIndex);\n    }\n  : function (arr: Array<unknown>, elem: unknown, fromIndex?: number) {\n      fromIndex = fromIndex || 0;\n      const len = arr.length;\n      for (; fromIndex < len; fromIndex++) {\n        if (arr[fromIndex] === elem) {\n          return fromIndex;\n        }\n      }\n      return -1;\n    };\n\nexport function arrIn(arr: Array<unknown>, val: unknown): boolean {\n  return arrIndexOf(arr, val) !== -1;\n}\n\nexport function arrDeleteValue<T>(arr: Array<T>, val: T): boolean {\n  const idx = arrIndexOf(arr, val);\n  const res = idx != -1;\n  if (res) arr.splice(idx, 1);\n  return res;\n}\n\nexport function arrWithoutValue<T>(arr: Array<T>, val: T): Array<T> {\n  const newArr = arr.slice();\n  arrDeleteValue(newArr, val);\n  return newArr;\n}\n\n/*\n * Construct an array of the keys of the enumerable\n * properties of a given object, optionally limited\n * to only the own properties.\n * ob:      the object\n * ownOnly: boolean, get own properties only\n */\nexport function keysArray(ob: Record<string, unknown>, ownOnly?: boolean): Array<string> {\n  const result = [];\n  for (const prop in ob) {\n    if (ownOnly && !Object.prototype.hasOwnProperty.call(ob, prop)) continue;\n    result.push(prop);\n  }\n  return result;\n}\n\n/*\n * Construct an array of the values of the enumerable\n * properties of a given object, optionally limited\n * to only the own properties.\n * ob:      the object\n * ownOnly: boolean, get own properties only\n */\nexport function valuesArray<T>(ob: Record<string, T>, ownOnly?: boolean): T[] {\n  const result = [];\n  for (const prop in ob) {\n    if (ownOnly && !Object.prototype.hasOwnProperty.call(ob, prop)) continue;\n    result.push(ob[prop]);\n  }\n  return result;\n}\n\nexport function forInOwnNonNullProperties(ob: Record<string, unknown>, fn: (prop: string) => void): void {\n  for (const prop in ob) {\n    if (Object.prototype.hasOwnProperty.call(ob, prop) && ob[prop]) {\n      fn(prop);\n    }\n  }\n}\n\nexport const arrForEach = (Array.prototype.forEach as unknown)\n  ? function <T = unknown>(arr: Array<T>, fn: (value: T, index: number, arr: Array<T>) => unknown) {\n      arr.forEach(fn);\n    }\n  : function <T = unknown>(arr: Array<T>, fn: (value: T, index: number, arr: Array<T>) => unknown) {\n      const len = arr.length;\n      for (let i = 0; i < len; i++) {\n        fn(arr[i], i, arr);\n      }\n    };\n\n/* Useful when the function may mutate the array */\nexport function safeArrForEach<T = unknown>(\n  arr: Array<T>,\n  fn: (value: T, index: number, arr: Array<T>) => unknown\n): void {\n  return arrForEach(arr.slice(), fn);\n}\n\nexport const arrMap = (Array.prototype.map as unknown)\n  ? function <T1, T2>(arr: Array<T1>, fn: (value: T1, index?: number, arr?: Array<T1>) => T2) {\n      return arr.map(fn);\n    }\n  : function <T>(arr: Array<T>, fn: (value: T, index?: number, arr?: Array<T>) => unknown) {\n      const result = [];\n      const len = arr.length;\n      for (let i = 0; i < len; i++) {\n        result.push(fn(arr[i], i, arr));\n      }\n      return result;\n    };\n\nexport const arrFilter = (Array.prototype.filter as unknown)\n  ? function <T>(arr: Array<T>, fn: (value: T, index?: number, arr?: Array<T>) => boolean) {\n      return arr.filter(fn);\n    }\n  : function <T>(arr: Array<T>, fn: (value: T, index?: number, arr?: Array<T>) => boolean) {\n      const result = [],\n        len = arr.length;\n      for (let i = 0; i < len; i++) {\n        if (fn(arr[i])) {\n          result.push(arr[i]);\n        }\n      }\n      return result;\n    };\n\nexport const arrEvery = (Array.prototype.every as unknown)\n  ? function <T>(arr: Array<T>, fn: (value: T, index?: number, arr?: Array<T>) => boolean) {\n      return arr.every(fn);\n    }\n  : function <T>(arr: Array<T>, fn: (value: T, index?: number, arr?: Array<T>) => boolean) {\n      const len = arr.length;\n      for (let i = 0; i < len; i++) {\n        if (!fn(arr[i], i, arr)) {\n          return false;\n        }\n      }\n      return true;\n    };\n\nexport function allSame(arr: Array<Record<string, unknown>>, prop: string): boolean {\n  if (arr.length === 0) {\n    return true;\n  }\n  const first = arr[0][prop];\n  return arrEvery(arr, function (item) {\n    return item[prop] === first;\n  });\n}\n\nexport enum Format {\n  msgpack = 'msgpack',\n  json = 'json',\n}\n\nexport function arrPopRandomElement<T>(arr: Array<T>): T {\n  return arr.splice(randomPosn(arr), 1)[0];\n}\n\nexport function toQueryString(params?: Record<string, string> | null): string {\n  const parts = [];\n  if (params) {\n    for (const key in params) parts.push(encodeURIComponent(key) + '=' + encodeURIComponent(params[key]));\n  }\n  return parts.length ? '?' + parts.join('&') : '';\n}\n\nexport function parseQueryString(query: string): Record<string, string> {\n  let match;\n  const search = /([^?&=]+)=?([^&]*)/g;\n  const result: Record<string, string> = {};\n\n  while ((match = search.exec(query))) result[decodeURIComponent(match[1])] = decodeURIComponent(match[2]);\n\n  return result;\n}\n\nexport const now =\n  Date.now ||\n  function () {\n    /* IE 8 */\n    return new Date().getTime();\n  };\n\nexport function isErrorInfoOrPartialErrorInfo(err: unknown): err is ErrorInfo | PartialErrorInfo {\n  return typeof err == 'object' && err !== null && (err instanceof ErrorInfo || err instanceof PartialErrorInfo);\n}\n\nexport function inspectError(err: unknown): string {\n  if (\n    err instanceof Error ||\n    (err as ErrorInfo)?.constructor?.name === 'ErrorInfo' ||\n    (err as PartialErrorInfo)?.constructor?.name === 'PartialErrorInfo'\n  )\n    return Platform.Config.inspect(err);\n  return (err as Error).toString();\n}\n\nexport function inspectBody(body: unknown): string {\n  if (Platform.BufferUtils.isBuffer(body)) {\n    return (body as any).toString();\n  } else if (typeof body === 'string') {\n    return body;\n  } else {\n    return Platform.Config.inspect(body);\n  }\n}\n\n/* Data is assumed to be either a string or a buffer. */\nexport function dataSizeBytes(data: string | Buffer): number {\n  if (Platform.BufferUtils.isBuffer(data)) {\n    return Platform.BufferUtils.byteLength(data);\n  }\n  if (typeof data === 'string') {\n    return Platform.Config.stringByteSize(data);\n  }\n  throw new Error('Expected input of Utils.dataSizeBytes to be a buffer or string, but was: ' + typeof data);\n}\n\nexport function cheapRandStr(): string {\n  return String(Math.random()).substr(2);\n}\n\n/* Takes param the minimum number of bytes of entropy the string must\n * include, not the length of the string. String length produced is not\n * guaranteed. */\nexport const randomString = (numBytes: number): string => {\n  if (Platform.Config.getRandomValues && typeof Uint8Array !== 'undefined') {\n    const uIntArr = new Uint8Array(numBytes);\n    (Platform.Config.getRandomValues as Function)(uIntArr);\n    return Platform.BufferUtils.base64Encode(uIntArr);\n  }\n  /* No secure random generator available; fall back to Math.random.\n   * TODO we should no longer end up in this scenario \u2014 and hence should be able to remove this code \u2014 given that all supported platforms should now have a random generator \u2014 see https://github.com/ably/ably-js/issues/1332\n   */\n  const charset = Platform.BufferUtils.base64CharSet;\n  /* base64 has 33% overhead; round length up */\n  const length = Math.round((numBytes * 4) / 3);\n  let result = '';\n  for (let i = 0; i < length; i++) {\n    result += charset[randomPosn(charset)];\n  }\n  return result;\n};\n\n/* Pick n elements at random without replacement from an array */\nexport function arrChooseN<T>(arr: Array<T>, n: number): Array<T> {\n  const numItems = Math.min(n, arr.length),\n    mutableArr = arr.slice(),\n    result: Array<T> = [];\n  for (let i = 0; i < numItems; i++) {\n    result.push(arrPopRandomElement(mutableArr));\n  }\n  return result;\n}\n\nexport const trim = (String.prototype.trim as unknown)\n  ? function (str: string) {\n      return str.trim();\n    }\n  : function (str: string) {\n      return str.replace(/^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g, '');\n    };\n\nexport function promisify<T>(ob: Record<string, any>, fnName: string, args: IArguments | unknown[]): Promise<T> {\n  return new Promise(function (resolve, reject) {\n    ob[fnName](...(args as unknown[]), function (err: Error, res: unknown) {\n      err ? reject(err) : resolve(res as T);\n    });\n  });\n}\n\nexport function decodeBody<T>(body: unknown, format?: Format | null): T {\n  return format == 'msgpack' ? Platform.Config.msgpack.decode(body as Buffer) : JSON.parse(String(body));\n}\n\nexport function encodeBody(body: unknown, format?: Format): string | Buffer {\n  return format == 'msgpack' ? (Platform.Config.msgpack.encode(body, true) as Buffer) : JSON.stringify(body);\n}\n\nexport function allToLowerCase(arr: Array<string>): Array<string> {\n  return arr.map(function (element) {\n    return element && element.toLowerCase();\n  });\n}\n\nexport function allToUpperCase(arr: Array<string>): Array<string> {\n  return arr.map(function (element) {\n    return element && element.toUpperCase();\n  });\n}\n\nexport function getBackoffCoefficient(n: number) {\n  return Math.min((n + 2) / 3, 2);\n}\n\nexport function getJitterCoefficient() {\n  return 1 - Math.random() * 0.2;\n}\n\nexport function getGlobalObject() {\n  if (typeof global !== 'undefined') {\n    return global;\n  }\n\n  if (typeof window !== 'undefined') {\n    return window;\n  }\n\n  return self;\n}\n\nexport function shallowEquals(source: Record<string, unknown>, target: Record<string, unknown>) {\n  return (\n    Object.keys(source).every((key) => source[key] === target[key]) &&\n    Object.keys(target).every((key) => target[key] === source[key])\n  );\n}\n\nexport function matchDerivedChannel(name: string) {\n  /**\n   * This regex check is to retain existing channel params if any e.g [?rewind=1]foo to\n   * [filter=xyz?rewind=1]foo. This is to keep channel compatibility around use of\n   * channel params that work with derived channels.\n   *\n   * This eslint unsafe regex warning is triggered because the RegExp uses nested quantifiers,\n   * but it does not create any situation where the regex engine has to\n   * explore a large number of possible matches so it\u2019s safe to ignore\n   */\n  const regex = /^(\\[([^?]*)(?:(.*))\\])?(.+)$/; // eslint-disable-line\n  const match = name.match(regex);\n  if (!match || !match.length || match.length < 5) {\n    throw new ErrorInfo('regex match failed', 400, 40010);\n  }\n  // Fail if there is already a channel qualifier, eg [meta]foo should fail instead of just overriding with [filter=xyz]foo\n  if (match![2]) {\n    throw new ErrorInfo(`cannot use a derived option with a ${match[2]} channel`, 400, 40010);\n  }\n  // Return match values to be added to derive channel quantifier.\n  return {\n    qualifierParam: match[3] || '',\n    channelName: match[4],\n  };\n}\n\nexport function toBase64(str: string) {\n  const bufferUtils = Platform.BufferUtils;\n  const textBuffer = bufferUtils.utf8Encode(str);\n  return bufferUtils.base64Encode(textBuffer);\n}\n\nexport function isRealtime(client: BaseClient): client is Realtime {\n  return !!(client as Realtime).connection;\n}\n", "import Platform from 'common/platform';\nimport * as Utils from '../util/utils';\nimport * as API from '../../../../ably';\n\nexport interface IPartialErrorInfo extends Error {\n  code: number | null;\n  statusCode?: number;\n  cause?: string | Error | ErrorInfo;\n  href?: string;\n}\n\nfunction toString(err: ErrorInfo | PartialErrorInfo) {\n  let result = '[' + err.constructor.name;\n  if (err.message) result += ': ' + err.message;\n  if (err.statusCode) result += '; statusCode=' + err.statusCode;\n  if (err.code) result += '; code=' + err.code;\n  if (err.cause) result += '; cause=' + Utils.inspectError(err.cause);\n  if (err.href && !(err.message && err.message.indexOf('help.ably.io') > -1)) result += '; see ' + err.href + ' ';\n  result += ']';\n  return result;\n}\n\nexport interface IConvertibleToErrorInfo {\n  message: string;\n  code: number;\n  statusCode: number;\n}\n\nexport default class ErrorInfo extends Error implements IPartialErrorInfo, API.Types.ErrorInfo {\n  code: number;\n  statusCode: number;\n  cause?: string | Error | ErrorInfo;\n  href?: string;\n\n  constructor(message: string, code: number, statusCode: number, cause?: string | Error | ErrorInfo) {\n    super(message);\n    if (typeof Object.setPrototypeOf !== 'undefined') {\n      Object.setPrototypeOf(this, ErrorInfo.prototype);\n    }\n    this.code = code;\n    this.statusCode = statusCode;\n    this.cause = cause;\n  }\n\n  toString(): string {\n    return toString(this);\n  }\n\n  static fromValues(values: IConvertibleToErrorInfo): ErrorInfo {\n    const { message, code, statusCode } = values;\n    if (typeof message !== 'string' || typeof code !== 'number' || typeof statusCode !== 'number') {\n      throw new Error('ErrorInfo.fromValues(): invalid values: ' + Platform.Config.inspect(values));\n    }\n    const result = Object.assign(new ErrorInfo(message, code, statusCode), values);\n    if (result.code && !result.href) {\n      result.href = 'https://help.ably.io/error/' + result.code;\n    }\n    return result;\n  }\n}\n\nexport class PartialErrorInfo extends Error implements IPartialErrorInfo {\n  code: number | null;\n  statusCode?: number;\n  cause?: string | Error | ErrorInfo;\n  href?: string;\n\n  constructor(message: string, code: number | null, statusCode?: number, cause?: string | Error | ErrorInfo) {\n    super(message);\n    if (typeof Object.setPrototypeOf !== 'undefined') {\n      Object.setPrototypeOf(this, PartialErrorInfo.prototype);\n    }\n    this.code = code;\n    this.statusCode = statusCode;\n    this.cause = cause;\n  }\n\n  toString(): string {\n    return toString(this);\n  }\n}\n", "import Platform from 'common/platform';\nimport Logger from '../util/logger';\nimport ErrorInfo from './errorinfo';\nimport { ChannelOptions } from '../../types/channel';\nimport PresenceMessage from './presencemessage';\nimport * as Utils from '../util/utils';\nimport { Bufferlike as BrowserBufferlike } from '../../../platform/web/lib/util/bufferutils';\nimport * as API from '../../../../ably';\n\nexport type CipherOptions = {\n  channelCipher: {\n    encrypt: Function;\n    algorithm: 'aes';\n  };\n  cipher?: {\n    channelCipher: {\n      encrypt: Function;\n      algorithm: 'aes';\n    };\n  };\n};\n\ntype EncodingDecodingContext = {\n  channelOptions: ChannelOptions;\n  plugins: {\n    vcdiff?: {\n      encrypt: Function;\n      decode: Function;\n    };\n  };\n  baseEncodedPreviousPayload?: Buffer | BrowserBufferlike;\n};\n\nfunction normaliseContext(context: CipherOptions | EncodingDecodingContext | ChannelOptions): EncodingDecodingContext {\n  if (!context || !(context as EncodingDecodingContext).channelOptions) {\n    return {\n      channelOptions: context as ChannelOptions,\n      plugins: {},\n      baseEncodedPreviousPayload: undefined,\n    };\n  }\n  return context as EncodingDecodingContext;\n}\n\nfunction normalizeCipherOptions(options: API.Types.ChannelOptions | null): ChannelOptions {\n  if (options && options.cipher) {\n    if (!Platform.Crypto) throw new Error('Encryption not enabled; use ably.encryption.js instead');\n    const cipher = Platform.Crypto.getCipher(options.cipher);\n    return {\n      cipher: cipher.cipherParams,\n      channelCipher: cipher.cipher,\n    };\n  }\n  return options ?? {};\n}\n\nfunction getMessageSize(msg: Message) {\n  let size = 0;\n  if (msg.name) {\n    size += msg.name.length;\n  }\n  if (msg.clientId) {\n    size += msg.clientId.length;\n  }\n  if (msg.extras) {\n    size += JSON.stringify(msg.extras).length;\n  }\n  if (msg.data) {\n    size += Utils.dataSizeBytes(msg.data);\n  }\n  return size;\n}\n\nclass Message {\n  name?: string;\n  id?: string;\n  timestamp?: number;\n  clientId?: string;\n  connectionId?: string;\n  connectionKey?: string;\n  data?: any;\n  encoding?: string | null;\n  extras?: any;\n  size?: number;\n\n  /**\n   * Overload toJSON() to intercept JSON.stringify()\n   * @return {*}\n   */\n  toJSON() {\n    /* encode data to base64 if present and we're returning real JSON;\n     * although msgpack calls toJSON(), we know it is a stringify()\n     * call if it has a non-empty arguments list */\n    let encoding = this.encoding;\n    let data = this.data;\n    if (data && Platform.BufferUtils.isBuffer(data)) {\n      if (arguments.length > 0) {\n        /* stringify call */\n        encoding = encoding ? encoding + '/base64' : 'base64';\n        data = Platform.BufferUtils.base64Encode(data);\n      } else {\n        /* Called by msgpack. toBuffer returns a datatype understandable by\n         * that platform's msgpack implementation (Buffer in node, Uint8Array\n         * in browsers) */\n        data = Platform.BufferUtils.toBuffer(data);\n      }\n    }\n    return {\n      name: this.name,\n      id: this.id,\n      clientId: this.clientId,\n      connectionId: this.connectionId,\n      connectionKey: this.connectionKey,\n      extras: this.extras,\n      encoding,\n      data,\n    };\n  }\n\n  toString(): string {\n    let result = '[Message';\n    if (this.name) result += '; name=' + this.name;\n    if (this.id) result += '; id=' + this.id;\n    if (this.timestamp) result += '; timestamp=' + this.timestamp;\n    if (this.clientId) result += '; clientId=' + this.clientId;\n    if (this.connectionId) result += '; connectionId=' + this.connectionId;\n    if (this.encoding) result += '; encoding=' + this.encoding;\n    if (this.extras) result += '; extras =' + JSON.stringify(this.extras);\n    if (this.data) {\n      if (typeof this.data == 'string') result += '; data=' + this.data;\n      else if (Platform.BufferUtils.isBuffer(this.data))\n        result += '; data (buffer)=' + Platform.BufferUtils.base64Encode(this.data);\n      else result += '; data (json)=' + JSON.stringify(this.data);\n    }\n    if (this.extras) result += '; extras=' + JSON.stringify(this.extras);\n    result += ']';\n    return result;\n  }\n\n  static encrypt(msg: Message | PresenceMessage, options: CipherOptions, callback: Function) {\n    let data = msg.data,\n      encoding = msg.encoding,\n      cipher = options.channelCipher;\n\n    encoding = encoding ? encoding + '/' : '';\n    if (!Platform.BufferUtils.isBuffer(data)) {\n      data = Platform.BufferUtils.utf8Encode(String(data));\n      encoding = encoding + 'utf-8/';\n    }\n    cipher.encrypt(data, function (err: Error, data: unknown) {\n      if (err) {\n        callback(err);\n        return;\n      }\n      msg.data = data;\n      msg.encoding = encoding + 'cipher+' + cipher.algorithm;\n      callback(null, msg);\n    });\n  }\n\n  static encode(msg: Message | PresenceMessage, options: CipherOptions, callback: Function): void {\n    const data = msg.data;\n    const nativeDataType =\n      typeof data == 'string' || Platform.BufferUtils.isBuffer(data) || data === null || data === undefined;\n\n    if (!nativeDataType) {\n      if (Utils.isObject(data) || Utils.isArray(data)) {\n        msg.data = JSON.stringify(data);\n        msg.encoding = msg.encoding ? msg.encoding + '/json' : 'json';\n      } else {\n        throw new ErrorInfo('Data type is unsupported', 40013, 400);\n      }\n    }\n\n    if (options != null && options.cipher) {\n      Message.encrypt(msg, options, callback);\n    } else {\n      callback(null, msg);\n    }\n  }\n\n  static encodeArray(messages: Array<Message>, options: CipherOptions, callback: Function): void {\n    let processed = 0;\n    for (let i = 0; i < messages.length; i++) {\n      Message.encode(messages[i], options, function (err: Error) {\n        if (err) {\n          callback(err);\n          return;\n        }\n        processed++;\n        if (processed == messages.length) {\n          callback(null, messages);\n        }\n      });\n    }\n  }\n\n  static serialize = Utils.encodeBody;\n\n  static async decode(\n    message: Message | PresenceMessage,\n    inputContext: CipherOptions | EncodingDecodingContext | ChannelOptions\n  ): Promise<void> {\n    const context = normaliseContext(inputContext);\n\n    let lastPayload = message.data;\n    const encoding = message.encoding;\n    if (encoding) {\n      const xforms = encoding.split('/');\n      let lastProcessedEncodingIndex,\n        encodingsToProcess = xforms.length,\n        data = message.data;\n\n      let xform = '';\n      try {\n        while ((lastProcessedEncodingIndex = encodingsToProcess) > 0) {\n          // eslint-disable-next-line security/detect-unsafe-regex\n          const match = xforms[--encodingsToProcess].match(/([-\\w]+)(\\+([\\w-]+))?/);\n          if (!match) break;\n          xform = match[1];\n          switch (xform) {\n            case 'base64':\n              data = Platform.BufferUtils.base64Decode(String(data));\n              if (lastProcessedEncodingIndex == xforms.length) {\n                lastPayload = data;\n              }\n              continue;\n            case 'utf-8':\n              data = Platform.BufferUtils.utf8Decode(data);\n              continue;\n            case 'json':\n              data = JSON.parse(data);\n              continue;\n            case 'cipher':\n              if (\n                context.channelOptions != null &&\n                context.channelOptions.cipher &&\n                context.channelOptions.channelCipher\n              ) {\n                const xformAlgorithm = match[3],\n                  cipher = context.channelOptions.channelCipher;\n                /* don't attempt to decrypt unless the cipher params are compatible */\n                if (xformAlgorithm != cipher.algorithm) {\n                  throw new Error('Unable to decrypt message with given cipher; incompatible cipher params');\n                }\n                data = await cipher.decrypt(data);\n                continue;\n              } else {\n                throw new Error('Unable to decrypt message; not an encrypted channel');\n              }\n            case 'vcdiff':\n              if (!context.plugins || !context.plugins.vcdiff) {\n                throw new ErrorInfo(\n                  'Missing Vcdiff decoder (https://github.com/ably-forks/vcdiff-decoder)',\n                  40019,\n                  400\n                );\n              }\n              if (typeof Uint8Array === 'undefined') {\n                throw new ErrorInfo(\n                  'Delta decoding not supported on this browser (need ArrayBuffer & Uint8Array)',\n                  40020,\n                  400\n                );\n              }\n              try {\n                let deltaBase = context.baseEncodedPreviousPayload;\n                if (typeof deltaBase === 'string') {\n                  deltaBase = Platform.BufferUtils.utf8Encode(deltaBase);\n                }\n\n                // vcdiff expects Uint8Arrays, can't copy with ArrayBuffers.\n                deltaBase = Platform.BufferUtils.toBuffer(deltaBase as Buffer);\n                data = Platform.BufferUtils.toBuffer(data);\n\n                data = Platform.BufferUtils.arrayBufferViewToBuffer(context.plugins.vcdiff.decode(data, deltaBase));\n                lastPayload = data;\n              } catch (e) {\n                throw new ErrorInfo('Vcdiff delta decode failed with ' + e, 40018, 400);\n              }\n              continue;\n            default:\n              throw new Error('Unknown encoding');\n          }\n        }\n      } catch (e) {\n        const err = e as ErrorInfo;\n        throw new ErrorInfo(\n          'Error processing the ' + xform + ' encoding, decoder returned \u2018' + err.message + '\u2019',\n          err.code || 40013,\n          400\n        );\n      } finally {\n        message.encoding =\n          (lastProcessedEncodingIndex as number) <= 0 ? null : xforms.slice(0, lastProcessedEncodingIndex).join('/');\n        message.data = data;\n      }\n    }\n    context.baseEncodedPreviousPayload = lastPayload;\n  }\n\n  static async fromResponseBody(\n    body: Array<Message>,\n    options: ChannelOptions | EncodingDecodingContext,\n    format?: Utils.Format\n  ): Promise<Message[]> {\n    if (format) {\n      body = Utils.decodeBody(body, format);\n    }\n\n    for (let i = 0; i < body.length; i++) {\n      const msg = (body[i] = Message.fromValues(body[i]));\n      try {\n        await Message.decode(msg, options);\n      } catch (e) {\n        Logger.logAction(Logger.LOG_ERROR, 'Message.fromResponseBody()', (e as Error).toString());\n      }\n    }\n    return body;\n  }\n\n  static fromValues(values: unknown): Message {\n    return Object.assign(new Message(), values);\n  }\n\n  static fromValuesArray(values: unknown[]): Message[] {\n    const count = values.length,\n      result = new Array(count);\n    for (let i = 0; i < count; i++) result[i] = Message.fromValues(values[i]);\n    return result;\n  }\n\n  static async fromEncoded(encoded: unknown, inputOptions?: API.Types.ChannelOptions): Promise<Message> {\n    const msg = Message.fromValues(encoded);\n    const options = normalizeCipherOptions(inputOptions ?? null);\n    /* if decoding fails at any point, catch and return the message decoded to\n     * the fullest extent possible */\n    try {\n      await Message.decode(msg, options);\n    } catch (e) {\n      Logger.logAction(Logger.LOG_ERROR, 'Message.fromEncoded()', (e as Error).toString());\n    }\n    return msg;\n  }\n\n  static async fromEncodedArray(encodedArray: Array<unknown>, options?: API.Types.ChannelOptions): Promise<Message[]> {\n    return Promise.all(\n      encodedArray.map(function (encoded) {\n        return Message.fromEncoded(encoded, options);\n      })\n    );\n  }\n\n  /* This should be called on encode()d (and encrypt()d) Messages (as it\n   * assumes the data is a string or buffer) */\n  static getMessagesSize(messages: Message[]): number {\n    let msg,\n      total = 0;\n    for (let i = 0; i < messages.length; i++) {\n      msg = messages[i];\n      total += msg.size || (msg.size = getMessageSize(msg));\n    }\n    return total;\n  }\n}\n\nexport default Message;\n", "import Logger from '../util/logger';\nimport Platform from 'common/platform';\nimport Message, { CipherOptions } from './message';\nimport * as Utils from '../util/utils';\nimport * as API from '../../../../ably';\n\nfunction toActionValue(actionString: string) {\n  return PresenceMessage.Actions.indexOf(actionString);\n}\n\nclass PresenceMessage {\n  action?: string | number;\n  id?: string;\n  timestamp?: number;\n  clientId?: string;\n  connectionId?: string;\n  data?: string | Buffer | Uint8Array;\n  encoding?: string;\n  size?: number;\n\n  static Actions = ['absent', 'present', 'enter', 'leave', 'update'];\n\n  /* Returns whether this presenceMessage is synthesized, i.e. was not actually\n   * sent by the connection (usually means a leave event sent 15s after a\n   * disconnection). This is useful because synthesized messages cannot be\n   * compared for newness by id lexicographically - RTP2b1\n   */\n  isSynthesized(): boolean {\n    if (!this.id || !this.connectionId) {\n      return true;\n    }\n    return this.id.substring(this.connectionId.length, 0) !== this.connectionId;\n  }\n\n  /* RTP2b2 */\n  parseId(): { connectionId: string; msgSerial: number; index: number } {\n    if (!this.id) throw new Error('parseId(): Presence message does not contain an id');\n    const parts = this.id.split(':');\n    return {\n      connectionId: parts[0],\n      msgSerial: parseInt(parts[1], 10),\n      index: parseInt(parts[2], 10),\n    };\n  }\n\n  /**\n   * Overload toJSON() to intercept JSON.stringify()\n   * @return {*}\n   */\n  toJSON(): {\n    id?: string;\n    clientId?: string;\n    action: number;\n    data: string | Buffer | Uint8Array;\n    encoding?: string;\n  } {\n    /* encode data to base64 if present and we're returning real JSON;\n     * although msgpack calls toJSON(), we know it is a stringify()\n     * call if it has a non-empty arguments list */\n    let data = this.data as string | Buffer | Uint8Array;\n    let encoding = this.encoding;\n    if (data && Platform.BufferUtils.isBuffer(data)) {\n      if (arguments.length > 0) {\n        /* stringify call */\n        encoding = encoding ? encoding + '/base64' : 'base64';\n        data = Platform.BufferUtils.base64Encode(data);\n      } else {\n        /* Called by msgpack. toBuffer returns a datatype understandable by\n         * that platform's msgpack implementation (Buffer in node, Uint8Array\n         * in browsers) */\n        data = Platform.BufferUtils.toBuffer(data);\n      }\n    }\n    return {\n      id: this.id,\n      clientId: this.clientId,\n      /* Convert presence action back to an int for sending to Ably */\n      action: toActionValue(this.action as string),\n      data: data,\n      encoding: encoding,\n    };\n  }\n\n  toString(): string {\n    let result = '[PresenceMessage';\n    result += '; action=' + this.action;\n    if (this.id) result += '; id=' + this.id;\n    if (this.timestamp) result += '; timestamp=' + this.timestamp;\n    if (this.clientId) result += '; clientId=' + this.clientId;\n    if (this.connectionId) result += '; connectionId=' + this.connectionId;\n    if (this.encoding) result += '; encoding=' + this.encoding;\n    if (this.data) {\n      if (typeof this.data == 'string') result += '; data=' + this.data;\n      else if (Platform.BufferUtils.isBuffer(this.data))\n        result += '; data (buffer)=' + Platform.BufferUtils.base64Encode(this.data);\n      else result += '; data (json)=' + JSON.stringify(this.data);\n    }\n    result += ']';\n    return result;\n  }\n\n  static encode = Message.encode;\n  static decode = Message.decode;\n\n  static async fromResponseBody(\n    body: Record<string, unknown>[],\n    options: CipherOptions,\n    format?: Utils.Format\n  ): Promise<PresenceMessage[]> {\n    const messages: PresenceMessage[] = [];\n    if (format) {\n      body = Utils.decodeBody(body, format);\n    }\n\n    for (let i = 0; i < body.length; i++) {\n      const msg = (messages[i] = PresenceMessage.fromValues(body[i], true));\n      try {\n        await PresenceMessage.decode(msg, options);\n      } catch (e) {\n        Logger.logAction(Logger.LOG_ERROR, 'PresenceMessage.fromResponseBody()', (e as Error).toString());\n      }\n    }\n    return messages;\n  }\n\n  static fromValues(values: PresenceMessage | Record<string, unknown>, stringifyAction?: boolean): PresenceMessage {\n    if (stringifyAction) {\n      values.action = PresenceMessage.Actions[values.action as number];\n    }\n    return Object.assign(new PresenceMessage(), values);\n  }\n\n  static fromValuesArray(values: unknown[]): PresenceMessage[] {\n    const count = values.length,\n      result = new Array(count);\n    for (let i = 0; i < count; i++) result[i] = PresenceMessage.fromValues(values[i] as Record<string, unknown>);\n    return result;\n  }\n\n  static async fromEncoded(encoded: unknown, options?: API.Types.ChannelOptions): Promise<PresenceMessage> {\n    const msg = PresenceMessage.fromValues(encoded as PresenceMessage | Record<string, unknown>, true);\n    /* if decoding fails at any point, catch and return the message decoded to\n     * the fullest extent possible */\n    try {\n      await PresenceMessage.decode(msg, options ?? {});\n    } catch (e) {\n      Logger.logAction(Logger.LOG_ERROR, 'PresenceMessage.fromEncoded()', (e as Error).toString());\n    }\n    return msg;\n  }\n\n  static async fromEncodedArray(\n    encodedArray: unknown[],\n    options?: API.Types.ChannelOptions\n  ): Promise<PresenceMessage[]> {\n    return Promise.all(\n      encodedArray.map(function (encoded) {\n        return PresenceMessage.fromEncoded(encoded, options);\n      })\n    );\n  }\n\n  static getMessagesSize = Message.getMessagesSize;\n}\n\nexport default PresenceMessage;\n", "{\n  \"name\": \"ably\",\n  \"description\": \"Realtime client library for Ably, the realtime messaging service\",\n  \"version\": \"1.2.40\",\n  \"license\": \"Apache-2.0\",\n  \"bugs\": {\n    \"url\": \"https://github.com/ably/ably-js/issues\",\n    \"email\": \"support@ably.com\"\n  },\n  \"main\": \"./build/ably-node.js\",\n  \"typings\": \"./ably.d.ts\",\n  \"react-native\": {\n    \"./build/ably-node.js\": \"./build/ably-reactnative.js\"\n  },\n  \"browser\": {\n    \"./build/ably-node.js\": \"./build/ably.js\"\n  },\n  \"files\": [\n    \"build/**\",\n    \"ably.d.ts\",\n    \"resources/**\"\n  ],\n  \"dependencies\": {\n    \"@ably/msgpack-js\": \"^0.4.0\",\n    \"got\": \"^11.8.5\",\n    \"ws\": \"^5.1\"\n  },\n  \"devDependencies\": {\n    \"@ably/vcdiff-decoder\": \"1.0.4\",\n    \"@types/node\": \"^18.0.0\",\n    \"@types/request\": \"^2.48.7\",\n    \"@types/ws\": \"^8.2.0\",\n    \"@typescript-eslint/eslint-plugin\": \"^5.14.0\",\n    \"@typescript-eslint/parser\": \"^5.14.0\",\n    \"async\": \"ably-forks/async#requirejs\",\n    \"aws-sdk\": \"^2.1075.0\",\n    \"chai\": \"^4.2.0\",\n    \"copy-webpack-plugin\": \"^11.0.0\",\n    \"cors\": \"~2.7\",\n    \"esbuild\": \"^0.18.10\",\n    \"esbuild-plugin-umd-wrapper\": \"^1.0.7\",\n    \"eslint\": \"^7.13.0\",\n    \"eslint-plugin-jsdoc\": \"^40.0.0\",\n    \"eslint-plugin-security\": \"^1.4.0\",\n    \"express\": \"^4.17.1\",\n    \"glob\": \"~4.4\",\n    \"grunt\": \"^1.4.1\",\n    \"grunt-bump\": \"^0.3.1\",\n    \"grunt-cli\": \"~1.2.0\",\n    \"grunt-contrib-concat\": \"~0.5\",\n    \"grunt-shell\": \"~1.1\",\n    \"grunt-webpack\": \"^5.0.0\",\n    \"hexy\": \"~0.2\",\n    \"kexec\": \"ably-forks/node-kexec#update-for-node-12\",\n    \"minimist\": \"^1.2.5\",\n    \"mocha\": \"^8.1.3\",\n    \"playwright\": \"^1.10.0\",\n    \"prettier\": \"^2.8.8\",\n    \"requirejs\": \"~2.1\",\n    \"shelljs\": \"~0.8\",\n    \"source-map-explorer\": \"^2.5.2\",\n    \"ts-loader\": \"^9.4.2\",\n    \"tsconfig-paths-webpack-plugin\": \"^4.0.1\",\n    \"tslib\": \"^2.3.1\",\n    \"typedoc\": \"^0.24.7\",\n    \"typescript\": \"^4.9.5\",\n    \"webpack\": \"^5.79.0\",\n    \"webpack-cli\": \"^5.0.1\"\n  },\n  \"engines\": {\n    \"node\": \">=5.10.x\"\n  },\n  \"repository\": \"ably/ably-js\",\n  \"jspm\": {\n    \"registry\": \"npm\",\n    \"directories\": {\n      \"lib\": \"build\"\n    },\n    \"main\": \"ably\"\n  },\n  \"scripts\": {\n    \"grunt\": \"grunt\",\n    \"test\": \"grunt test\",\n    \"test:node\": \"grunt test:node\",\n    \"test:webserver\": \"grunt test:webserver\",\n    \"test:playwright\": \"node test/support/runPlaywrightTests.js\",\n    \"concat\": \"grunt concat\",\n    \"build\": \"grunt build:all\",\n    \"build:node\": \"grunt build:node\",\n    \"build:browser\": \"grunt build:browser\",\n    \"requirejs\": \"grunt requirejs\",\n    \"lint\": \"eslint .\",\n    \"lint:fix\": \"eslint --fix .\",\n    \"prepare\": \"npm run build\",\n    \"format\": \"prettier --write --ignore-path .gitignore --ignore-path .prettierignore src test ably.d.ts webpack.config.js Gruntfile.js scripts/cdn_deploy.js docs/chrome-mv3.md\",\n    \"format:check\": \"prettier --check --ignore-path .gitignore --ignore-path .prettierignore src test ably.d.ts webpack.config.js Gruntfile.js scripts/cdn_deploy.js\",\n    \"sourcemap\": \"source-map-explorer build/ably.min.js\",\n    \"sourcemap:noencryption\": \"source-map-explorer build/ably.noencryption.min.js\",\n    \"modulereport\": \"node scripts/moduleReport.js\",\n    \"docs\": \"typedoc --entryPoints ably.d.ts --out docs/generated --readme docs/landing-page.md\"\n  }\n}\n", "import Platform from 'common/platform';\nimport * as Utils from './utils';\nimport Logger from './logger';\nimport ErrorInfo from 'common/lib/types/errorinfo';\nimport { version } from '../../../../package.json';\nimport ClientOptions, { InternalClientOptions, NormalisedClientOptions } from 'common/types/ClientOptions';\nimport IDefaults from '../../types/IDefaults';\n\nlet agent = 'ably-js/' + version;\n\ntype CompleteDefaults = IDefaults & {\n  ENVIRONMENT: string;\n  REST_HOST: string;\n  REALTIME_HOST: string;\n  FALLBACK_HOSTS: string[];\n  PORT: number;\n  TLS_PORT: number;\n  TIMEOUTS: {\n    disconnectedRetryTimeout: number;\n    suspendedRetryTimeout: number;\n    httpRequestTimeout: number;\n    channelRetryTimeout: number;\n    fallbackRetryTimeout: number;\n    connectionStateTtl: number;\n    realtimeRequestTimeout: number;\n    recvTimeout: number;\n    preferenceConnectTimeout: number;\n    parallelUpgradeDelay: number;\n  };\n  httpMaxRetryCount: number;\n  maxMessageSize: number;\n  version: string;\n  protocolVersion: number;\n  agent: string;\n  getHost(options: ClientOptions, host?: string | null, ws?: boolean): string;\n  getPort(options: ClientOptions, tls?: boolean): number | undefined;\n  getHttpScheme(options: ClientOptions): string;\n  environmentFallbackHosts(environment: string): string[];\n  getFallbackHosts(options: NormalisedClientOptions): string[];\n  getHosts(options: NormalisedClientOptions): string[];\n  checkHost(host: string): void;\n  getRealtimeHost(options: ClientOptions, production: boolean, environment: string): string;\n  objectifyOptions(options: ClientOptions | string): ClientOptions;\n  normaliseOptions(options: InternalClientOptions): NormalisedClientOptions;\n  defaultGetHeaders(options: NormalisedClientOptions, headersOptions?: HeadersOptions): Record<string, string>;\n  defaultPostHeaders(options: NormalisedClientOptions, headersOptions?: HeadersOptions): Record<string, string>;\n};\n\nconst Defaults = {\n  ENVIRONMENT: '',\n  REST_HOST: 'rest.ably.io',\n  REALTIME_HOST: 'realtime.ably.io',\n  FALLBACK_HOSTS: [\n    'A.ably-realtime.com',\n    'B.ably-realtime.com',\n    'C.ably-realtime.com',\n    'D.ably-realtime.com',\n    'E.ably-realtime.com',\n  ],\n  PORT: 80,\n  TLS_PORT: 443,\n  TIMEOUTS: {\n    /* Documented as options params: */\n    disconnectedRetryTimeout: 15000,\n    suspendedRetryTimeout: 30000,\n    /* Undocumented, but part of the api and can be used by customers: */\n    httpRequestTimeout: 15000,\n    channelRetryTimeout: 15000,\n    fallbackRetryTimeout: 600000,\n    /* For internal / test use only: */\n    connectionStateTtl: 120000,\n    realtimeRequestTimeout: 10000,\n    recvTimeout: 90000,\n    preferenceConnectTimeout: 6000,\n    parallelUpgradeDelay: 6000,\n  },\n  httpMaxRetryCount: 3,\n  maxMessageSize: 65536,\n\n  version,\n  protocolVersion: 2,\n  agent,\n  getHost,\n  getPort,\n  getHttpScheme,\n  environmentFallbackHosts,\n  getFallbackHosts,\n  getHosts,\n  checkHost,\n  objectifyOptions,\n  normaliseOptions,\n  defaultGetHeaders,\n  defaultPostHeaders,\n};\n\nexport function getHost(options: ClientOptions, host?: string | null, ws?: boolean): string {\n  if (ws) host = (host == options.restHost && options.realtimeHost) || host || options.realtimeHost;\n  else host = host || options.restHost;\n\n  return host as string;\n}\n\nexport function getPort(options: ClientOptions, tls?: boolean): number | undefined {\n  return tls || options.tls ? options.tlsPort : options.port;\n}\n\nexport function getHttpScheme(options: ClientOptions): string {\n  return options.tls ? 'https://' : 'http://';\n}\n\n// construct environment fallback hosts as per RSC15i\nexport function environmentFallbackHosts(environment: string): string[] {\n  return [\n    environment + '-a-fallback.ably-realtime.com',\n    environment + '-b-fallback.ably-realtime.com',\n    environment + '-c-fallback.ably-realtime.com',\n    environment + '-d-fallback.ably-realtime.com',\n    environment + '-e-fallback.ably-realtime.com',\n  ];\n}\n\nexport function getFallbackHosts(options: NormalisedClientOptions): string[] {\n  const fallbackHosts = options.fallbackHosts,\n    httpMaxRetryCount =\n      typeof options.httpMaxRetryCount !== 'undefined' ? options.httpMaxRetryCount : Defaults.httpMaxRetryCount;\n\n  return fallbackHosts ? Utils.arrChooseN(fallbackHosts, httpMaxRetryCount) : [];\n}\n\nexport function getHosts(options: NormalisedClientOptions): string[] {\n  return [options.restHost].concat(getFallbackHosts(options));\n}\n\nfunction checkHost(host: string): void {\n  if (typeof host !== 'string') {\n    throw new ErrorInfo('host must be a string; was a ' + typeof host, 40000, 400);\n  }\n  if (!host.length) {\n    throw new ErrorInfo('host must not be zero-length', 40000, 400);\n  }\n}\n\nfunction getRealtimeHost(options: ClientOptions, production: boolean, environment: string): string {\n  if (options.realtimeHost) return options.realtimeHost;\n  /* prefer setting realtimeHost to restHost as a custom restHost typically indicates\n   * a development environment is being used that can't be inferred by the library */\n  if (options.restHost) {\n    Logger.logAction(\n      Logger.LOG_MINOR,\n      'Defaults.normaliseOptions',\n      'restHost is set to \"' +\n        options.restHost +\n        '\" but realtimeHost is not set, so setting realtimeHost to \"' +\n        options.restHost +\n        '\" too. If this is not what you want, please set realtimeHost explicitly.'\n    );\n    return options.restHost;\n  }\n  return production ? Defaults.REALTIME_HOST : environment + '-' + Defaults.REALTIME_HOST;\n}\n\nfunction getTimeouts(options: ClientOptions) {\n  /* Allow values passed in options to override default timeouts */\n  const timeouts: Record<string, number> = {};\n  for (const prop in Defaults.TIMEOUTS) {\n    timeouts[prop] = (options as Record<string, number>)[prop] || (Defaults.TIMEOUTS as Record<string, number>)[prop];\n  }\n  return timeouts;\n}\n\nexport function getAgentString(options: ClientOptions): string {\n  let agentStr = Defaults.agent;\n  if (options.agents) {\n    for (var agent in options.agents) {\n      agentStr += ' ' + agent + '/' + options.agents[agent];\n    }\n  }\n  return agentStr;\n}\n\nexport function objectifyOptions(options: ClientOptions | string): ClientOptions {\n  if (typeof options == 'string') {\n    return options.indexOf(':') == -1 ? { token: options } : { key: options };\n  }\n  return options;\n}\n\nexport function normaliseOptions(options: InternalClientOptions): NormalisedClientOptions {\n  if (typeof options.recover === 'function' && options.closeOnUnload === true) {\n    Logger.logAction(\n      Logger.LOG_ERROR,\n      'Defaults.normaliseOptions',\n      'closeOnUnload was true and a session recovery function was set - these are mutually exclusive, so unsetting the latter'\n    );\n    options.recover = undefined;\n  }\n\n  if (!('closeOnUnload' in options)) {\n    /* Have closeOnUnload default to true unless we have any indication that\n     * the user may want to recover the connection */\n    options.closeOnUnload = !options.recover;\n  }\n\n  if (!('queueMessages' in options)) options.queueMessages = true;\n\n  /* infer hosts and fallbacks based on the configured environment */\n  const environment = (options.environment && String(options.environment).toLowerCase()) || Defaults.ENVIRONMENT;\n  const production = !environment || environment === 'production';\n\n  if (!options.fallbackHosts && !options.restHost && !options.realtimeHost && !options.port && !options.tlsPort) {\n    options.fallbackHosts = production ? Defaults.FALLBACK_HOSTS : environmentFallbackHosts(environment);\n  }\n\n  const restHost = options.restHost || (production ? Defaults.REST_HOST : environment + '-' + Defaults.REST_HOST);\n  const realtimeHost = getRealtimeHost(options, production, environment);\n\n  Utils.arrForEach((options.fallbackHosts || []).concat(restHost, realtimeHost), checkHost);\n\n  options.port = options.port || Defaults.PORT;\n  options.tlsPort = options.tlsPort || Defaults.TLS_PORT;\n  if (!('tls' in options)) options.tls = true;\n\n  const timeouts = getTimeouts(options);\n\n  if ('useBinaryProtocol' in options) {\n    options.useBinaryProtocol = Platform.Config.supportsBinary && options.useBinaryProtocol;\n  } else {\n    options.useBinaryProtocol = Platform.Config.preferBinary;\n  }\n\n  const headers: Record<string, string> = {};\n  if (options.clientId) {\n    headers['X-Ably-ClientId'] = Platform.BufferUtils.base64Encode(Platform.BufferUtils.utf8Encode(options.clientId));\n  }\n\n  if (!('idempotentRestPublishing' in options)) {\n    options.idempotentRestPublishing = true;\n  }\n\n  let connectivityCheckParams = null;\n  let connectivityCheckUrl = options.connectivityCheckUrl;\n  if (options.connectivityCheckUrl) {\n    let [uri, qs] = options.connectivityCheckUrl.split('?');\n    connectivityCheckParams = qs ? Utils.parseQueryString(qs) : {};\n    if (uri.indexOf('://') === -1) {\n      uri = 'https://' + uri;\n    }\n    connectivityCheckUrl = uri;\n  }\n\n  return {\n    ...options,\n    useBinaryProtocol:\n      'useBinaryProtocol' in options\n        ? Platform.Config.supportsBinary && options.useBinaryProtocol\n        : Platform.Config.preferBinary,\n    realtimeHost,\n    restHost,\n    maxMessageSize: options.internal?.maxMessageSize || Defaults.maxMessageSize,\n    timeouts,\n    connectivityCheckParams,\n    connectivityCheckUrl,\n    headers,\n  };\n}\n\nconst contentTypes = {\n  json: 'application/json',\n  xml: 'application/xml',\n  html: 'text/html',\n  msgpack: 'application/x-msgpack',\n};\n\nexport interface HeadersOptions {\n  format?: Utils.Format;\n  protocolVersion?: number;\n}\n\nconst defaultHeadersOptions: Required<HeadersOptions> = {\n  format: Utils.Format.json,\n  protocolVersion: Defaults.protocolVersion,\n};\n\nexport function defaultGetHeaders(\n  options: NormalisedClientOptions,\n  {\n    format = defaultHeadersOptions.format,\n    protocolVersion = defaultHeadersOptions.protocolVersion,\n  }: HeadersOptions = {}\n): Record<string, string> {\n  const accept = contentTypes[format];\n  return {\n    accept: accept,\n    'X-Ably-Version': protocolVersion.toString(),\n    'Ably-Agent': getAgentString(options),\n  };\n}\n\nexport function defaultPostHeaders(\n  options: NormalisedClientOptions,\n  {\n    format = defaultHeadersOptions.format,\n    protocolVersion = defaultHeadersOptions.protocolVersion,\n  }: HeadersOptions = {}\n): Record<string, string> {\n  let contentType;\n  const accept = (contentType = contentTypes[format]);\n\n  return {\n    accept: accept,\n    'content-type': contentType,\n    'X-Ably-Version': protocolVersion.toString(),\n    'Ably-Agent': getAgentString(options),\n  };\n}\n\nexport default Defaults as CompleteDefaults;\n\nexport function getDefaults(platformDefaults: IDefaults) {\n  return Object.assign(Defaults, platformDefaults);\n}\n", "import Logger from './logger';\n\ntype AnyFunction = (...args: any[]) => unknown;\n\nexport interface MulticasterInstance extends Function {\n  (...args: unknown[]): void;\n  push: (fn: AnyFunction) => void;\n}\n\nclass Multicaster {\n  members: Array<AnyFunction>;\n\n  // Private constructor; use static Multicaster.create instead\n  private constructor(members?: Array<AnyFunction | undefined>) {\n    this.members = (members as Array<AnyFunction>) || [];\n  }\n\n  call(...args: unknown[]): void {\n    for (const member of this.members) {\n      if (member) {\n        try {\n          member(...args);\n        } catch (e) {\n          Logger.logAction(\n            Logger.LOG_ERROR,\n            'Multicaster multiple callback handler',\n            'Unexpected exception: ' + e + '; stack = ' + (e as Error).stack\n          );\n        }\n      }\n    }\n  }\n\n  push(...args: Array<AnyFunction>): void {\n    this.members.push(...args);\n  }\n\n  static create(members?: Array<AnyFunction | undefined>): MulticasterInstance {\n    const instance = new Multicaster(members);\n    return Object.assign((...args: unknown[]) => instance.call(...args), {\n      push: (fn: AnyFunction) => instance.push(fn),\n    });\n  }\n}\n\nexport default Multicaster;\n", "enum HttpMethods {\n  Get = 'get',\n  Delete = 'delete',\n  Post = 'post',\n  Put = 'put',\n  Patch = 'patch',\n}\n\nexport default HttpMethods;\n", "import Logger from '../util/logger';\nimport * as Utils from '../util/utils';\nimport Multicaster from '../util/multicaster';\nimport ErrorInfo, { IPartialErrorInfo } from '../types/errorinfo';\nimport { ErrnoException, RequestCallback, RequestParams } from '../../types/http';\nimport * as API from '../../../../ably';\nimport { StandardCallback } from '../../types/utils';\nimport ClientOptions from '../../types/ClientOptions';\nimport HttpMethods from '../../constants/HttpMethods';\nimport Platform from '../../platform';\nimport { BaseClient } from './baseclient';\nimport Defaults from '../util/defaults';\n\nconst MAX_TOKEN_LENGTH = Math.pow(2, 17);\nfunction noop() {}\nfunction random() {\n  return ('000000' + Math.floor(Math.random() * 1e16)).slice(-16);\n}\n\n/* A client auth callback may give errors in any number of formats; normalise to an ErrorInfo or PartialErrorInfo */\nfunction normaliseAuthcallbackError(err: any) {\n  if (!Utils.isErrorInfoOrPartialErrorInfo(err)) {\n    return new ErrorInfo(Utils.inspectError(err), err.code || 40170, err.statusCode || 401);\n  }\n  /* network errors will not have an inherent error code */\n  if (!err.code) {\n    if (err.statusCode === 403) {\n      err.code = 40300;\n    } else {\n      err.code = 40170;\n      /* normalise statusCode to 401 per RSA4e */\n      err.statusCode = 401;\n    }\n  }\n  return err;\n}\n\nlet hmac = (text: string, key: string): string => {\n  const bufferUtils = Platform.BufferUtils;\n\n  const textBuffer = bufferUtils.utf8Encode(text);\n  const keyBuffer = bufferUtils.utf8Encode(key);\n\n  const digest = bufferUtils.hmacSha256(textBuffer, keyBuffer);\n\n  return bufferUtils.base64Encode(digest);\n};\n\nfunction c14n(capability?: string | Record<string, Array<string>>) {\n  if (!capability) return '';\n\n  if (typeof capability == 'string') capability = JSON.parse(capability);\n\n  const c14nCapability: Record<string, Array<string>> = Object.create(null);\n  const keys = Utils.keysArray(capability as Record<string, Array<string>>, true);\n  if (!keys) return '';\n  keys.sort();\n  for (let i = 0; i < keys.length; i++) {\n    c14nCapability[keys[i]] = (capability as Record<string, Array<string>>)[keys[i]].sort();\n  }\n  return JSON.stringify(c14nCapability);\n}\n\nfunction logAndValidateTokenAuthMethod(authOptions: API.Types.AuthOptions) {\n  if (authOptions.authCallback) {\n    Logger.logAction(Logger.LOG_MINOR, 'Auth()', 'using token auth with authCallback');\n  } else if (authOptions.authUrl) {\n    Logger.logAction(Logger.LOG_MINOR, 'Auth()', 'using token auth with authUrl');\n  } else if (authOptions.key) {\n    Logger.logAction(Logger.LOG_MINOR, 'Auth()', 'using token auth with client-side signing');\n  } else if (authOptions.tokenDetails) {\n    Logger.logAction(Logger.LOG_MINOR, 'Auth()', 'using token auth with supplied token only');\n  } else {\n    const msg = 'authOptions must include valid authentication parameters';\n    Logger.logAction(Logger.LOG_ERROR, 'Auth()', msg);\n    throw new Error(msg);\n  }\n}\n\nfunction basicAuthForced(options: ClientOptions) {\n  return 'useTokenAuth' in options && !options.useTokenAuth;\n}\n\n/* RSA4 */\nfunction useTokenAuth(options: ClientOptions) {\n  return (\n    options.useTokenAuth ||\n    (!basicAuthForced(options) && (options.authCallback || options.authUrl || options.token || options.tokenDetails))\n  );\n}\n\n/* RSA4a */\nfunction noWayToRenew(options: ClientOptions) {\n  return !options.key && !options.authCallback && !options.authUrl;\n}\n\nlet trId = 0;\nfunction getTokenRequestId() {\n  return trId++;\n}\n\nclass Auth {\n  client: BaseClient;\n  tokenParams: API.Types.TokenParams;\n  currentTokenRequestId: number | null;\n  waitingForTokenRequest: ReturnType<typeof Multicaster.create> | null;\n  // This initialization is always overwritten and only used to prevent a TypeScript compiler error\n  authOptions: API.Types.AuthOptions = {} as API.Types.AuthOptions;\n  tokenDetails?: API.Types.TokenDetails | null;\n  method?: string;\n  key?: string;\n  basicKey?: string;\n  clientId?: string | null;\n\n  constructor(client: BaseClient, options: ClientOptions) {\n    this.client = client;\n    this.tokenParams = options.defaultTokenParams || {};\n    /* The id of the current token request if one is in progress, else null */\n    this.currentTokenRequestId = null;\n    this.waitingForTokenRequest = null;\n\n    if (useTokenAuth(options)) {\n      /* Token auth */\n      if (noWayToRenew(options)) {\n        Logger.logAction(\n          Logger.LOG_ERROR,\n          'Auth()',\n          'Warning: library initialized with a token literal without any way to renew the token when it expires (no authUrl, authCallback, or key). See https://help.ably.io/error/40171 for help'\n        );\n      }\n      this._saveTokenOptions(options.defaultTokenParams as API.Types.TokenDetails, options);\n      logAndValidateTokenAuthMethod(this.authOptions);\n    } else {\n      /* Basic auth */\n      if (!options.key) {\n        const msg =\n          'No authentication options provided; need one of: key, authUrl, or authCallback (or for testing only, token or tokenDetails)';\n        Logger.logAction(Logger.LOG_ERROR, 'Auth()', msg);\n        throw new ErrorInfo(msg, 40160, 401);\n      }\n      Logger.logAction(Logger.LOG_MINOR, 'Auth()', 'anonymous, using basic auth');\n      this._saveBasicOptions(options);\n    }\n  }\n\n  /**\n   * Instructs the library to get a token immediately and ensures Token Auth\n   * is used for all future requests, storing the tokenParams and authOptions\n   * given as the new defaults for subsequent use.\n   *\n   * @param callback (err, tokenDetails)\n   */\n  authorize(callback: Function): void;\n\n  /**\n   * Instructs the library to get a token immediately and ensures Token Auth\n   * is used for all future requests, storing the tokenParams and authOptions\n   * given as the new defaults for subsequent use.\n   *\n   * @param tokenParams\n   * an object containing the parameters for the requested token:\n   *\n   * - ttl:        (optional) the requested life of any new token in ms. If none\n   *               is specified a default of 1 hour is provided. The maximum lifetime\n   *               is 24hours; any request exceeding that lifetime will be rejected\n   *               with an error.\n   *\n   * - capability: (optional) the capability to associate with the access token.\n   *               If none is specified, a token will be requested with all of the\n   *               capabilities of the specified key.\n   *\n   * - clientId:   (optional) a client ID to associate with the token\n   *\n   * - timestamp:  (optional) the time in ms since the epoch. If none is specified,\n   *               the system will be queried for a time value to use.\n   *\n   * @param callback (err, tokenDetails)\n   */\n  authorize(tokenParams: API.Types.TokenParams | null, callback: Function): void;\n\n  /**\n   * Instructs the library to get a token immediately and ensures Token Auth\n   * is used for all future requests, storing the tokenParams and authOptions\n   * given as the new defaults for subsequent use.\n   *\n   * @param tokenParams\n   * an object containing the parameters for the requested token:\n   *\n   * - ttl:        (optional) the requested life of any new token in ms. If none\n   *               is specified a default of 1 hour is provided. The maximum lifetime\n   *               is 24hours; any request exceeding that lifetime will be rejected\n   *               with an error.\n   *\n   * - capability: (optional) the capability to associate with the access token.\n   *               If none is specified, a token will be requested with all of the\n   *               capabilities of the specified key.\n   *\n   * - clientId:   (optional) a client ID to associate with the token\n   *\n   * - timestamp:  (optional) the time in ms since the epoch. If none is specified,\n   *               the system will be queried for a time value to use.\n   *\n   * @param authOptions\n   * an object containing auth options relevant to token auth:\n   *\n   * - queryTime   (optional) boolean indicating that the Ably system should be\n   *               queried for the current time when none is specified explicitly.\n   *\n   * - tokenDetails: (optional) object: An authenticated TokenDetails object.\n   *\n   * - token:        (optional) string: the `token` property of a tokenDetails object\n   *\n   * - authCallback:  (optional) a JavaScript callback to be called to get auth information.\n   *                  authCallback should be a function of (tokenParams, callback) that calls\n   *                  the callback with (err, result), where result is any of:\n   *                  - a tokenRequest object (ie the result of a rest.auth.createTokenRequest call),\n   *                  - a tokenDetails object (ie the result of a rest.auth.requestToken call),\n   *                  - a token string\n   *\n   * - authUrl:       (optional) a URL to be used to GET or POST a set of token request\n   *                  params, to obtain a signed token request.\n   *\n   * - authHeaders:   (optional) a set of application-specific headers to be added to any request\n   *                  made to the authUrl.\n   *\n   * - authParams:    (optional) a set of application-specific query params to be added to any\n   *                  request made to the authUrl.\n   *\n   *\n   * - requestHeaders (optional, unsupported, for testing only) extra headers to add to the\n   *                  requestToken request\n   *\n   * @param callback (err, tokenDetails)\n   */\n  authorize(\n    tokenParams: API.Types.TokenParams | null,\n    authOptions: API.Types.AuthOptions | null,\n    callback: Function\n  ): void;\n\n  authorize(\n    tokenParams: Record<string, any> | Function | null,\n    authOptions?: API.Types.AuthOptions | null | Function,\n    callback?: Function\n  ): void | Promise<void> {\n    let _authOptions: API.Types.AuthOptions | null;\n    /* shuffle and normalise arguments as necessary */\n    if (typeof tokenParams == 'function' && !callback) {\n      callback = tokenParams;\n      _authOptions = tokenParams = null;\n    } else if (typeof authOptions == 'function' && !callback) {\n      callback = authOptions;\n      _authOptions = null;\n    } else {\n      _authOptions = authOptions as API.Types.AuthOptions;\n    }\n    if (!callback) {\n      return Utils.promisify(this, 'authorize', arguments);\n    }\n\n    /* RSA10a: authorize() call implies token auth. If a key is passed it, we\n     * just check if it doesn't clash and assume we're generating a token from it */\n    if (_authOptions && _authOptions.key && this.authOptions.key !== _authOptions.key) {\n      throw new ErrorInfo('Unable to update auth options with incompatible key', 40102, 401);\n    }\n\n    this._forceNewToken(\n      tokenParams as API.Types.TokenParams,\n      _authOptions,\n      (err: ErrorInfo, tokenDetails: API.Types.TokenDetails) => {\n        if (err) {\n          if (Utils.isRealtime(this.client)) {\n            /* We interpret RSA4d as including requests made by a client lib to\n             * authenticate triggered by an explicit authorize() or an AUTH received from\n             * ably, not just connect-sequence-triggered token fetches */\n            this.client.connection.connectionManager.actOnErrorFromAuthorize(err);\n          }\n          callback?.(err);\n          return;\n        }\n\n        /* RTC8\n         * - When authorize called by an end user and have a realtime connection,\n         * don't call back till new token has taken effect.\n         * - Use this.client.connection as a proxy for (this.client instanceof Realtime),\n         * which doesn't work in node as Realtime isn't part of the vm context for Rest clients */\n        if (Utils.isRealtime(this.client)) {\n          this.client.connection.connectionManager.onAuthUpdated(tokenDetails, callback || noop);\n        } else {\n          callback?.(null, tokenDetails);\n        }\n      }\n    );\n  }\n\n  /* For internal use, eg by connectionManager - useful when want to call back\n   * as soon as we have the new token, rather than waiting for it to take\n   * effect on the connection as #authorize does */\n  _forceNewToken(\n    tokenParams: API.Types.TokenParams | null,\n    authOptions: API.Types.AuthOptions | null,\n    callback: Function\n  ) {\n    /* get rid of current token even if still valid */\n    this.tokenDetails = null;\n\n    /* _save normalises the tokenParams and authOptions and updates the auth\n     * object. All subsequent operations should use the values on `this`,\n     * not the passed in ones. */\n    this._saveTokenOptions(tokenParams, authOptions);\n\n    logAndValidateTokenAuthMethod(this.authOptions);\n\n    this._ensureValidAuthCredentials(true, (err: ErrorInfo | null, tokenDetails?: API.Types.TokenDetails) => {\n      /* RSA10g */\n      delete this.tokenParams.timestamp;\n      delete this.authOptions.queryTime;\n      callback(err, tokenDetails);\n    });\n  }\n\n  /**\n   * Request an access token\n   * @param callback (err, tokenDetails)\n   */\n  requestToken(callback: StandardCallback<API.Types.TokenDetails>): void;\n\n  /**\n   * Request an access token\n   * @param tokenParams\n   * an object containing the parameters for the requested token:\n   * - ttl:          (optional) the requested life of the token in milliseconds. If none is specified\n   *                  a default of 1 hour is provided. The maximum lifetime is 24hours; any request\n   *                  exceeding that lifetime will be rejected with an error.\n   *\n   * - capability:    (optional) the capability to associate with the access token.\n   *                  If none is specified, a token will be requested with all of the\n   *                  capabilities of the specified key.\n   *\n   * - clientId:      (optional) a client ID to associate with the token; if not\n   *                  specified, a clientId passed in constructing the Rest interface will be used\n   *\n   * - timestamp:     (optional) the time in ms since the epoch. If none is specified,\n   *                  the system will be queried for a time value to use.\n   *\n   * @param callback (err, tokenDetails)\n   */\n  requestToken(tokenParams: API.Types.TokenParams | null, callback: StandardCallback<API.Types.TokenDetails>): void;\n\n  /**\n   * Request an access token\n   * @param tokenParams\n   * an object containing the parameters for the requested token:\n   * - ttl:          (optional) the requested life of the token in milliseconds. If none is specified\n   *                  a default of 1 hour is provided. The maximum lifetime is 24hours; any request\n   *                  exceeding that lifetime will be rejected with an error.\n   *\n   * - capability:    (optional) the capability to associate with the access token.\n   *                  If none is specified, a token will be requested with all of the\n   *                  capabilities of the specified key.\n   *\n   * - clientId:      (optional) a client ID to associate with the token; if not\n   *                  specified, a clientId passed in constructing the Rest interface will be used\n   *\n   * - timestamp:     (optional) the time in ms since the epoch. If none is specified,\n   *                  the system will be queried for a time value to use.\n   *\n   * @param authOptions\n   * an object containing the request options:\n   * - key:           the key to use.\n   *\n   * - authCallback:  (optional) a JavaScript callback to be called to get auth information.\n   *                  authCallback should be a function of (tokenParams, callback) that calls\n   *                  the callback with (err, result), where result is any of:\n   *                  - a tokenRequest object (ie the result of a rest.auth.createTokenRequest call),\n   *                  - a tokenDetails object (ie the result of a rest.auth.requestToken call),\n   *                  - a token string\n   *\n   * - authUrl:       (optional) a URL to be used to GET or POST a set of token request\n   *                  params, to obtain a signed token request.\n   *\n   * - authHeaders:   (optional) a set of application-specific headers to be added to any request\n   *                  made to the authUrl.\n   *\n   * - authParams:    (optional) a set of application-specific query params to be added to any\n   *                  request made to the authUrl.\n   *\n   * - queryTime      (optional) boolean indicating that the ably system should be\n   *                  queried for the current time when none is specified explicitly\n   *\n   * - requestHeaders (optional, unsupported, for testing only) extra headers to add to the\n   *                  requestToken request\n   *\n   * @param callback (err, tokenDetails)\n   */\n  requestToken(\n    tokenParams: API.Types.TokenParams | null,\n    authOptions: API.Types.AuthOptions,\n    callback: StandardCallback<API.Types.TokenDetails>\n  ): void;\n\n  requestToken(\n    tokenParams: API.Types.TokenParams | StandardCallback<API.Types.TokenDetails> | null,\n    authOptions?: any | StandardCallback<API.Types.TokenDetails>,\n    callback?: StandardCallback<API.Types.TokenDetails>\n  ): void | Promise<void> {\n    /* shuffle and normalise arguments as necessary */\n    if (typeof tokenParams == 'function' && !callback) {\n      callback = tokenParams;\n      authOptions = tokenParams = null;\n    } else if (typeof authOptions == 'function' && !callback) {\n      callback = authOptions;\n      authOptions = null;\n    }\n    if (!callback) {\n      return Utils.promisify(this, 'requestToken', arguments);\n    }\n\n    /* RSA8e: if authOptions passed in, they're used instead of stored, don't merge them */\n    authOptions = authOptions || this.authOptions;\n    tokenParams = tokenParams || Utils.copy(this.tokenParams);\n    const _callback = callback || noop;\n\n    /* first set up whatever callback will be used to get signed\n     * token requests */\n    let tokenRequestCallback,\n      client = this.client;\n\n    if (authOptions.authCallback) {\n      Logger.logAction(Logger.LOG_MINOR, 'Auth.requestToken()', 'using token auth with authCallback');\n      tokenRequestCallback = authOptions.authCallback;\n    } else if (authOptions.authUrl) {\n      Logger.logAction(Logger.LOG_MINOR, 'Auth.requestToken()', 'using token auth with authUrl');\n      tokenRequestCallback = (params: Record<string, unknown>, cb: Function) => {\n        const authHeaders = Utils.mixin({ accept: 'application/json, text/plain' }, authOptions.authHeaders) as Record<\n          string,\n          string\n        >;\n        const usePost = authOptions.authMethod && authOptions.authMethod.toLowerCase() === 'post';\n        let providedQsParams;\n        /* Combine authParams with any qs params given in the authUrl */\n        const queryIdx = authOptions.authUrl.indexOf('?');\n        if (queryIdx > -1) {\n          providedQsParams = Utils.parseQueryString(authOptions.authUrl.slice(queryIdx));\n          authOptions.authUrl = authOptions.authUrl.slice(0, queryIdx);\n          if (!usePost) {\n            /* In case of conflict, authParams take precedence over qs params in the authUrl */\n            authOptions.authParams = Utils.mixin(providedQsParams, authOptions.authParams);\n          }\n        }\n        /* RSA8c2 */\n        const authParams = Utils.mixin({}, authOptions.authParams || {}, params) as RequestParams;\n        const authUrlRequestCallback = function (\n          err: ErrorInfo,\n          body: string,\n          headers: Record<string, string>,\n          unpacked: any\n        ) {\n          let contentType;\n          if (err) {\n            Logger.logAction(\n              Logger.LOG_MICRO,\n              'Auth.requestToken().tokenRequestCallback',\n              'Received Error: ' + Utils.inspectError(err)\n            );\n          } else {\n            contentType = headers['content-type'];\n            Logger.logAction(\n              Logger.LOG_MICRO,\n              'Auth.requestToken().tokenRequestCallback',\n              'Received; content-type: ' + contentType + '; body: ' + Utils.inspectBody(body)\n            );\n          }\n          if (err || unpacked) return cb(err, body);\n          if (Platform.BufferUtils.isBuffer(body)) body = body.toString();\n          if (!contentType) {\n            cb(new ErrorInfo('authUrl response is missing a content-type header', 40170, 401));\n            return;\n          }\n          const json = contentType.indexOf('application/json') > -1,\n            text = contentType.indexOf('text/plain') > -1 || contentType.indexOf('application/jwt') > -1;\n          if (!json && !text) {\n            cb(\n              new ErrorInfo(\n                'authUrl responded with unacceptable content-type ' +\n                  contentType +\n                  ', should be either text/plain, application/jwt or application/json',\n                40170,\n                401\n              )\n            );\n            return;\n          }\n          if (json) {\n            if (body.length > MAX_TOKEN_LENGTH) {\n              cb(new ErrorInfo('authUrl response exceeded max permitted length', 40170, 401));\n              return;\n            }\n            try {\n              body = JSON.parse(body);\n            } catch (e) {\n              cb(\n                new ErrorInfo('Unexpected error processing authURL response; err = ' + (e as Error).message, 40170, 401)\n              );\n              return;\n            }\n          }\n          cb(null, body, contentType);\n        };\n        Logger.logAction(\n          Logger.LOG_MICRO,\n          'Auth.requestToken().tokenRequestCallback',\n          'Requesting token from ' +\n            authOptions.authUrl +\n            '; Params: ' +\n            JSON.stringify(authParams) +\n            '; method: ' +\n            (usePost ? 'POST' : 'GET')\n        );\n        if (usePost) {\n          /* send body form-encoded */\n          const headers = authHeaders || {};\n          headers['content-type'] = 'application/x-www-form-urlencoded';\n          const body = Utils.toQueryString(authParams).slice(1); /* slice is to remove the initial '?' */\n          this.client.http.doUri(\n            HttpMethods.Post,\n            client,\n            authOptions.authUrl,\n            headers,\n            body,\n            providedQsParams as Record<string, string>,\n            authUrlRequestCallback as RequestCallback\n          );\n        } else {\n          this.client.http.doUri(\n            HttpMethods.Get,\n            client,\n            authOptions.authUrl,\n            authHeaders || {},\n            null,\n            authParams,\n            authUrlRequestCallback as RequestCallback\n          );\n        }\n      };\n    } else if (authOptions.key) {\n      Logger.logAction(Logger.LOG_MINOR, 'Auth.requestToken()', 'using token auth with client-side signing');\n      tokenRequestCallback = (params: any, cb: Function) => {\n        this.createTokenRequest(params, authOptions, cb);\n      };\n    } else {\n      const msg =\n        'Need a new token, but authOptions does not include any way to request one (no authUrl, authCallback, or key)';\n      Logger.logAction(\n        Logger.LOG_ERROR,\n        'Auth()',\n        'library initialized with a token literal without any way to renew the token when it expires (no authUrl, authCallback, or key). See https://help.ably.io/error/40171 for help'\n      );\n      _callback(new ErrorInfo(msg, 40171, 403));\n      return;\n    }\n\n    /* normalise token params */\n    if ('capability' in (tokenParams as Record<string, any>))\n      (tokenParams as Record<string, any>).capability = c14n((tokenParams as Record<string, any>).capability);\n\n    const tokenRequest = (signedTokenParams: Record<string, any>, tokenCb: Function) => {\n      const keyName = signedTokenParams.keyName,\n        path = '/keys/' + keyName + '/requestToken',\n        tokenUri = function (host: string) {\n          return client.baseUri(host) + path;\n        };\n\n      const requestHeaders = Defaults.defaultPostHeaders(this.client.options);\n      if (authOptions.requestHeaders) Utils.mixin(requestHeaders, authOptions.requestHeaders);\n      Logger.logAction(\n        Logger.LOG_MICRO,\n        'Auth.requestToken().requestToken',\n        'Sending POST to ' + path + '; Token params: ' + JSON.stringify(signedTokenParams)\n      );\n      this.client.http.do(\n        HttpMethods.Post,\n        client,\n        tokenUri,\n        requestHeaders,\n        JSON.stringify(signedTokenParams),\n        null,\n        tokenCb as RequestCallback\n      );\n    };\n\n    let tokenRequestCallbackTimeoutExpired = false,\n      timeoutLength = this.client.options.timeouts.realtimeRequestTimeout,\n      tokenRequestCallbackTimeout = setTimeout(function () {\n        tokenRequestCallbackTimeoutExpired = true;\n        const msg = 'Token request callback timed out after ' + timeoutLength / 1000 + ' seconds';\n        Logger.logAction(Logger.LOG_ERROR, 'Auth.requestToken()', msg);\n        _callback(new ErrorInfo(msg, 40170, 401));\n      }, timeoutLength);\n\n    tokenRequestCallback(tokenParams, function (err: ErrorInfo, tokenRequestOrDetails: any, contentType: string) {\n      if (tokenRequestCallbackTimeoutExpired) return;\n      clearTimeout(tokenRequestCallbackTimeout);\n\n      if (err) {\n        Logger.logAction(\n          Logger.LOG_ERROR,\n          'Auth.requestToken()',\n          'token request signing call returned error; err = ' + Utils.inspectError(err)\n        );\n        _callback(normaliseAuthcallbackError(err));\n        return;\n      }\n      /* the response from the callback might be a token string, a signed request or a token details */\n      if (typeof tokenRequestOrDetails === 'string') {\n        if (tokenRequestOrDetails.length === 0) {\n          _callback(new ErrorInfo('Token string is empty', 40170, 401));\n        } else if (tokenRequestOrDetails.length > MAX_TOKEN_LENGTH) {\n          _callback(\n            new ErrorInfo(\n              'Token string exceeded max permitted length (was ' + tokenRequestOrDetails.length + ' bytes)',\n              40170,\n              401\n            )\n          );\n        } else if (tokenRequestOrDetails === 'undefined' || tokenRequestOrDetails === 'null') {\n          /* common failure mode with poorly-implemented authCallbacks */\n          _callback(new ErrorInfo('Token string was literal null/undefined', 40170, 401));\n        } else if (tokenRequestOrDetails[0] === '{' && !(contentType && contentType.indexOf('application/jwt') > -1)) {\n          _callback(\n            new ErrorInfo(\n              \"Token was double-encoded; make sure you're not JSON-encoding an already encoded token request or details\",\n              40170,\n              401\n            )\n          );\n        } else {\n          _callback(null, { token: tokenRequestOrDetails } as API.Types.TokenDetails);\n        }\n        return;\n      }\n      if (typeof tokenRequestOrDetails !== 'object') {\n        const msg =\n          'Expected token request callback to call back with a token string or token request/details object, but got a ' +\n          typeof tokenRequestOrDetails;\n        Logger.logAction(Logger.LOG_ERROR, 'Auth.requestToken()', msg);\n        _callback(new ErrorInfo(msg, 40170, 401));\n        return;\n      }\n      const objectSize = JSON.stringify(tokenRequestOrDetails).length;\n      if (objectSize > MAX_TOKEN_LENGTH && !authOptions.suppressMaxLengthCheck) {\n        _callback(\n          new ErrorInfo(\n            'Token request/details object exceeded max permitted stringified size (was ' + objectSize + ' bytes)',\n            40170,\n            401\n          )\n        );\n        return;\n      }\n      if ('issued' in tokenRequestOrDetails) {\n        /* a tokenDetails object */\n        _callback(null, tokenRequestOrDetails);\n        return;\n      }\n      if (!('keyName' in tokenRequestOrDetails)) {\n        const msg =\n          'Expected token request callback to call back with a token string, token request object, or token details object';\n        Logger.logAction(Logger.LOG_ERROR, 'Auth.requestToken()', msg);\n        _callback(new ErrorInfo(msg, 40170, 401));\n        return;\n      }\n      /* it's a token request, so make the request */\n      tokenRequest(\n        tokenRequestOrDetails,\n        function (\n          err?: ErrorInfo | ErrnoException | null,\n          tokenResponse?: API.Types.TokenDetails | string,\n          headers?: Record<string, string>,\n          unpacked?: boolean\n        ) {\n          if (err) {\n            Logger.logAction(\n              Logger.LOG_ERROR,\n              'Auth.requestToken()',\n              'token request API call returned error; err = ' + Utils.inspectError(err)\n            );\n            _callback(normaliseAuthcallbackError(err));\n            return;\n          }\n          if (!unpacked) tokenResponse = JSON.parse(tokenResponse as string);\n          Logger.logAction(Logger.LOG_MINOR, 'Auth.getToken()', 'token received');\n          _callback(null, tokenResponse as API.Types.TokenDetails);\n        }\n      );\n    });\n  }\n\n  /**\n   * Create and sign a token request based on the given options.\n   * NOTE this can only be used when the key value is available locally.\n   * Otherwise, signed token requests must be obtained from the key\n   * owner (either using the token request callback or url).\n   *\n   * @param authOptions\n   * an object containing the request options:\n   * - key:           the key to use. If not specified, a key passed in constructing\n   *                  the Rest interface will be used\n   *\n   * - queryTime      (optional) boolean indicating that the ably system should be\n   *                  queried for the current time when none is specified explicitly\n   *\n   * - requestHeaders (optional, unsupported, for testing only) extra headers to add to the\n   *                  requestToken request\n   *\n   * @param tokenParams\n   * an object containing the parameters for the requested token:\n   * - ttl:       (optional) the requested life of the token in ms. If none is specified\n   *                  a default of 1 hour is provided. The maximum lifetime is 24hours; any request\n   *                  exceeding that lifetime will be rejected with an error.\n   *\n   * - capability:    (optional) the capability to associate with the access token.\n   *                  If none is specified, a token will be requested with all of the\n   *                  capabilities of the specified key.\n   *\n   * - clientId:      (optional) a client ID to associate with the token; if not\n   *                  specified, a clientId passed in constructing the Rest interface will be used\n   *\n   * - timestamp:     (optional) the time in ms since the epoch. If none is specified,\n   *                  the system will be queried for a time value to use.\n   *\n   * @param callback\n   */\n  createTokenRequest(tokenParams: API.Types.TokenParams | null, authOptions: any, callback: Function) {\n    /* shuffle and normalise arguments as necessary */\n    if (typeof tokenParams == 'function' && !callback) {\n      callback = tokenParams;\n      authOptions = tokenParams = null;\n    } else if (typeof authOptions == 'function' && !callback) {\n      callback = authOptions;\n      authOptions = null;\n    }\n    if (!callback) {\n      return Utils.promisify(this, 'createTokenRequest', arguments);\n    }\n\n    /* RSA9h: if authOptions passed in, they're used instead of stored, don't merge them */\n    authOptions = authOptions || this.authOptions;\n    tokenParams = tokenParams || Utils.copy<API.Types.TokenParams>(this.tokenParams);\n\n    const key = authOptions.key;\n    if (!key) {\n      callback(new ErrorInfo('No key specified', 40101, 403));\n      return;\n    }\n    const keyParts = key.split(':'),\n      keyName = keyParts[0],\n      keySecret = keyParts[1];\n\n    if (!keySecret) {\n      callback(new ErrorInfo('Invalid key specified', 40101, 403));\n      return;\n    }\n\n    if (tokenParams.clientId === '') {\n      callback(new ErrorInfo('clientId can\u2019t be an empty string', 40012, 400));\n      return;\n    }\n\n    if ('capability' in tokenParams) {\n      tokenParams.capability = c14n(tokenParams.capability);\n    }\n\n    const request = Utils.mixin({ keyName: keyName }, tokenParams),\n      clientId = tokenParams.clientId || '',\n      ttl = tokenParams.ttl || '',\n      capability = tokenParams.capability || '';\n\n    ((authoriseCb) => {\n      if (request.timestamp) {\n        authoriseCb();\n        return;\n      }\n      this.getTimestamp(authOptions && authOptions.queryTime, function (err?: ErrorInfo | null, time?: number) {\n        if (err) {\n          callback(err);\n          return;\n        }\n        request.timestamp = time;\n        authoriseCb();\n      });\n    })(function () {\n      /* nonce */\n      /* NOTE: there is no expectation that the client\n       * specifies the nonce; this is done by the library\n       * However, this can be overridden by the client\n       * simply for testing purposes. */\n      const nonce = request.nonce || (request.nonce = random()),\n        timestamp = request.timestamp;\n\n      const signText =\n        request.keyName + '\\n' + ttl + '\\n' + capability + '\\n' + clientId + '\\n' + timestamp + '\\n' + nonce + '\\n';\n\n      /* mac */\n      /* NOTE: there is no expectation that the client\n       * specifies the mac; this is done by the library\n       * However, this can be overridden by the client\n       * simply for testing purposes. */\n      request.mac = request.mac || hmac(signText, keySecret);\n\n      Logger.logAction(Logger.LOG_MINOR, 'Auth.getTokenRequest()', 'generated signed request');\n      callback(null, request);\n    });\n  }\n\n  /**\n   * Get the auth query params to use for a websocket connection,\n   * based on the current auth parameters\n   */\n  getAuthParams(callback: Function) {\n    if (this.method == 'basic') callback(null, { key: this.key });\n    else\n      this._ensureValidAuthCredentials(false, function (err: ErrorInfo | null, tokenDetails?: API.Types.TokenDetails) {\n        if (err) {\n          callback(err);\n          return;\n        }\n        if (!tokenDetails) {\n          throw new Error('Auth.getAuthParams(): _ensureValidAuthCredentials returned no error or tokenDetails');\n        }\n        callback(null, { access_token: tokenDetails.token });\n      });\n  }\n\n  /**\n   * Get the authorization header to use for a REST or comet request,\n   * based on the current auth parameters\n   */\n  getAuthHeaders(callback: Function) {\n    if (this.method == 'basic') {\n      callback(null, { authorization: 'Basic ' + this.basicKey });\n    } else {\n      this._ensureValidAuthCredentials(false, function (err: ErrorInfo | null, tokenDetails?: API.Types.TokenDetails) {\n        if (err) {\n          callback(err);\n          return;\n        }\n        if (!tokenDetails) {\n          throw new Error('Auth.getAuthParams(): _ensureValidAuthCredentials returned no error or tokenDetails');\n        }\n        callback(null, { authorization: 'Bearer ' + Utils.toBase64(tokenDetails.token) });\n      });\n    }\n  }\n\n  /**\n   * Get the current time based on the local clock,\n   * or if the option queryTime is true, return the server time.\n   * The server time offset from the local time is stored so that\n   * only one request to the server to get the time is ever needed\n   */\n  getTimestamp(queryTime: boolean, callback: StandardCallback<number>): void {\n    if (!this.isTimeOffsetSet() && (queryTime || this.authOptions.queryTime)) {\n      this.client.time(callback);\n    } else {\n      callback(null, this.getTimestampUsingOffset());\n    }\n  }\n\n  getTimestampUsingOffset() {\n    return Utils.now() + (this.client.serverTimeOffset || 0);\n  }\n\n  isTimeOffsetSet() {\n    return this.client.serverTimeOffset !== null;\n  }\n\n  _saveBasicOptions(authOptions: API.Types.AuthOptions) {\n    this.method = 'basic';\n    this.key = authOptions.key;\n    this.basicKey = Utils.toBase64(authOptions.key as string);\n    this.authOptions = authOptions || {};\n    if ('clientId' in authOptions) {\n      this._userSetClientId(authOptions.clientId);\n    }\n  }\n\n  _saveTokenOptions(tokenParams: API.Types.TokenParams | null, authOptions: API.Types.AuthOptions | null) {\n    this.method = 'token';\n\n    if (tokenParams) {\n      /* We temporarily persist tokenParams.timestamp in case a new token needs\n       * to be requested, then null it out in the callback of\n       * _ensureValidAuthCredentials for RSA10g compliance */\n      this.tokenParams = tokenParams;\n    }\n\n    if (authOptions) {\n      /* normalise */\n      if (authOptions.token) {\n        /* options.token may contain a token string or, for convenience, a TokenDetails */\n        authOptions.tokenDetails =\n          typeof authOptions.token === 'string'\n            ? ({ token: authOptions.token } as API.Types.TokenDetails)\n            : authOptions.token;\n      }\n\n      if (authOptions.tokenDetails) {\n        this.tokenDetails = authOptions.tokenDetails;\n      }\n\n      if ('clientId' in authOptions) {\n        this._userSetClientId(authOptions.clientId);\n      }\n\n      this.authOptions = authOptions;\n    }\n  }\n\n  /* @param forceSupersede: force a new token request even if there's one in\n   * progress, making all pending callbacks wait for the new one */\n  _ensureValidAuthCredentials(\n    forceSupersede: boolean,\n    callback: (err: ErrorInfo | null, token?: API.Types.TokenDetails) => void\n  ) {\n    const token = this.tokenDetails;\n\n    if (token) {\n      if (this._tokenClientIdMismatch(token.clientId)) {\n        /* 403 to trigger a permanently failed client - RSA15c */\n        callback(\n          new ErrorInfo(\n            'Mismatch between clientId in token (' + token.clientId + ') and current clientId (' + this.clientId + ')',\n            40102,\n            403\n          )\n        );\n        return;\n      }\n      /* RSA4b1 -- if we have a server time offset set already, we can\n       * automatically remove expired tokens. Else just use the cached token. If it is\n       * expired Ably will tell us and we'll discard it then. */\n      if (!this.isTimeOffsetSet() || !token.expires || token.expires >= this.getTimestampUsingOffset()) {\n        Logger.logAction(Logger.LOG_MINOR, 'Auth.getToken()', 'using cached token; expires = ' + token.expires);\n        callback(null, token);\n        return;\n      }\n      /* expired, so remove and fallthrough to getting a new one */\n      Logger.logAction(Logger.LOG_MINOR, 'Auth.getToken()', 'deleting expired token');\n      this.tokenDetails = null;\n    }\n\n    (this.waitingForTokenRequest || (this.waitingForTokenRequest = Multicaster.create())).push(callback);\n    if (this.currentTokenRequestId !== null && !forceSupersede) {\n      return;\n    }\n\n    /* Request a new token */\n    const tokenRequestId = (this.currentTokenRequestId = getTokenRequestId());\n    this.requestToken(this.tokenParams, this.authOptions, (err: Function, tokenResponse?: API.Types.TokenDetails) => {\n      if ((this.currentTokenRequestId as number) > tokenRequestId) {\n        Logger.logAction(\n          Logger.LOG_MINOR,\n          'Auth._ensureValidAuthCredentials()',\n          'Discarding token request response; overtaken by newer one'\n        );\n        return;\n      }\n      this.currentTokenRequestId = null;\n      const callbacks = this.waitingForTokenRequest || noop;\n      this.waitingForTokenRequest = null;\n      if (err) {\n        callbacks(err);\n        return;\n      }\n      callbacks(null, (this.tokenDetails = tokenResponse));\n    });\n  }\n\n  /* User-set: check types, '*' is disallowed, throw any errors */\n  _userSetClientId(clientId: string | undefined) {\n    if (!(typeof clientId === 'string' || clientId === null)) {\n      throw new ErrorInfo('clientId must be either a string or null', 40012, 400);\n    } else if (clientId === '*') {\n      throw new ErrorInfo(\n        'Can\u2019t use \"*\" as a clientId as that string is reserved. (To change the default token request behaviour to use a wildcard clientId, instantiate the library with {defaultTokenParams: {clientId: \"*\"}}), or if calling authorize(), pass it in as a tokenParam: authorize({clientId: \"*\"}, authOptions)',\n        40012,\n        400\n      );\n    } else {\n      const err = this._uncheckedSetClientId(clientId);\n      if (err) throw err;\n    }\n  }\n\n  /* Ably-set: no typechecking, '*' is allowed but not set on this.clientId), return errors to the caller */\n  _uncheckedSetClientId(clientId: string | undefined) {\n    if (this._tokenClientIdMismatch(clientId)) {\n      /* Should never happen in normal circumstances as realtime should\n       * recognise mismatch and return an error */\n      const msg = 'Unexpected clientId mismatch: client has ' + this.clientId + ', requested ' + clientId;\n      const err = new ErrorInfo(msg, 40102, 401);\n      Logger.logAction(Logger.LOG_ERROR, 'Auth._uncheckedSetClientId()', msg);\n      return err;\n    } else {\n      /* RSA7a4: if options.clientId is provided and is not\n       * null, it overrides defaultTokenParams.clientId */\n      this.clientId = this.tokenParams.clientId = clientId;\n      return null;\n    }\n  }\n\n  _tokenClientIdMismatch(tokenClientId?: string | null): boolean {\n    return !!(\n      this.clientId &&\n      this.clientId !== '*' &&\n      tokenClientId &&\n      tokenClientId !== '*' &&\n      this.clientId !== tokenClientId\n    );\n  }\n\n  static isTokenErr(error: IPartialErrorInfo) {\n    return error.code && error.code >= 40140 && error.code < 40150;\n  }\n}\n\nexport default Auth;\n", "import Logger, { LoggerOptions } from '../util/logger';\nimport Defaults from '../util/defaults';\nimport Auth from './auth';\nimport ErrorInfo from '../types/errorinfo';\nimport Stats from '../types/stats';\nimport { StandardCallback } from '../../types/utils';\nimport { IHttp, RequestParams } from '../../types/http';\nimport ClientOptions, { NormalisedClientOptions } from '../../types/ClientOptions';\n\nimport Platform from '../../platform';\nimport Rest from './rest';\nimport { HttpPaginatedResponse, PaginatedResult } from './paginatedresource';\n\ninterface ModulesMap {\n  Rest?: typeof Rest;\n}\n\nclass BaseClient {\n  options: NormalisedClientOptions;\n  baseUri: (host: string) => string;\n  authority: (host: string) => string;\n  _currentFallback: null | {\n    host: string;\n    validUntil: number;\n  };\n  serverTimeOffset: number | null;\n  http: IHttp;\n  auth: Auth;\n  _rest?: Rest;\n\n  constructor(options: ClientOptions | string, modules: ModulesMap) {\n    if (!options) {\n      const msg = 'no options provided';\n      Logger.logAction(Logger.LOG_ERROR, 'Rest()', msg);\n      throw new Error(msg);\n    }\n    const optionsObj = Defaults.objectifyOptions(options);\n\n    Logger.setLog(optionsObj.logLevel, optionsObj.logHandler);\n    Logger.logAction(Logger.LOG_MICRO, 'Rest()', 'initialized with clientOptions ' + Platform.Config.inspect(options));\n\n    const normalOptions = (this.options = Defaults.normaliseOptions(optionsObj));\n\n    /* process options */\n    if (normalOptions.key) {\n      const keyMatch = normalOptions.key.match(/^([^:\\s]+):([^:.\\s]+)$/);\n      if (!keyMatch) {\n        const msg = 'invalid key parameter';\n        Logger.logAction(Logger.LOG_ERROR, 'Rest()', msg);\n        throw new ErrorInfo(msg, 40400, 404);\n      }\n      normalOptions.keyName = keyMatch[1];\n      normalOptions.keySecret = keyMatch[2];\n    }\n\n    if ('clientId' in normalOptions) {\n      if (!(typeof normalOptions.clientId === 'string' || normalOptions.clientId === null))\n        throw new ErrorInfo('clientId must be either a string or null', 40012, 400);\n      else if (normalOptions.clientId === '*')\n        throw new ErrorInfo(\n          'Can\u2019t use \"*\" as a clientId as that string is reserved. (To change the default token request behaviour to use a wildcard clientId, use {defaultTokenParams: {clientId: \"*\"}})',\n          40012,\n          400\n        );\n    }\n\n    Logger.logAction(Logger.LOG_MINOR, 'Rest()', 'started; version = ' + Defaults.version);\n\n    this.baseUri = this.authority = function (host) {\n      return Defaults.getHttpScheme(normalOptions) + host + ':' + Defaults.getPort(normalOptions, false);\n    };\n    this._currentFallback = null;\n\n    this.serverTimeOffset = null;\n    this.http = new Platform.Http(normalOptions);\n    this.auth = new Auth(this, normalOptions);\n\n    if (modules?.Rest) {\n      this._rest = new modules.Rest(this);\n    }\n  }\n\n  private get rest(): Rest {\n    if (!this._rest) {\n      throw new ErrorInfo('Rest module not provided', 400, 40000);\n    }\n    return this._rest;\n  }\n\n  get channels() {\n    return this.rest.channels;\n  }\n\n  get push() {\n    return this.rest.push;\n  }\n\n  stats(\n    params: RequestParams,\n    callback: StandardCallback<PaginatedResult<Stats>>\n  ): Promise<PaginatedResult<Stats>> | void {\n    return this.rest.stats(params, callback);\n  }\n\n  time(params?: RequestParams | StandardCallback<number>, callback?: StandardCallback<number>): Promise<number> | void {\n    return this.rest.time(params, callback);\n  }\n\n  request(\n    method: string,\n    path: string,\n    version: number,\n    params: RequestParams,\n    body: unknown,\n    customHeaders: Record<string, string>,\n    callback: StandardCallback<HttpPaginatedResponse<unknown>>\n  ): Promise<HttpPaginatedResponse<unknown>> | void {\n    return this.rest.request(method, path, version, params, body, customHeaders, callback);\n  }\n\n  setLog(logOptions: LoggerOptions): void {\n    Logger.setLog(logOptions.level, logOptions.handler);\n  }\n\n  static Platform = Platform;\n}\n\nexport { BaseClient };\n", "import * as Utils from '../util/utils';\nimport ErrorInfo, { IConvertibleToErrorInfo } from './errorinfo';\n\nenum DeviceFormFactor {\n  Phone = 'phone',\n  Tablet = 'tablet',\n  Desktop = 'desktop',\n  TV = 'tv',\n  Watch = 'watch',\n  Car = 'car',\n  Embedded = 'embedded',\n  Other = 'other',\n}\n\nenum DevicePlatform {\n  Android = 'android',\n  IOS = 'ios',\n  Browser = 'browser',\n}\n\ntype DevicePushState = 'ACTIVE' | 'FAILING' | 'FAILED';\n\ntype DevicePushDetails = {\n  error?: ErrorInfo;\n  recipient?: string;\n  state?: DevicePushState;\n  metadata?: string;\n};\n\nclass DeviceDetails {\n  id?: string;\n  clientId?: string;\n  deviceSecret?: string;\n  formFactor?: DeviceFormFactor;\n  platform?: DevicePlatform;\n  push?: DevicePushDetails;\n  metadata?: string;\n  deviceIdentityToken?: string;\n\n  toJSON(): DeviceDetails {\n    return {\n      id: this.id,\n      deviceSecret: this.deviceSecret,\n      platform: this.platform,\n      formFactor: this.formFactor,\n      clientId: this.clientId,\n      metadata: this.metadata,\n      deviceIdentityToken: this.deviceIdentityToken,\n      push: {\n        recipient: this.push?.recipient,\n        state: this.push?.state,\n        error: this.push?.error,\n      },\n    } as DeviceDetails;\n  }\n\n  toString(): string {\n    let result = '[DeviceDetails';\n    if (this.id) result += '; id=' + this.id;\n    if (this.platform) result += '; platform=' + this.platform;\n    if (this.formFactor) result += '; formFactor=' + this.formFactor;\n    if (this.clientId) result += '; clientId=' + this.clientId;\n    if (this.metadata) result += '; metadata=' + this.metadata;\n    if (this.deviceIdentityToken) result += '; deviceIdentityToken=' + JSON.stringify(this.deviceIdentityToken);\n    if (this.push?.recipient) result += '; push.recipient=' + JSON.stringify(this.push.recipient);\n    if (this.push?.state) result += '; push.state=' + this.push.state;\n    if (this.push?.error) result += '; push.error=' + JSON.stringify(this.push.error);\n    if (this.push?.metadata) result += '; push.metadata=' + this.push.metadata;\n    result += ']';\n    return result;\n  }\n\n  static toRequestBody = Utils.encodeBody;\n\n  static fromResponseBody(\n    body: Array<Record<string, unknown>> | Record<string, unknown>,\n    format?: Utils.Format\n  ): DeviceDetails | DeviceDetails[] {\n    if (format) {\n      body = Utils.decodeBody(body, format);\n    }\n\n    if (Utils.isArray(body)) {\n      return DeviceDetails.fromValuesArray(body);\n    } else {\n      return DeviceDetails.fromValues(body);\n    }\n  }\n\n  static fromValues(values: Record<string, unknown>): DeviceDetails {\n    values.error = values.error && ErrorInfo.fromValues(values.error as IConvertibleToErrorInfo);\n    return Object.assign(new DeviceDetails(), values);\n  }\n\n  static fromValuesArray(values: Array<Record<string, unknown>>): DeviceDetails[] {\n    const count = values.length,\n      result = new Array(count);\n    for (let i = 0; i < count; i++) result[i] = DeviceDetails.fromValues(values[i]);\n    return result;\n  }\n}\n\nexport default DeviceDetails;\n", "import Platform from '../../platform';\nimport * as Utils from '../util/utils';\nimport Logger from '../util/logger';\nimport Auth from './auth';\nimport HttpMethods from '../../constants/HttpMethods';\nimport ErrorInfo, { IPartialErrorInfo, PartialErrorInfo } from '../types/errorinfo';\nimport { ErrnoException } from '../../types/http';\nimport { BaseClient } from './baseclient';\n\nfunction withAuthDetails(\n  client: BaseClient,\n  headers: Record<string, string>,\n  params: Record<string, any>,\n  errCallback: Function,\n  opCallback: Function\n) {\n  if (client.http.supportsAuthHeaders) {\n    client.auth.getAuthHeaders(function (err: Error, authHeaders: Record<string, string>) {\n      if (err) errCallback(err);\n      else opCallback(Utils.mixin(authHeaders, headers), params);\n    });\n  } else {\n    client.auth.getAuthParams(function (err: Error, authParams: Record<string, string>) {\n      if (err) errCallback(err);\n      else opCallback(headers, Utils.mixin(authParams, params));\n    });\n  }\n}\n\nfunction unenvelope<T>(callback: ResourceCallback<T>, format: Utils.Format | null): ResourceCallback<T> {\n  return (err, body, outerHeaders, unpacked, outerStatusCode) => {\n    if (err && !body) {\n      callback(err);\n      return;\n    }\n\n    if (!unpacked) {\n      try {\n        body = Utils.decodeBody(body, format);\n      } catch (e) {\n        if (Utils.isErrorInfoOrPartialErrorInfo(e)) {\n          callback(e);\n        } else {\n          callback(new PartialErrorInfo(Utils.inspectError(e), null));\n        }\n        return;\n      }\n    }\n\n    if (!body) {\n      callback(new PartialErrorInfo('unenvelope(): Response body is missing', null));\n      return;\n    }\n\n    const { statusCode: wrappedStatusCode, response, headers: wrappedHeaders } = body as Record<string, any>;\n\n    if (wrappedStatusCode === undefined) {\n      /* Envelope already unwrapped by the transport */\n      callback(err, body, outerHeaders, true, outerStatusCode);\n      return;\n    }\n\n    if (wrappedStatusCode < 200 || wrappedStatusCode >= 300) {\n      /* handle wrapped errors */\n      let wrappedErr = (response && response.error) || err;\n      if (!wrappedErr) {\n        wrappedErr = new Error('Error in unenveloping ' + body);\n        wrappedErr.statusCode = wrappedStatusCode;\n      }\n      callback(wrappedErr, response, wrappedHeaders, true, wrappedStatusCode);\n      return;\n    }\n\n    callback(err, response, wrappedHeaders, true, wrappedStatusCode);\n  };\n}\n\nfunction paramString(params: Record<string, any>) {\n  const paramPairs = [];\n  if (params) {\n    for (const needle in params) {\n      paramPairs.push(needle + '=' + params[needle]);\n    }\n  }\n  return paramPairs.join('&');\n}\n\nfunction urlFromPathAndParams(path: string, params: Record<string, any>) {\n  return path + (params ? '?' : '') + paramString(params);\n}\n\nfunction logResponseHandler<T>(\n  callback: ResourceCallback<T>,\n  method: HttpMethods,\n  path: string,\n  params: Record<string, string>\n): ResourceCallback {\n  return (err, body, headers, unpacked, statusCode) => {\n    if (err) {\n      Logger.logAction(\n        Logger.LOG_MICRO,\n        'Resource.' + method + '()',\n        'Received Error; ' + urlFromPathAndParams(path, params) + '; Error: ' + Utils.inspectError(err)\n      );\n    } else {\n      Logger.logAction(\n        Logger.LOG_MICRO,\n        'Resource.' + method + '()',\n        'Received; ' +\n          urlFromPathAndParams(path, params) +\n          '; Headers: ' +\n          paramString(headers as Record<string, any>) +\n          '; StatusCode: ' +\n          statusCode +\n          '; Body: ' +\n          (Platform.BufferUtils.isBuffer(body) ? body.toString() : body)\n      );\n    }\n    if (callback) {\n      callback(err, body as T, headers, unpacked, statusCode);\n    }\n  };\n}\n\nexport type ResourceCallback<T = unknown> = (\n  err: IPartialErrorInfo | null,\n  body?: T,\n  headers?: Record<string, string>,\n  unpacked?: boolean,\n  statusCode?: number\n) => void;\n\nclass Resource {\n  static get<T = unknown>(\n    client: BaseClient,\n    path: string,\n    headers: Record<string, string>,\n    params: Record<string, any>,\n    envelope: Utils.Format | null,\n    callback: ResourceCallback<T>\n  ): void {\n    Resource.do(HttpMethods.Get, client, path, null, headers, params, envelope, callback);\n  }\n\n  static delete(\n    client: BaseClient,\n    path: string,\n    headers: Record<string, string>,\n    params: Record<string, any>,\n    envelope: Utils.Format | null,\n    callback: ResourceCallback\n  ): void {\n    Resource.do(HttpMethods.Delete, client, path, null, headers, params, envelope, callback);\n  }\n\n  static post(\n    client: BaseClient,\n    path: string,\n    body: unknown,\n    headers: Record<string, string>,\n    params: Record<string, any>,\n    envelope: Utils.Format | null,\n    callback: ResourceCallback\n  ): void {\n    Resource.do(HttpMethods.Post, client, path, body, headers, params, envelope, callback);\n  }\n\n  static patch(\n    client: BaseClient,\n    path: string,\n    body: unknown,\n    headers: Record<string, string>,\n    params: Record<string, any>,\n    envelope: Utils.Format | null,\n    callback: ResourceCallback\n  ): void {\n    Resource.do(HttpMethods.Patch, client, path, body, headers, params, envelope, callback);\n  }\n\n  static put(\n    client: BaseClient,\n    path: string,\n    body: unknown,\n    headers: Record<string, string>,\n    params: Record<string, any>,\n    envelope: Utils.Format | null,\n    callback: ResourceCallback\n  ): void {\n    Resource.do(HttpMethods.Put, client, path, body, headers, params, envelope, callback);\n  }\n\n  static do<T>(\n    method: HttpMethods,\n    client: BaseClient,\n    path: string,\n    body: unknown,\n    headers: Record<string, string>,\n    params: Record<string, any>,\n    envelope: Utils.Format | null,\n    callback: ResourceCallback<T>\n  ): void {\n    if (Logger.shouldLog(Logger.LOG_MICRO)) {\n      callback = logResponseHandler(callback, method, path, params);\n    }\n\n    if (envelope) {\n      callback = callback && unenvelope(callback, envelope);\n      (params = params || {})['envelope'] = envelope;\n    }\n\n    function doRequest(this: any, headers: Record<string, string>, params: Record<string, any>) {\n      if (Logger.shouldLog(Logger.LOG_MICRO)) {\n        Logger.logAction(\n          Logger.LOG_MICRO,\n          'Resource.' + method + '()',\n          'Sending; ' + urlFromPathAndParams(path, params)\n        );\n      }\n\n      if (Logger.shouldLog(Logger.LOG_MICRO)) {\n        let decodedBody = body;\n        if (headers['content-type']?.indexOf('msgpack') > 0) {\n          try {\n            decodedBody = Platform.Config.msgpack.decode(body as Buffer);\n          } catch (decodeErr) {\n            Logger.logAction(\n              Logger.LOG_MICRO,\n              'Resource.' + method + '()',\n              'Sending MsgPack Decoding Error: ' + Utils.inspectError(decodeErr)\n            );\n          }\n        }\n        Logger.logAction(\n          Logger.LOG_MICRO,\n          'Resource.' + method + '()',\n          'Sending; ' + urlFromPathAndParams(path, params) + '; Body: ' + decodedBody\n        );\n      }\n\n      client.http.do(\n        method,\n        client,\n        path,\n        headers,\n        body,\n        params,\n        function (\n          err: ErrorInfo | ErrnoException | null | undefined,\n          res: any,\n          headers: Record<string, string>,\n          unpacked?: boolean,\n          statusCode?: number\n        ) {\n          if (err && Auth.isTokenErr(err as ErrorInfo)) {\n            /* token has expired, so get a new one */\n            client.auth.authorize(null, null, function (err: ErrorInfo) {\n              if (err) {\n                callback(err);\n                return;\n              }\n              /* retry ... */\n              withAuthDetails(client, headers, params, callback, doRequest);\n            });\n            return;\n          }\n          callback(err as ErrorInfo, res, headers, unpacked, statusCode);\n        }\n      );\n    }\n\n    withAuthDetails(client, headers, params, callback, doRequest);\n  }\n}\n\nexport default Resource;\n", "import * as Utils from '../util/utils';\nimport Logger from '../util/logger';\nimport Resource from './resource';\nimport ErrorInfo, { IPartialErrorInfo } from '../types/errorinfo';\nimport { PaginatedResultCallback } from '../../types/utils';\nimport { BaseClient } from './baseclient';\n\nexport type BodyHandler = (body: unknown, headers: Record<string, string>, packed?: boolean) => Promise<any>;\n\nfunction getRelParams(linkUrl: string) {\n  const urlMatch = linkUrl.match(/^\\.\\/(\\w+)\\?(.*)$/);\n  return urlMatch && urlMatch[2] && Utils.parseQueryString(urlMatch[2]);\n}\n\nfunction parseRelLinks(linkHeader: string | Array<string>) {\n  if (typeof linkHeader == 'string') linkHeader = linkHeader.split(',');\n\n  const relParams: Record<string, Record<string, string>> = {};\n  for (let i = 0; i < linkHeader.length; i++) {\n    const linkMatch = linkHeader[i].match(/^\\s*<(.+)>;\\s*rel=\"(\\w+)\"$/);\n    if (linkMatch) {\n      const params = getRelParams(linkMatch[1]);\n      if (params) relParams[linkMatch[2]] = params;\n    }\n  }\n  return relParams;\n}\n\nfunction returnErrOnly(err: IPartialErrorInfo, body: unknown, useHPR?: boolean) {\n  /* If using httpPaginatedResponse, errors from Ably are returned as part of\n   * the HPR, only do callback(err) for network errors etc. which don't\n   * return a body and/or have no ably-originated error code (non-numeric\n   * error codes originate from node) */\n  return !(useHPR && (body || typeof err.code === 'number'));\n}\n\nclass PaginatedResource {\n  client: BaseClient;\n  path: string;\n  headers: Record<string, string>;\n  envelope: Utils.Format | null;\n  bodyHandler: BodyHandler;\n  useHttpPaginatedResponse: boolean;\n\n  constructor(\n    client: BaseClient,\n    path: string,\n    headers: Record<string, string>,\n    envelope: Utils.Format | undefined,\n    bodyHandler: BodyHandler,\n    useHttpPaginatedResponse?: boolean\n  ) {\n    this.client = client;\n    this.path = path;\n    this.headers = headers;\n    this.envelope = envelope ?? null;\n    this.bodyHandler = bodyHandler;\n    this.useHttpPaginatedResponse = useHttpPaginatedResponse || false;\n  }\n\n  get<T1, T2>(params: Record<string, T2>, callback: PaginatedResultCallback<T1>): void {\n    Resource.get(\n      this.client,\n      this.path,\n      this.headers,\n      params,\n      this.envelope,\n      (err, body, headers, unpacked, statusCode) => {\n        this.handlePage(err, body, headers, unpacked, statusCode, callback);\n      }\n    );\n  }\n\n  delete<T1, T2>(params: Record<string, T2>, callback: PaginatedResultCallback<T1>): void {\n    Resource.delete(\n      this.client,\n      this.path,\n      this.headers,\n      params,\n      this.envelope,\n      (err, body, headers, unpacked, statusCode) => {\n        this.handlePage(err, body, headers, unpacked, statusCode, callback);\n      }\n    );\n  }\n\n  post<T1, T2>(params: Record<string, T2>, body: unknown, callback: PaginatedResultCallback<T1>): void {\n    Resource.post(\n      this.client,\n      this.path,\n      body,\n      this.headers,\n      params,\n      this.envelope,\n      (err, responseBody, headers, unpacked, statusCode) => {\n        if (callback) {\n          this.handlePage(err, responseBody, headers, unpacked, statusCode, callback);\n        }\n      }\n    );\n  }\n\n  put<T1, T2>(params: Record<string, T2>, body: unknown, callback: PaginatedResultCallback<T1>): void {\n    Resource.put(\n      this.client,\n      this.path,\n      body,\n      this.headers,\n      params,\n      this.envelope,\n      (err, responseBody, headers, unpacked, statusCode) => {\n        if (callback) {\n          this.handlePage(err, responseBody, headers, unpacked, statusCode, callback);\n        }\n      }\n    );\n  }\n\n  patch<T1, T2>(params: Record<string, T2>, body: unknown, callback: PaginatedResultCallback<T1>): void {\n    Resource.patch(\n      this.client,\n      this.path,\n      body,\n      this.headers,\n      params,\n      this.envelope,\n      (err, responseBody, headers, unpacked, statusCode) => {\n        if (callback) {\n          this.handlePage(err, responseBody, headers, unpacked, statusCode, callback);\n        }\n      }\n    );\n  }\n\n  handlePage<T>(\n    err: IPartialErrorInfo | null,\n    body: unknown,\n    headers: Record<string, string> | undefined,\n    unpacked: boolean | undefined,\n    statusCode: number | undefined,\n    callback: PaginatedResultCallback<T>\n  ): void {\n    if (err && returnErrOnly(err, body, this.useHttpPaginatedResponse)) {\n      Logger.logAction(\n        Logger.LOG_ERROR,\n        'PaginatedResource.handlePage()',\n        'Unexpected error getting resource: err = ' + Utils.inspectError(err)\n      );\n      callback?.(err);\n      return;\n    }\n\n    const handleBody = async () => {\n      let items, linkHeader, relParams;\n\n      try {\n        items = await this.bodyHandler(body, headers || {}, unpacked);\n      } catch (e) {\n        /* If we got an error, the failure to parse the body is almost certainly\n         * due to that, so throw that in preference over the parse error */\n        throw err || e;\n      }\n\n      if (headers && (linkHeader = headers['Link'] || headers['link'])) {\n        relParams = parseRelLinks(linkHeader);\n      }\n\n      if (this.useHttpPaginatedResponse) {\n        return new HttpPaginatedResponse(this, items, headers || {}, statusCode as number, relParams, err);\n      } else {\n        return new PaginatedResult(this, items, relParams);\n      }\n    };\n\n    handleBody()\n      .then((result) => callback(null, result))\n      .catch((err) => callback(err, null));\n  }\n}\n\nexport class PaginatedResult<T> {\n  resource: PaginatedResource;\n  items: T[];\n  first?: (results: PaginatedResultCallback<T>) => void;\n  next?: (results: PaginatedResultCallback<T>) => void;\n  current?: (results: PaginatedResultCallback<T>) => void;\n  hasNext?: () => boolean;\n  isLast?: () => boolean;\n\n  constructor(resource: PaginatedResource, items: T[], relParams?: Record<string, any>) {\n    this.resource = resource;\n    this.items = items;\n\n    const self = this;\n    if (relParams) {\n      if ('first' in relParams) {\n        this.first = function (callback: (result?: ErrorInfo | null) => void) {\n          if (!callback) {\n            return Utils.promisify(self, 'first', []);\n          }\n          self.get(relParams.first, callback);\n        };\n      }\n      if ('current' in relParams) {\n        this.current = function (callback: (results?: ErrorInfo | null) => void) {\n          if (!callback) {\n            return Utils.promisify(self, 'current', []);\n          }\n          self.get(relParams.current, callback);\n        };\n      }\n      this.next = function (callback: (results?: ErrorInfo | null) => void) {\n        if (!callback) {\n          return Utils.promisify(self, 'next', []);\n        }\n        if ('next' in relParams) {\n          self.get(relParams.next, callback);\n        } else {\n          callback(null);\n        }\n      };\n\n      this.hasNext = function () {\n        return 'next' in relParams;\n      };\n      this.isLast = () => {\n        return !this.hasNext?.();\n      };\n    }\n  }\n\n  /* We assume that only the initial request can be a POST, and that accessing\n   * the rest of a multipage set of results can always be done with GET */\n  get(params: any, callback: PaginatedResultCallback<T>): void {\n    const res = this.resource;\n    Resource.get(\n      res.client,\n      res.path,\n      res.headers,\n      params,\n      res.envelope,\n      function (err, body, headers, unpacked, statusCode) {\n        res.handlePage(err, body, headers, unpacked, statusCode, callback);\n      }\n    );\n  }\n}\n\nexport class HttpPaginatedResponse<T> extends PaginatedResult<T> {\n  statusCode: number;\n  success: boolean;\n  headers: Record<string, string>;\n  errorCode?: number | null;\n  errorMessage?: string | null;\n\n  constructor(\n    resource: PaginatedResource,\n    items: T[],\n    headers: Record<string, string>,\n    statusCode: number,\n    relParams: any,\n    err: IPartialErrorInfo | null\n  ) {\n    super(resource, items, relParams);\n    this.statusCode = statusCode;\n    this.success = statusCode < 300 && statusCode >= 200;\n    this.headers = headers;\n    this.errorCode = err && err.code;\n    this.errorMessage = err && err.message;\n  }\n\n  toJSON() {\n    return {\n      items: this.items,\n      statusCode: this.statusCode,\n      success: this.success,\n      headers: this.headers,\n      errorCode: this.errorCode,\n      errorMessage: this.errorMessage,\n    };\n  }\n}\n\nexport default PaginatedResource;\n", "import * as Utils from '../util/utils';\n\ntype PushChannelSubscriptionObject = {\n  channel?: string;\n  deviceId?: string;\n  clientId?: string;\n};\n\nclass PushChannelSubscription {\n  channel?: string;\n  deviceId?: string;\n  clientId?: string;\n\n  /**\n   * Overload toJSON() to intercept JSON.stringify()\n   * @return {*}\n   */\n  toJSON(): PushChannelSubscriptionObject {\n    return {\n      channel: this.channel,\n      deviceId: this.deviceId,\n      clientId: this.clientId,\n    };\n  }\n\n  toString(): string {\n    let result = '[PushChannelSubscription';\n    if (this.channel) result += '; channel=' + this.channel;\n    if (this.deviceId) result += '; deviceId=' + this.deviceId;\n    if (this.clientId) result += '; clientId=' + this.clientId;\n    result += ']';\n    return result;\n  }\n\n  static toRequestBody = Utils.encodeBody;\n\n  static fromResponseBody(\n    body: Array<Record<string, unknown>> | Record<string, unknown>,\n    format?: Utils.Format\n  ): PushChannelSubscription | PushChannelSubscription[] {\n    if (format) {\n      body = Utils.decodeBody(body, format) as Record<string, unknown>;\n    }\n\n    if (Utils.isArray(body)) {\n      return PushChannelSubscription.fromValuesArray(body);\n    } else {\n      return PushChannelSubscription.fromValues(body);\n    }\n  }\n\n  static fromValues(values: Record<string, unknown>): PushChannelSubscription {\n    return Object.assign(new PushChannelSubscription(), values);\n  }\n\n  static fromValuesArray(values: Array<Record<string, unknown>>): PushChannelSubscription[] {\n    const count = values.length,\n      result = new Array(count);\n    for (let i = 0; i < count; i++) result[i] = PushChannelSubscription.fromValues(values[i]);\n    return result;\n  }\n}\n\nexport default PushChannelSubscription;\n", "import * as Utils from '../util/utils';\nimport DeviceDetails from '../types/devicedetails';\nimport Resource from './resource';\nimport PaginatedResource from './paginatedresource';\nimport ErrorInfo from '../types/errorinfo';\nimport PushChannelSubscription from '../types/pushchannelsubscription';\nimport { ErrCallback, PaginatedResultCallback, StandardCallback } from '../../types/utils';\nimport Rest from './rest';\nimport Defaults from '../util/defaults';\n\nclass Push {\n  rest: Rest;\n  admin: Admin;\n\n  constructor(rest: Rest) {\n    this.rest = rest;\n    this.admin = new Admin(rest);\n  }\n}\n\nclass Admin {\n  rest: Rest;\n  deviceRegistrations: DeviceRegistrations;\n  channelSubscriptions: ChannelSubscriptions;\n\n  constructor(rest: Rest) {\n    this.rest = rest;\n    this.deviceRegistrations = new DeviceRegistrations(rest);\n    this.channelSubscriptions = new ChannelSubscriptions(rest);\n  }\n\n  publish(recipient: any, payload: any, callback: ErrCallback) {\n    const rest = this.rest;\n    const format = rest.options.useBinaryProtocol ? Utils.Format.msgpack : Utils.Format.json,\n      headers = Defaults.defaultPostHeaders(rest.options, { format }),\n      params = {};\n    const body = Utils.mixin({ recipient: recipient }, payload);\n\n    if (typeof callback !== 'function') {\n      return Utils.promisify(this, 'publish', arguments);\n    }\n\n    Utils.mixin(headers, rest.options.headers);\n\n    if (rest.options.pushFullWait) Utils.mixin(params, { fullWait: 'true' });\n\n    const requestBody = Utils.encodeBody(body, format);\n    Resource.post(rest.client, '/push/publish', requestBody, headers, params, null, (err) => callback(err));\n  }\n}\n\nclass DeviceRegistrations {\n  rest: Rest;\n\n  constructor(rest: Rest) {\n    this.rest = rest;\n  }\n\n  save(device: any, callback: StandardCallback<DeviceDetails>) {\n    const rest = this.rest;\n    const body = DeviceDetails.fromValues(device);\n    const format = rest.options.useBinaryProtocol ? Utils.Format.msgpack : Utils.Format.json,\n      headers = Defaults.defaultPostHeaders(rest.options, { format }),\n      params = {};\n\n    if (typeof callback !== 'function') {\n      return Utils.promisify(this, 'save', arguments);\n    }\n\n    Utils.mixin(headers, rest.options.headers);\n\n    if (rest.options.pushFullWait) Utils.mixin(params, { fullWait: 'true' });\n\n    const requestBody = Utils.encodeBody(body, format);\n    Resource.put(\n      rest.client,\n      '/push/deviceRegistrations/' + encodeURIComponent(device.id),\n      requestBody,\n      headers,\n      params,\n      null,\n      (err, body, headers, unpacked) => {\n        callback(\n          err,\n          !err\n            ? (DeviceDetails.fromResponseBody(\n                body as Record<string, unknown>,\n                unpacked ? undefined : format\n              ) as DeviceDetails)\n            : undefined\n        );\n      }\n    );\n  }\n\n  get(deviceIdOrDetails: any, callback: StandardCallback<DeviceDetails>) {\n    const rest = this.rest,\n      format = rest.options.useBinaryProtocol ? Utils.Format.msgpack : Utils.Format.json,\n      headers = Defaults.defaultGetHeaders(rest.options, { format }),\n      deviceId = deviceIdOrDetails.id || deviceIdOrDetails;\n\n    if (typeof callback !== 'function') {\n      return Utils.promisify(this, 'get', arguments);\n    }\n\n    if (typeof deviceId !== 'string' || !deviceId.length) {\n      callback(\n        new ErrorInfo(\n          'First argument to DeviceRegistrations#get must be a deviceId string or DeviceDetails',\n          40000,\n          400\n        )\n      );\n      return;\n    }\n\n    Utils.mixin(headers, rest.options.headers);\n\n    Resource.get(\n      rest.client,\n      '/push/deviceRegistrations/' + encodeURIComponent(deviceId),\n      headers,\n      {},\n      null,\n      function (err, body, headers, unpacked) {\n        callback(\n          err,\n          !err\n            ? (DeviceDetails.fromResponseBody(\n                body as Record<string, unknown>,\n                unpacked ? undefined : format\n              ) as DeviceDetails)\n            : undefined\n        );\n      }\n    );\n  }\n\n  list(params: any, callback: PaginatedResultCallback<unknown>) {\n    const rest = this.rest,\n      format = rest.options.useBinaryProtocol ? Utils.Format.msgpack : Utils.Format.json,\n      envelope = this.rest.http.supportsLinkHeaders ? undefined : format,\n      headers = Defaults.defaultGetHeaders(rest.options, { format });\n\n    if (typeof callback !== 'function') {\n      return Utils.promisify(this, 'list', arguments);\n    }\n\n    Utils.mixin(headers, rest.options.headers);\n\n    new PaginatedResource(rest.client, '/push/deviceRegistrations', headers, envelope, async function (\n      body: any,\n      headers: Record<string, string>,\n      unpacked?: boolean\n    ) {\n      return DeviceDetails.fromResponseBody(body, unpacked ? undefined : format);\n    }).get(params, callback);\n  }\n\n  remove(deviceIdOrDetails: any, callback: ErrCallback) {\n    const rest = this.rest,\n      format = rest.options.useBinaryProtocol ? Utils.Format.msgpack : Utils.Format.json,\n      headers = Defaults.defaultGetHeaders(rest.options, { format }),\n      params = {},\n      deviceId = deviceIdOrDetails.id || deviceIdOrDetails;\n\n    if (typeof callback !== 'function') {\n      return Utils.promisify(this, 'remove', arguments);\n    }\n\n    if (typeof deviceId !== 'string' || !deviceId.length) {\n      callback(\n        new ErrorInfo(\n          'First argument to DeviceRegistrations#remove must be a deviceId string or DeviceDetails',\n          40000,\n          400\n        )\n      );\n      return;\n    }\n\n    Utils.mixin(headers, rest.options.headers);\n\n    if (rest.options.pushFullWait) Utils.mixin(params, { fullWait: 'true' });\n\n    Resource['delete'](\n      rest.client,\n      '/push/deviceRegistrations/' + encodeURIComponent(deviceId),\n      headers,\n      params,\n      null,\n      (err) => callback(err)\n    );\n  }\n\n  removeWhere(params: any, callback: ErrCallback) {\n    const rest = this.rest,\n      format = rest.options.useBinaryProtocol ? Utils.Format.msgpack : Utils.Format.json,\n      headers = Defaults.defaultGetHeaders(rest.options, { format });\n\n    if (typeof callback !== 'function') {\n      return Utils.promisify(this, 'removeWhere', arguments);\n    }\n\n    Utils.mixin(headers, rest.options.headers);\n\n    if (rest.options.pushFullWait) Utils.mixin(params, { fullWait: 'true' });\n\n    Resource['delete'](rest.client, '/push/deviceRegistrations', headers, params, null, (err) => callback(err));\n  }\n}\n\nclass ChannelSubscriptions {\n  rest: Rest;\n\n  constructor(rest: Rest) {\n    this.rest = rest;\n  }\n\n  save(subscription: Record<string, unknown>, callback: PaginatedResultCallback<unknown>) {\n    const rest = this.rest;\n    const body = PushChannelSubscription.fromValues(subscription);\n    const format = rest.options.useBinaryProtocol ? Utils.Format.msgpack : Utils.Format.json,\n      headers = Defaults.defaultPostHeaders(rest.options, { format }),\n      params = {};\n\n    if (typeof callback !== 'function') {\n      return Utils.promisify(this, 'save', arguments);\n    }\n\n    Utils.mixin(headers, rest.options.headers);\n\n    if (rest.options.pushFullWait) Utils.mixin(params, { fullWait: 'true' });\n\n    const requestBody = Utils.encodeBody(body, format);\n    Resource.post(\n      rest.client,\n      '/push/channelSubscriptions',\n      requestBody,\n      headers,\n      params,\n      null,\n      function (err, body, headers, unpacked) {\n        callback(\n          err,\n          !err && PushChannelSubscription.fromResponseBody(body as Record<string, any>, unpacked ? undefined : format)\n        );\n      }\n    );\n  }\n\n  list(params: any, callback: PaginatedResultCallback<unknown>) {\n    const rest = this.rest,\n      format = rest.options.useBinaryProtocol ? Utils.Format.msgpack : Utils.Format.json,\n      envelope = this.rest.http.supportsLinkHeaders ? undefined : format,\n      headers = Defaults.defaultGetHeaders(rest.options, { format });\n\n    if (typeof callback !== 'function') {\n      return Utils.promisify(this, 'list', arguments);\n    }\n\n    Utils.mixin(headers, rest.options.headers);\n\n    new PaginatedResource(rest.client, '/push/channelSubscriptions', headers, envelope, async function (\n      body: any,\n      headers: Record<string, string>,\n      unpacked?: boolean\n    ) {\n      return PushChannelSubscription.fromResponseBody(body, unpacked ? undefined : format);\n    }).get(params, callback);\n  }\n\n  removeWhere(params: any, callback: PaginatedResultCallback<unknown>) {\n    const rest = this.rest,\n      format = rest.options.useBinaryProtocol ? Utils.Format.msgpack : Utils.Format.json,\n      headers = Defaults.defaultGetHeaders(rest.options, { format });\n\n    if (typeof callback !== 'function') {\n      return Utils.promisify(this, 'removeWhere', arguments);\n    }\n\n    Utils.mixin(headers, rest.options.headers);\n\n    if (rest.options.pushFullWait) Utils.mixin(params, { fullWait: 'true' });\n\n    Resource['delete'](rest.client, '/push/channelSubscriptions', headers, params, null, (err) => callback(err));\n  }\n\n  /* ChannelSubscriptions have no unique id; removing one is equivalent to removeWhere by its properties */\n  remove = ChannelSubscriptions.prototype.removeWhere;\n\n  listChannels(params: any, callback: PaginatedResultCallback<unknown>) {\n    const rest = this.rest,\n      format = rest.options.useBinaryProtocol ? Utils.Format.msgpack : Utils.Format.json,\n      envelope = this.rest.http.supportsLinkHeaders ? undefined : format,\n      headers = Defaults.defaultGetHeaders(rest.options, { format });\n\n    if (typeof callback !== 'function') {\n      return Utils.promisify(this, 'listChannels', arguments);\n    }\n\n    Utils.mixin(headers, rest.options.headers);\n\n    if (rest.options.pushFullWait) Utils.mixin(params, { fullWait: 'true' });\n\n    new PaginatedResource(rest.client, '/push/channels', headers, envelope, async function (\n      body: unknown,\n      headers: Record<string, string>,\n      unpacked?: boolean\n    ) {\n      const parsedBody = (!unpacked && format ? Utils.decodeBody(body, format) : body) as Array<string>;\n\n      for (let i = 0; i < parsedBody.length; i++) {\n        parsedBody[i] = String(parsedBody[i]);\n      }\n      return parsedBody;\n    }).get(params, callback);\n  }\n}\n\nexport default Push;\n", "import * as Utils from './utils';\nimport Logger from './logger';\nimport Platform from 'common/platform';\n\n/* Call the listener, catch any exceptions and log, but continue operation*/\nfunction callListener(eventThis: { event: string }, listener: Function, args: unknown[]) {\n  try {\n    listener.apply(eventThis, args);\n  } catch (e) {\n    Logger.logAction(\n      Logger.LOG_ERROR,\n      'EventEmitter.emit()',\n      'Unexpected listener exception: ' + e + '; stack = ' + (e && (e as Error).stack)\n    );\n  }\n}\n\n/**\n * Remove listeners that match listener\n * @param targetListeners is an array of listener arrays or event objects with arrays of listeners\n * @param listener the listener callback to remove\n * @param eventFilter (optional) event name instructing the function to only remove listeners for the specified event\n */\nfunction removeListener(targetListeners: any, listener: Function, eventFilter?: string) {\n  let listeners: Record<string, unknown>;\n  let index;\n  let eventName;\n\n  for (let targetListenersIndex = 0; targetListenersIndex < targetListeners.length; targetListenersIndex++) {\n    listeners = targetListeners[targetListenersIndex];\n    if (eventFilter) {\n      listeners = listeners[eventFilter] as Record<string, unknown>;\n    }\n\n    if (Utils.isArray(listeners)) {\n      while ((index = Utils.arrIndexOf(listeners, listener)) !== -1) {\n        listeners.splice(index, 1);\n      }\n      /* If events object has an event name key with no listeners then\n\t\t\t\t\tremove the key to stop the list growing indefinitely */\n      if (eventFilter && listeners.length === 0) {\n        delete targetListeners[targetListenersIndex][eventFilter];\n      }\n    } else if (Utils.isObject(listeners)) {\n      /* events */\n      for (eventName in listeners) {\n        if (Object.prototype.hasOwnProperty.call(listeners, eventName) && Utils.isArray(listeners[eventName])) {\n          removeListener([listeners], listener, eventName);\n        }\n      }\n    }\n  }\n}\n\nclass EventEmitter {\n  any: Array<Function>;\n  events: Record<string, Array<Function>>;\n  anyOnce: Array<Function>;\n  eventsOnce: Record<string, Array<Function>>;\n\n  constructor() {\n    this.any = [];\n    this.events = Object.create(null);\n    this.anyOnce = [];\n    this.eventsOnce = Object.create(null);\n  }\n\n  /**\n   * Add an event listener\n   * @param listener the listener to be called\n   */\n  on(listener: Function): void;\n\n  /**\n   * Add an event listener\n   * @param event (optional) the name of the event to listen to\n   * @param listener the listener to be called\n   */\n  on(event: null | string | string[], listener: Function): void;\n\n  on(...args: unknown[]) {\n    if (args.length === 1) {\n      const listener = args[0];\n      if (typeof listener === 'function') {\n        this.any.push(listener);\n      } else {\n        throw new Error('EventListener.on(): Invalid arguments: ' + Platform.Config.inspect(args));\n      }\n    }\n    if (args.length === 2) {\n      const [event, listener] = args;\n      if (typeof listener !== 'function') {\n        throw new Error('EventListener.on(): Invalid arguments: ' + Platform.Config.inspect(args));\n      }\n      if (Utils.isEmptyArg(event)) {\n        this.any.push(listener);\n      } else if (Utils.isArray(event)) {\n        event.forEach((eventName) => {\n          this.on(eventName, listener);\n        });\n      } else {\n        if (typeof event !== 'string') {\n          throw new Error('EventListener.on(): Invalid arguments: ' + Platform.Config.inspect(args));\n        }\n        const listeners = this.events[event] || (this.events[event] = []);\n        listeners.push(listener);\n      }\n    }\n  }\n\n  /**\n   * Remove one or more event listeners\n   * @param listener (optional) the listener to remove. If not\n   *        supplied, all listeners are removed.\n   */\n  off(listener?: Function): void;\n\n  /**\n   * Remove one or more event listeners\n   * @param event (optional) the name of the event whose listener\n   *        is to be removed. If not supplied, the listener is\n   *        treated as an 'any' listener\n   * @param listener (optional) the listener to remove. If not\n   *        supplied, all listeners are removed.\n   */\n  off(event: string | string[] | null, listener?: Function | null): void;\n\n  off(...args: unknown[]) {\n    if (args.length == 0 || (Utils.isEmptyArg(args[0]) && Utils.isEmptyArg(args[1]))) {\n      this.any = [];\n      this.events = Object.create(null);\n      this.anyOnce = [];\n      this.eventsOnce = Object.create(null);\n      return;\n    }\n    const [firstArg, secondArg] = args;\n    let listener: Function | null = null;\n    let event: unknown = null;\n    if (args.length === 1 || !secondArg) {\n      if (typeof firstArg === 'function') {\n        /* we take this to be the listener and treat the event as \"any\" .. */\n        listener = firstArg;\n      } else {\n        event = firstArg;\n      }\n      /* ... or we take event to be the actual event name and listener to be all */\n    } else {\n      if (typeof secondArg !== 'function') {\n        throw new Error('EventEmitter.off(): invalid arguments:' + Platform.Config.inspect(args));\n      }\n      [event, listener] = [firstArg, secondArg];\n    }\n\n    if (listener && Utils.isEmptyArg(event)) {\n      removeListener([this.any, this.events, this.anyOnce, this.eventsOnce], listener);\n      return;\n    }\n\n    if (Utils.isArray(event)) {\n      event.forEach((eventName) => {\n        this.off(eventName, listener);\n      });\n      return;\n    }\n\n    /* \"normal\" case where event is an actual event */\n    if (typeof event !== 'string') {\n      throw new Error('EventEmitter.off(): invalid arguments:' + Platform.Config.inspect(args));\n    }\n    if (listener) {\n      removeListener([this.events, this.eventsOnce], listener, event);\n    } else {\n      delete this.events[event];\n      delete this.eventsOnce[event];\n    }\n  }\n\n  /**\n   * Get the array of listeners for a given event; excludes once events\n   * @param event (optional) the name of the event, or none for 'any'\n   * @return array of events, or null if none\n   */\n  listeners(event: string) {\n    if (event) {\n      const listeners = this.events[event] || [];\n      if (this.eventsOnce[event]) Array.prototype.push.apply(listeners, this.eventsOnce[event]);\n      return listeners.length ? listeners : null;\n    }\n    return this.any.length ? this.any : null;\n  }\n\n  /**\n   * Emit an event\n   * @param event the event name\n   * @param args the arguments to pass to the listener\n   */\n  emit(event: string, ...args: unknown[] /* , args... */) {\n    const eventThis = { event };\n    const listeners: Function[] = [];\n\n    if (this.anyOnce.length) {\n      Array.prototype.push.apply(listeners, this.anyOnce);\n      this.anyOnce = [];\n    }\n    if (this.any.length) {\n      Array.prototype.push.apply(listeners, this.any);\n    }\n    const eventsOnceListeners = this.eventsOnce[event];\n    if (eventsOnceListeners) {\n      Array.prototype.push.apply(listeners, eventsOnceListeners);\n      delete this.eventsOnce[event];\n    }\n    const eventsListeners = this.events[event];\n    if (eventsListeners) {\n      Array.prototype.push.apply(listeners, eventsListeners);\n    }\n\n    Utils.arrForEach(listeners, function (listener) {\n      callListener(eventThis, listener, args);\n    });\n  }\n\n  /**\n   * Listen for a single occurrence of an event\n   * @param event the name of the event to listen to\n   */\n  once(event: string): Promise<void>;\n\n  /**\n   * Listen for a single occurrence of any event\n   * @param listener the listener to be called\n   */\n  once(listener: Function): void;\n\n  /**\n   * Listen for a single occurrence of an event\n   * @param event the name of the event to listen to\n   * @param listener the listener to be called\n   */\n  once(event?: string | string[] | null, listener?: Function): void;\n\n  once(...args: unknown[]): void | Promise<void> {\n    const argCount = args.length;\n    if (argCount === 0 || (argCount === 1 && typeof args[0] !== 'function')) {\n      const event = args[0];\n      return new Promise((resolve) => {\n        this.once(event as string | string[] | null, resolve);\n      });\n    }\n\n    const [firstArg, secondArg] = args;\n    if (args.length === 1 && typeof firstArg === 'function') {\n      this.anyOnce.push(firstArg);\n    } else if (Utils.isEmptyArg(firstArg)) {\n      if (typeof secondArg !== 'function') {\n        throw new Error('EventEmitter.once(): Invalid arguments:' + Platform.Config.inspect(args));\n      }\n      this.anyOnce.push(secondArg);\n    } else if (Utils.isArray(firstArg)) {\n      const self = this;\n      const listenerWrapper = function (this: any) {\n        const innerArgs = Array.prototype.slice.call(arguments);\n        Utils.arrForEach(firstArg, function (eventName) {\n          self.off(eventName, listenerWrapper);\n        });\n        if (typeof secondArg !== 'function') {\n          throw new Error('EventEmitter.once(): Invalid arguments:' + Platform.Config.inspect(args));\n        }\n        secondArg.apply(this, innerArgs);\n      };\n      Utils.arrForEach(firstArg, function (eventName) {\n        self.on(eventName, listenerWrapper);\n      });\n    } else {\n      if (typeof firstArg !== 'string') {\n        throw new Error('EventEmitter.once(): Invalid arguments:' + Platform.Config.inspect(args));\n      }\n      const listeners = this.eventsOnce[firstArg] || (this.eventsOnce[firstArg] = []);\n      if (secondArg) {\n        if (typeof secondArg !== 'function') {\n          throw new Error('EventEmitter.once(): Invalid arguments:' + Platform.Config.inspect(args));\n        }\n        listeners.push(secondArg);\n      }\n    }\n  }\n\n  /**\n   * Private API\n   *\n   * Listen for a single occurrence of a state event and fire immediately if currentState matches targetState\n   * @param targetState the name of the state event to listen to\n   * @param currentState the name of the current state of this object\n   * @param listener the listener to be called\n   * @param listenerArgs\n   */\n  whenState(targetState: string, currentState: string, listener: Function, ...listenerArgs: unknown[]) {\n    const eventThis = { event: targetState };\n\n    if (typeof targetState !== 'string' || typeof currentState !== 'string') {\n      throw 'whenState requires a valid event String argument';\n    }\n    if (typeof listener !== 'function') {\n      return new Promise((resolve) => {\n        EventEmitter.prototype.whenState.apply(\n          this,\n          [targetState, currentState, resolve].concat(listenerArgs as any[]) as any\n        );\n      });\n    }\n    if (targetState === currentState) {\n      callListener(eventThis, listener, listenerArgs);\n    } else {\n      this.once(targetState, listener);\n    }\n  }\n}\n\nexport default EventEmitter;\n", "import * as Utils from '../util/utils';\nimport EventEmitter from '../util/eventemitter';\nimport Logger from '../util/logger';\nimport PaginatedResource, { PaginatedResult } from './paginatedresource';\nimport PresenceMessage from '../types/presencemessage';\nimport { CipherOptions } from '../types/message';\nimport { PaginatedResultCallback } from '../../types/utils';\nimport Channel from './channel';\nimport RealtimeChannel from './realtimechannel';\nimport Defaults from '../util/defaults';\n\nclass Presence extends EventEmitter {\n  channel: RealtimeChannel | Channel;\n  basePath: string;\n\n  constructor(channel: RealtimeChannel | Channel) {\n    super();\n    this.channel = channel;\n    this.basePath = channel.basePath + '/presence';\n  }\n\n  get(params: any, callback: PaginatedResultCallback<PresenceMessage>): void | Promise<PresenceMessage> {\n    Logger.logAction(Logger.LOG_MICRO, 'Presence.get()', 'channel = ' + this.channel.name);\n    /* params and callback are optional; see if params contains the callback */\n    if (callback === undefined) {\n      if (typeof params == 'function') {\n        callback = params;\n        params = null;\n      } else {\n        return Utils.promisify(this, 'get', arguments);\n      }\n    }\n    const client = this.channel.client,\n      format = client.options.useBinaryProtocol ? Utils.Format.msgpack : Utils.Format.json,\n      envelope = this.channel.client.http.supportsLinkHeaders ? undefined : format,\n      headers = Defaults.defaultGetHeaders(client.options, { format });\n\n    Utils.mixin(headers, client.options.headers);\n\n    const options = this.channel.channelOptions;\n    new PaginatedResource(client, this.basePath, headers, envelope, async function (\n      body: any,\n      headers: Record<string, string>,\n      unpacked?: boolean\n    ) {\n      return await PresenceMessage.fromResponseBody(body, options as CipherOptions, unpacked ? undefined : format);\n    }).get(params, callback);\n  }\n\n  history(\n    params: any,\n    callback: PaginatedResultCallback<PresenceMessage>\n  ): void | Promise<PaginatedResult<PresenceMessage>> {\n    Logger.logAction(Logger.LOG_MICRO, 'Presence.history()', 'channel = ' + this.channel.name);\n    return this._history(params, callback);\n  }\n\n  _history(\n    params: any,\n    callback: PaginatedResultCallback<PresenceMessage>\n  ): void | Promise<PaginatedResult<PresenceMessage>> {\n    /* params and callback are optional; see if params contains the callback */\n    if (callback === undefined) {\n      if (typeof params == 'function') {\n        callback = params;\n        params = null;\n      } else {\n        return Utils.promisify(this, '_history', [params]);\n      }\n    }\n\n    const rest = this.channel.client,\n      format = rest.options.useBinaryProtocol ? Utils.Format.msgpack : Utils.Format.json,\n      envelope = this.channel.client.http.supportsLinkHeaders ? undefined : format,\n      headers = Defaults.defaultGetHeaders(rest.options, { format });\n\n    Utils.mixin(headers, rest.options.headers);\n\n    const options = this.channel.channelOptions;\n    new PaginatedResource(rest, this.basePath + '/history', headers, envelope, async function (\n      body: any,\n      headers: Record<string, string>,\n      unpacked?: boolean\n    ) {\n      return await PresenceMessage.fromResponseBody(body, options as CipherOptions, unpacked ? undefined : format);\n    }).get(params, callback);\n  }\n}\n\nexport default Presence;\n", "import * as Utils from '../util/utils';\nimport EventEmitter from '../util/eventemitter';\nimport Logger from '../util/logger';\nimport Presence from './presence';\nimport Message, { CipherOptions } from '../types/message';\nimport ErrorInfo from '../types/errorinfo';\nimport PaginatedResource, { PaginatedResult } from './paginatedresource';\nimport Resource, { ResourceCallback } from './resource';\nimport { ChannelOptions } from '../../types/channel';\nimport { PaginatedResultCallback, StandardCallback } from '../../types/utils';\nimport * as API from '../../../../ably';\nimport Platform from 'common/platform';\nimport { BaseClient } from './baseclient';\nimport Defaults from '../util/defaults';\n\ninterface RestHistoryParams {\n  start?: number;\n  end?: number;\n  direction?: string;\n  limit?: number;\n}\n\nfunction noop() {}\n\nconst MSG_ID_ENTROPY_BYTES = 9;\n\nfunction allEmptyIds(messages: Array<Message>) {\n  return Utils.arrEvery(messages, function (message: Message) {\n    return !message.id;\n  });\n}\n\nfunction normaliseChannelOptions(options?: ChannelOptions) {\n  const channelOptions = options || {};\n  if (channelOptions.cipher) {\n    if (!Platform.Crypto) throw new Error('Encryption not enabled; use ably.encryption.js instead');\n    const cipher = Platform.Crypto.getCipher(channelOptions.cipher);\n    channelOptions.cipher = cipher.cipherParams;\n    channelOptions.channelCipher = cipher.cipher;\n  } else if ('cipher' in channelOptions) {\n    /* Don't deactivate an existing cipher unless options\n     * has a 'cipher' key that's falsey */\n    channelOptions.cipher = undefined;\n    channelOptions.channelCipher = null;\n  }\n  return channelOptions;\n}\n\nclass Channel extends EventEmitter {\n  client: BaseClient;\n  name: string;\n  basePath: string;\n  presence: Presence;\n  channelOptions: ChannelOptions;\n\n  constructor(client: BaseClient, name: string, channelOptions?: ChannelOptions) {\n    super();\n    Logger.logAction(Logger.LOG_MINOR, 'Channel()', 'started; name = ' + name);\n    this.client = client;\n    this.name = name;\n    this.basePath = '/channels/' + encodeURIComponent(name);\n    this.presence = new Presence(this);\n    this.channelOptions = normaliseChannelOptions(channelOptions);\n  }\n\n  setOptions(options?: ChannelOptions): void {\n    this.channelOptions = normaliseChannelOptions(options);\n  }\n\n  history(\n    params: RestHistoryParams | null,\n    callback: PaginatedResultCallback<Message>\n  ): Promise<PaginatedResult<Message>> | void {\n    Logger.logAction(Logger.LOG_MICRO, 'Channel.history()', 'channel = ' + this.name);\n    /* params and callback are optional; see if params contains the callback */\n    if (callback === undefined) {\n      if (typeof params == 'function') {\n        callback = params;\n        params = null;\n      } else {\n        return Utils.promisify(this, 'history', arguments);\n      }\n    }\n\n    this._history(params, callback);\n  }\n\n  _history(params: RestHistoryParams | null, callback: PaginatedResultCallback<Message>): void {\n    const client = this.client,\n      format = client.options.useBinaryProtocol ? Utils.Format.msgpack : Utils.Format.json,\n      envelope = this.client.http.supportsLinkHeaders ? undefined : format,\n      headers = Defaults.defaultGetHeaders(client.options, { format });\n\n    Utils.mixin(headers, client.options.headers);\n\n    const options = this.channelOptions;\n    new PaginatedResource(client, this.basePath + '/messages', headers, envelope, async function (\n      body: any,\n      headers: Record<string, string>,\n      unpacked?: boolean\n    ) {\n      return await Message.fromResponseBody(body, options, unpacked ? undefined : format);\n    }).get(params as Record<string, unknown>, callback);\n  }\n\n  publish(): void | Promise<void> {\n    const argCount = arguments.length,\n      first = arguments[0],\n      second = arguments[1];\n    let callback = arguments[argCount - 1];\n    let messages: Array<Message>;\n    let params: any;\n\n    if (typeof callback !== 'function') {\n      return Utils.promisify(this, 'publish', arguments);\n    }\n\n    if (typeof first === 'string' || first === null) {\n      /* (name, data, ...) */\n      messages = [Message.fromValues({ name: first, data: second })];\n      params = arguments[2];\n    } else if (Utils.isObject(first)) {\n      messages = [Message.fromValues(first)];\n      params = arguments[1];\n    } else if (Utils.isArray(first)) {\n      messages = Message.fromValuesArray(first);\n      params = arguments[1];\n    } else {\n      throw new ErrorInfo(\n        'The single-argument form of publish() expects a message object or an array of message objects',\n        40013,\n        400\n      );\n    }\n\n    if (typeof params !== 'object' || !params) {\n      /* No params supplied (so after-message argument is just the callback or undefined) */\n      params = {};\n    }\n\n    const client = this.client,\n      options = client.options,\n      format = options.useBinaryProtocol ? Utils.Format.msgpack : Utils.Format.json,\n      idempotentRestPublishing = client.options.idempotentRestPublishing,\n      headers = Defaults.defaultPostHeaders(client.options, { format });\n\n    Utils.mixin(headers, options.headers);\n\n    if (idempotentRestPublishing && allEmptyIds(messages)) {\n      const msgIdBase = Utils.randomString(MSG_ID_ENTROPY_BYTES);\n      Utils.arrForEach(messages, function (message, index) {\n        message.id = msgIdBase + ':' + index.toString();\n      });\n    }\n\n    Message.encodeArray(messages, this.channelOptions as CipherOptions, (err: Error) => {\n      if (err) {\n        callback(err);\n        return;\n      }\n\n      /* RSL1i */\n      const size = Message.getMessagesSize(messages),\n        maxMessageSize = options.maxMessageSize;\n      if (size > maxMessageSize) {\n        callback(\n          new ErrorInfo(\n            'Maximum size of messages that can be published at once exceeded ( was ' +\n              size +\n              ' bytes; limit is ' +\n              maxMessageSize +\n              ' bytes)',\n            40009,\n            400\n          )\n        );\n        return;\n      }\n\n      this._publish(Message.serialize(messages, format), headers, params, callback);\n    });\n  }\n\n  _publish(requestBody: unknown, headers: Record<string, string>, params: any, callback: ResourceCallback): void {\n    Resource.post(this.client, this.basePath + '/messages', requestBody, headers, params, null, callback);\n  }\n\n  status(callback?: StandardCallback<API.Types.ChannelDetails>): void | Promise<API.Types.ChannelDetails> {\n    if (typeof callback !== 'function') {\n      return Utils.promisify(this, 'status', []);\n    }\n\n    const format = this.client.options.useBinaryProtocol ? Utils.Format.msgpack : Utils.Format.json;\n    const headers = Defaults.defaultPostHeaders(this.client.options, { format });\n\n    Resource.get<API.Types.ChannelDetails>(this.client, this.basePath, headers, {}, format, callback || noop);\n  }\n}\n\nexport default Channel;\n", "import * as Utils from '../util/utils';\n\ntype MessageValues = {\n  count?: number;\n  data?: number;\n  uncompressedData?: number;\n  failed?: number;\n  refused?: number;\n  category?: Record<string, MessageValues>;\n};\n\ntype ResourceValues = {\n  peak?: number;\n  min?: number;\n  mean?: number;\n  opened?: number;\n  refused?: number;\n};\n\ntype RequestValues = {\n  succeeded?: number;\n  failed?: number;\n  refused?: number;\n};\n\ntype ConnectionTypesValues = {\n  plain?: ResourceValues;\n  tls?: ResourceValues;\n  all?: ResourceValues;\n};\n\ntype MessageTypesValues = {\n  messages?: MessageValues;\n  presence?: MessageValues;\n  all?: MessageValues;\n};\n\ntype MessageTrafficValues = {\n  realtime?: MessageTypesValues;\n  rest?: MessageTypesValues;\n  webhook?: MessageTypesValues;\n  sharedQueue?: MessageTypesValues;\n  externalQueue?: MessageTypesValues;\n  httpEvent?: MessageTypesValues;\n  push?: MessageTypesValues;\n  all?: MessageTypesValues;\n};\n\ntype MessageDirectionsValues = {\n  all?: MessageTypesValues;\n  inbound?: MessageTrafficValues;\n  outbound?: MessageTrafficValues;\n};\n\ntype XchgMessagesValues = {\n  all?: MessageTypesValues;\n  producerPaid?: MessageDirectionsValues;\n  consumerPaid?: MessageDirectionsValues;\n};\n\ntype NotificationsValues = {\n  invalid?: number;\n  attempted?: number;\n  successful?: number;\n  failed?: number;\n};\n\ntype PushValues = {\n  messages?: number;\n  notifications?: NotificationsValues;\n  directPublishes?: number;\n};\n\ntype ProcessedCountValues = {\n  succeeded?: number;\n  skipped?: number;\n  failed?: number;\n};\n\ntype ProcessedMessagesValues = {\n  delta?: Record<string, ProcessedCountValues>;\n};\n\ntype StatsValues = {\n  all?: MessageTypesValues;\n  inbound?: MessageTrafficValues;\n  outbound?: MessageTrafficValues;\n  persisted?: MessageTypesValues;\n  connections?: ConnectionTypesValues;\n  channels?: ResourceValues;\n  apiRequests?: RequestValues;\n  tokenRequests?: RequestValues;\n  xchgProducer?: XchgMessagesValues;\n  xchgConsumer?: XchgMessagesValues;\n  pushStats?: PushValues;\n  processed?: ProcessedMessagesValues;\n  inProgress?: never;\n  unit?: never;\n  intervalId?: never;\n};\n\nclass MessageCount {\n  count?: number;\n  data?: number;\n  uncompressedData?: number;\n  failed?: number;\n  refused?: number;\n\n  constructor(values?: MessageValues) {\n    this.count = (values && values.count) || 0;\n    this.data = (values && values.data) || 0;\n    this.uncompressedData = (values && values.uncompressedData) || 0;\n    this.failed = (values && values.failed) || 0;\n    this.refused = (values && values.refused) || 0;\n  }\n}\n\nclass MessageCategory extends MessageCount {\n  category?: Record<string, MessageCount>;\n  constructor(values?: MessageValues) {\n    super(values);\n    if (values && values.category) {\n      this.category = {};\n      Utils.forInOwnNonNullProperties(values.category, (prop: string) => {\n        (this.category as Record<string, MessageCount>)[prop] = new MessageCount(\n          (values.category as Record<string, MessageCount>)[prop]\n        );\n      });\n    }\n  }\n}\n\nclass ResourceCount {\n  peak?: number;\n  min?: number;\n  mean?: number;\n  opened?: number;\n  refused?: number;\n\n  constructor(values?: ResourceValues) {\n    this.peak = (values && values.peak) || 0;\n    this.min = (values && values.min) || 0;\n    this.mean = (values && values.mean) || 0;\n    this.opened = (values && values.opened) || 0;\n    this.refused = (values && values.refused) || 0;\n  }\n}\n\nclass RequestCount {\n  succeeded?: number;\n  failed?: number;\n  refused?: number;\n\n  constructor(values?: RequestValues) {\n    this.succeeded = (values && values.succeeded) || 0;\n    this.failed = (values && values.failed) || 0;\n    this.refused = (values && values.refused) || 0;\n  }\n}\n\nclass ConnectionTypes {\n  plain?: ResourceCount;\n  tls?: ResourceCount;\n  all?: ResourceCount;\n\n  constructor(values?: ConnectionTypesValues) {\n    this.plain = new ResourceCount(values && values.plain);\n    this.tls = new ResourceCount(values && values.tls);\n    this.all = new ResourceCount(values && values.all);\n  }\n}\n\nclass MessageTypes {\n  messages?: MessageCategory;\n  presence?: MessageCategory;\n  all?: MessageCategory;\n\n  constructor(values?: MessageTypesValues) {\n    this.messages = new MessageCategory(values && values.messages);\n    this.presence = new MessageCategory(values && values.presence);\n    this.all = new MessageCategory(values && values.all);\n  }\n}\n\nclass MessageTraffic {\n  realtime?: MessageTypes;\n  rest?: MessageTypes;\n  webhook?: MessageTypes;\n  sharedQueue?: MessageTypes;\n  externalQueue?: MessageTypes;\n  httpEvent?: MessageTypes;\n  push?: MessageTypes;\n  all?: MessageTypes;\n\n  constructor(values?: MessageTrafficValues) {\n    this.realtime = new MessageTypes(values && values.realtime);\n    this.rest = new MessageTypes(values && values.rest);\n    this.webhook = new MessageTypes(values && values.webhook);\n    this.sharedQueue = new MessageTypes(values && values.sharedQueue);\n    this.externalQueue = new MessageTypes(values && values.externalQueue);\n    this.httpEvent = new MessageTypes(values && values.httpEvent);\n    this.push = new MessageTypes(values && values.push);\n    this.all = new MessageTypes(values && values.all);\n  }\n}\n\nclass MessageDirections {\n  all?: MessageTypes;\n  inbound?: MessageTraffic;\n  outbound?: MessageTraffic;\n\n  constructor(values?: MessageDirectionsValues) {\n    this.all = new MessageTypes(values && values.all);\n    this.inbound = new MessageTraffic(values && values.inbound);\n    this.outbound = new MessageTraffic(values && values.outbound);\n  }\n}\n\nclass XchgMessages {\n  all?: MessageTypes;\n  producerPaid?: MessageDirections;\n  consumerPaid?: MessageDirections;\n\n  constructor(values?: XchgMessagesValues) {\n    this.all = new MessageTypes(values && values.all);\n    this.producerPaid = new MessageDirections(values && values.producerPaid);\n    this.consumerPaid = new MessageDirections(values && values.consumerPaid);\n  }\n}\n\nclass PushStats {\n  messages?: number;\n  notifications?: NotificationsValues;\n  directPublishes?: number;\n\n  constructor(values?: PushValues) {\n    this.messages = (values && values.messages) || 0;\n    const notifications = values && values.notifications;\n    this.notifications = {\n      invalid: (notifications && notifications.invalid) || 0,\n      attempted: (notifications && notifications.attempted) || 0,\n      successful: (notifications && notifications.successful) || 0,\n      failed: (notifications && notifications.failed) || 0,\n    };\n    this.directPublishes = (values && values.directPublishes) || 0;\n  }\n}\n\nclass ProcessedCount {\n  succeeded?: number;\n  skipped?: number;\n  failed?: number;\n\n  constructor(values: ProcessedCountValues) {\n    this.succeeded = (values && values.succeeded) || 0;\n    this.skipped = (values && values.skipped) || 0;\n    this.failed = (values && values.failed) || 0;\n  }\n}\n\nclass ProcessedMessages {\n  delta?: Record<string, ProcessedCount>;\n\n  constructor(values?: ProcessedMessagesValues) {\n    this.delta = undefined;\n    if (values && values.delta) {\n      this.delta = {};\n      Utils.forInOwnNonNullProperties(values.delta, (prop: string) => {\n        (this.delta as Record<string, ProcessedCount>)[prop] = new ProcessedCount(\n          (values.delta as Record<string, ProcessedCountValues>)[prop]\n        );\n      });\n    }\n  }\n}\n\nclass Stats extends MessageDirections {\n  persisted?: MessageTypes;\n  connections?: ConnectionTypes;\n  channels?: ResourceCount;\n  apiRequests?: RequestCount;\n  tokenRequests?: RequestCount;\n  xchgProducer?: XchgMessages;\n  xchgConsumer?: XchgMessages;\n  push?: PushStats;\n  processed?: ProcessedMessages;\n  inProgress?: never;\n  unit?: never;\n  intervalId?: never;\n\n  constructor(values?: StatsValues) {\n    super(values as MessageDirectionsValues);\n    this.persisted = new MessageTypes(values && values.persisted);\n    this.connections = new ConnectionTypes(values && values.connections);\n    this.channels = new ResourceCount(values && values.channels);\n    this.apiRequests = new RequestCount(values && values.apiRequests);\n    this.tokenRequests = new RequestCount(values && values.tokenRequests);\n    this.xchgProducer = new XchgMessages(values && values.xchgProducer);\n    this.xchgConsumer = new XchgMessages(values && values.xchgConsumer);\n    this.push = new PushStats(values && values.pushStats);\n    this.processed = new ProcessedMessages(values && values.processed);\n    this.inProgress = (values && values.inProgress) || undefined;\n    this.unit = (values && values.unit) || undefined;\n    this.intervalId = (values && values.intervalId) || undefined;\n  }\n\n  static fromValues(values: StatsValues): Stats {\n    return new Stats(values);\n  }\n}\n\nexport default Stats;\n", "import * as Utils from '../util/utils';\nimport Logger, { LoggerOptions } from '../util/logger';\nimport Push from './push';\nimport PaginatedResource, { HttpPaginatedResponse, PaginatedResult } from './paginatedresource';\nimport Channel from './channel';\nimport ErrorInfo from '../types/errorinfo';\nimport Stats from '../types/stats';\nimport HttpMethods from '../../constants/HttpMethods';\nimport { ChannelOptions } from '../../types/channel';\nimport { PaginatedResultCallback, StandardCallback } from '../../types/utils';\nimport { ErrnoException, IHttp, RequestParams } from '../../types/http';\nimport { NormalisedClientOptions } from '../../types/ClientOptions';\n\nimport Platform from '../../platform';\nimport { BaseClient } from './baseclient';\nimport Defaults from '../util/defaults';\n\nconst noop = function () {};\n\nclass Rest {\n  channels: Channels;\n  push: Push;\n  client: BaseClient;\n  http: IHttp;\n  options: NormalisedClientOptions;\n\n  constructor(client: BaseClient) {\n    this.client = client;\n    this.http = client.http;\n    this.options = client.options;\n    this.channels = new Channels(this.client);\n    this.push = new Push(this);\n  }\n\n  stats(\n    params: RequestParams,\n    callback: StandardCallback<PaginatedResult<Stats>>\n  ): Promise<PaginatedResult<Stats>> | void {\n    /* params and callback are optional; see if params contains the callback */\n    if (callback === undefined) {\n      if (typeof params == 'function') {\n        callback = params;\n        params = null;\n      } else {\n        return Utils.promisify(this, 'stats', [params]) as Promise<PaginatedResult<Stats>>;\n      }\n    }\n    const headers = Defaults.defaultGetHeaders(this.options),\n      format = this.options.useBinaryProtocol ? Utils.Format.msgpack : Utils.Format.json,\n      envelope = this.http.supportsLinkHeaders ? undefined : format;\n\n    Utils.mixin(headers, this.options.headers);\n\n    new PaginatedResource(this.client, '/stats', headers, envelope, function (\n      body: unknown,\n      headers: Record<string, string>,\n      unpacked?: boolean\n    ) {\n      const statsValues = unpacked ? body : JSON.parse(body as string);\n      for (let i = 0; i < statsValues.length; i++) statsValues[i] = Stats.fromValues(statsValues[i]);\n      return statsValues;\n    }).get(params as Record<string, string>, callback);\n  }\n\n  time(params?: RequestParams | StandardCallback<number>, callback?: StandardCallback<number>): Promise<number> | void {\n    /* params and callback are optional; see if params contains the callback */\n    if (callback === undefined) {\n      if (typeof params == 'function') {\n        callback = params;\n        params = null;\n      } else {\n        return Utils.promisify(this, 'time', [params]) as Promise<number>;\n      }\n    }\n\n    const _callback = callback || noop;\n\n    const headers = Defaults.defaultGetHeaders(this.options);\n    if (this.options.headers) Utils.mixin(headers, this.options.headers);\n    const timeUri = (host: string) => {\n      return this.client.authority(host) + '/time';\n    };\n    this.http.do(\n      HttpMethods.Get,\n      this.client,\n      timeUri,\n      headers,\n      null,\n      params as RequestParams,\n      (\n        err?: ErrorInfo | ErrnoException | null,\n        res?: unknown,\n        headers?: Record<string, string>,\n        unpacked?: boolean\n      ) => {\n        if (err) {\n          _callback(err);\n          return;\n        }\n        if (!unpacked) res = JSON.parse(res as string);\n        const time = (res as number[])[0];\n        if (!time) {\n          _callback(new ErrorInfo('Internal error (unexpected result type from GET /time)', 50000, 500));\n          return;\n        }\n        /* calculate time offset only once for this device by adding to the prototype */\n        this.client.serverTimeOffset = time - Utils.now();\n        _callback(null, time);\n      }\n    );\n  }\n\n  request(\n    method: string,\n    path: string,\n    version: number,\n    params: RequestParams,\n    body: unknown,\n    customHeaders: Record<string, string>,\n    callback: StandardCallback<HttpPaginatedResponse<unknown>>\n  ): Promise<HttpPaginatedResponse<unknown>> | void {\n    const useBinary = this.options.useBinaryProtocol,\n      encoder = useBinary ? Platform.Config.msgpack.encode : JSON.stringify,\n      decoder = useBinary ? Platform.Config.msgpack.decode : JSON.parse,\n      format = useBinary ? Utils.Format.msgpack : Utils.Format.json,\n      envelope = this.http.supportsLinkHeaders ? undefined : format;\n    params = params || {};\n    const _method = method.toLowerCase() as HttpMethods;\n    const headers =\n      _method == 'get'\n        ? Defaults.defaultGetHeaders(this.options, { format, protocolVersion: version })\n        : Defaults.defaultPostHeaders(this.options, { format, protocolVersion: version });\n\n    if (callback === undefined) {\n      return Utils.promisify(this, 'request', [method, path, version, params, body, customHeaders]) as Promise<\n        HttpPaginatedResponse<unknown>\n      >;\n    }\n\n    if (typeof body !== 'string') {\n      body = encoder(body);\n    }\n    Utils.mixin(headers, this.options.headers);\n    if (customHeaders) {\n      Utils.mixin(headers, customHeaders);\n    }\n    const paginatedResource = new PaginatedResource(\n      this.client,\n      path,\n      headers,\n      envelope,\n      async function (resbody: unknown, headers: Record<string, string>, unpacked?: boolean) {\n        return Utils.ensureArray(unpacked ? resbody : decoder(resbody as string & Buffer));\n      },\n      /* useHttpPaginatedResponse: */ true\n    );\n\n    if (!Utils.arrIn(Platform.Http.methods, _method)) {\n      throw new ErrorInfo('Unsupported method ' + _method, 40500, 405);\n    }\n\n    if (Utils.arrIn(Platform.Http.methodsWithBody, _method)) {\n      paginatedResource[_method as HttpMethods.Post](params, body, callback as PaginatedResultCallback<unknown>);\n    } else {\n      paginatedResource[_method as HttpMethods.Get | HttpMethods.Delete](\n        params,\n        callback as PaginatedResultCallback<unknown>\n      );\n    }\n  }\n\n  setLog(logOptions: LoggerOptions): void {\n    Logger.setLog(logOptions.level, logOptions.handler);\n  }\n}\n\nclass Channels {\n  client: BaseClient;\n  all: Record<string, Channel>;\n\n  constructor(client: BaseClient) {\n    this.client = client;\n    this.all = Object.create(null);\n  }\n\n  get(name: string, channelOptions?: ChannelOptions) {\n    name = String(name);\n    let channel = this.all[name];\n    if (!channel) {\n      this.all[name] = channel = new Channel(this.client, name, channelOptions);\n    } else if (channelOptions) {\n      channel.setOptions(channelOptions);\n    }\n\n    return channel;\n  }\n\n  /* Included to support certain niche use-cases; most users should ignore this.\n   * Please do not use this unless you know what you're doing */\n  release(name: string) {\n    delete this.all[String(name)];\n  }\n}\n\nexport default Rest;\n", "import Platform from 'common/platform';\nimport ClientOptions from 'common/types/ClientOptions';\nimport Message from '../types/message';\nimport PresenceMessage from '../types/presencemessage';\nimport { BaseClient } from './baseclient';\nimport Rest from './rest';\n\n/**\n * Preloaded BaseClient with all REST features, used as the default non-treeshakeable Rest export\n */\nclass DefaultRest extends BaseClient {\n  constructor(options: string | ClientOptions) {\n    super(options, {\n      Rest,\n    });\n  }\n\n  static Platform = Platform;\n  static Crypto?: typeof Platform.Crypto;\n  static Message = Message;\n  static PresenceMessage = PresenceMessage;\n}\n\nexport { DefaultRest };\n", "import { Types } from '../../../../ably';\nimport * as Utils from '../util/utils';\nimport ErrorInfo from './errorinfo';\nimport Message from './message';\nimport PresenceMessage from './presencemessage';\n\nconst actions = {\n  HEARTBEAT: 0,\n  ACK: 1,\n  NACK: 2,\n  CONNECT: 3,\n  CONNECTED: 4,\n  DISCONNECT: 5,\n  DISCONNECTED: 6,\n  CLOSE: 7,\n  CLOSED: 8,\n  ERROR: 9,\n  ATTACH: 10,\n  ATTACHED: 11,\n  DETACH: 12,\n  DETACHED: 13,\n  PRESENCE: 14,\n  MESSAGE: 15,\n  SYNC: 16,\n  AUTH: 17,\n  ACTIVATE: 18,\n};\n\nconst ActionName: string[] = [];\nObject.keys(actions).forEach(function (name) {\n  ActionName[(actions as { [key: string]: number })[name]] = name;\n});\n\nconst flags: { [key: string]: number } = {\n  /* Channel attach state flags */\n  HAS_PRESENCE: 1 << 0,\n  HAS_BACKLOG: 1 << 1,\n  RESUMED: 1 << 2,\n  TRANSIENT: 1 << 4,\n  ATTACH_RESUME: 1 << 5,\n  /* Channel mode flags */\n  PRESENCE: 1 << 16,\n  PUBLISH: 1 << 17,\n  SUBSCRIBE: 1 << 18,\n  PRESENCE_SUBSCRIBE: 1 << 19,\n};\nconst flagNames = Object.keys(flags);\nflags.MODE_ALL = flags.PRESENCE | flags.PUBLISH | flags.SUBSCRIBE | flags.PRESENCE_SUBSCRIBE;\n\nfunction toStringArray(array?: any[]): string {\n  const result = [];\n  if (array) {\n    for (let i = 0; i < array.length; i++) {\n      result.push(array[i].toString());\n    }\n  }\n  return '[ ' + result.join(', ') + ' ]';\n}\n\nconst simpleAttributes = 'id channel channelSerial connectionId count msgSerial timestamp'.split(' ');\n\nclass ProtocolMessage {\n  action?: number;\n  flags?: number;\n  id?: string;\n  timestamp?: number;\n  count?: number;\n  error?: ErrorInfo;\n  connectionId?: string;\n  channel?: string;\n  channelSerial?: string | null;\n  msgSerial?: number;\n  messages?: Message[];\n  presence?: PresenceMessage[];\n  auth?: unknown;\n  connectionDetails?: Record<string, unknown>;\n\n  static Action = actions;\n\n  static channelModes = ['PRESENCE', 'PUBLISH', 'SUBSCRIBE', 'PRESENCE_SUBSCRIBE'];\n\n  static ActionName = ActionName;\n\n  hasFlag = (flag: string): boolean => {\n    return ((this.flags as number) & flags[flag]) > 0;\n  };\n\n  setFlag(flag: Types.ChannelMode): number {\n    return (this.flags = (this.flags as number) | flags[flag]);\n  }\n\n  getMode(): number | undefined {\n    return this.flags && this.flags & flags.MODE_ALL;\n  }\n\n  encodeModesToFlags(modes: Types.ChannelMode[]): void {\n    modes.forEach((mode) => this.setFlag(mode));\n  }\n\n  decodeModesFromFlags(): string[] | undefined {\n    const modes: string[] = [];\n    ProtocolMessage.channelModes.forEach((mode) => {\n      if (this.hasFlag(mode)) {\n        modes.push(mode);\n      }\n    });\n    return modes.length > 0 ? modes : undefined;\n  }\n\n  static serialize = Utils.encodeBody;\n\n  static deserialize = function (serialized: unknown, format?: Utils.Format): ProtocolMessage {\n    const deserialized = Utils.decodeBody<Record<string, unknown>>(serialized, format);\n    return ProtocolMessage.fromDeserialized(deserialized);\n  };\n\n  static fromDeserialized = function (deserialized: Record<string, unknown>): ProtocolMessage {\n    const error = deserialized.error;\n    if (error) deserialized.error = ErrorInfo.fromValues(error as ErrorInfo);\n    const messages = deserialized.messages as Message[];\n    if (messages) for (let i = 0; i < messages.length; i++) messages[i] = Message.fromValues(messages[i]);\n    const presence = deserialized.presence as PresenceMessage[];\n    if (presence) for (let i = 0; i < presence.length; i++) presence[i] = PresenceMessage.fromValues(presence[i], true);\n    return Object.assign(new ProtocolMessage(), deserialized);\n  };\n\n  static fromValues(values: unknown): ProtocolMessage {\n    return Object.assign(new ProtocolMessage(), values);\n  }\n\n  static stringify = function (msg: any): string {\n    let result = '[ProtocolMessage';\n    if (msg.action !== undefined) result += '; action=' + ProtocolMessage.ActionName[msg.action] || msg.action;\n\n    let attribute;\n    for (let attribIndex = 0; attribIndex < simpleAttributes.length; attribIndex++) {\n      attribute = simpleAttributes[attribIndex];\n      if (msg[attribute] !== undefined) result += '; ' + attribute + '=' + msg[attribute];\n    }\n\n    if (msg.messages) result += '; messages=' + toStringArray(Message.fromValuesArray(msg.messages));\n    if (msg.presence) result += '; presence=' + toStringArray(PresenceMessage.fromValuesArray(msg.presence));\n    if (msg.error) result += '; error=' + ErrorInfo.fromValues(msg.error).toString();\n    if (msg.auth && msg.auth.accessToken) result += '; token=' + msg.auth.accessToken;\n    if (msg.flags) result += '; flags=' + flagNames.filter(msg.hasFlag).join(',');\n    if (msg.params) {\n      let stringifiedParams = '';\n      Utils.forInOwnNonNullProperties(msg.params, function (prop: string) {\n        if (stringifiedParams.length > 0) {\n          stringifiedParams += '; ';\n        }\n        stringifiedParams += prop + '=' + msg.params[prop];\n      });\n      if (stringifiedParams.length > 0) {\n        result += '; params=[' + stringifiedParams + ']';\n      }\n    }\n    result += ']';\n    return result;\n  };\n}\n\nexport default ProtocolMessage;\n", "import ErrorInfo from '../types/errorinfo';\nimport EventEmitter from '../util/eventemitter';\nimport Logger from '../util/logger';\nimport { PendingMessage } from './protocol';\n\nclass MessageQueue extends EventEmitter {\n  messages: Array<PendingMessage>;\n\n  constructor() {\n    super();\n    this.messages = [];\n  }\n\n  count(): number {\n    return this.messages.length;\n  }\n\n  push(message: PendingMessage): void {\n    this.messages.push(message);\n  }\n\n  shift(): PendingMessage | undefined {\n    return this.messages.shift();\n  }\n\n  last(): PendingMessage {\n    return this.messages[this.messages.length - 1];\n  }\n\n  copyAll(): PendingMessage[] {\n    return this.messages.slice();\n  }\n\n  append(messages: Array<PendingMessage>): void {\n    this.messages.push.apply(this.messages, messages);\n  }\n\n  prepend(messages: Array<PendingMessage>): void {\n    this.messages.unshift.apply(this.messages, messages);\n  }\n\n  completeMessages(serial: number, count: number, err?: ErrorInfo | null): void {\n    Logger.logAction(Logger.LOG_MICRO, 'MessageQueue.completeMessages()', 'serial = ' + serial + '; count = ' + count);\n    err = err || null;\n    const messages = this.messages;\n    if (messages.length === 0) {\n      throw new Error('MessageQueue.completeMessages(): completeMessages called on any empty MessageQueue');\n    }\n    const first = messages[0];\n    if (first) {\n      const startSerial = first.message.msgSerial as number;\n      const endSerial = serial + count; /* the serial of the first message that is *not* the subject of this call */\n      if (endSerial > startSerial) {\n        const completeMessages = messages.splice(0, endSerial - startSerial);\n        for (const message of completeMessages) {\n          (message.callback as Function)(err);\n        }\n      }\n      if (messages.length == 0) this.emit('idle');\n    }\n  }\n\n  completeAllMessages(err: ErrorInfo): void {\n    this.completeMessages(0, Number.MAX_SAFE_INTEGER || Number.MAX_VALUE, err);\n  }\n\n  resetSendAttempted(): void {\n    for (let msg of this.messages) {\n      msg.sendAttempted = false;\n    }\n  }\n\n  clear(): void {\n    Logger.logAction(Logger.LOG_MICRO, 'MessageQueue.clear()', 'clearing ' + this.messages.length + ' messages');\n    this.messages = [];\n    this.emit('idle');\n  }\n}\n\nexport default MessageQueue;\n", "import ProtocolMessage from '../types/protocolmessage';\nimport * as Utils from '../util/utils';\nimport EventEmitter from '../util/eventemitter';\nimport Logger from '../util/logger';\nimport MessageQueue from './messagequeue';\nimport ErrorInfo from '../types/errorinfo';\nimport Transport from './transport';\nimport { ErrCallback } from '../../types/utils';\n\nconst actions = ProtocolMessage.Action;\n\nexport class PendingMessage {\n  message: ProtocolMessage;\n  callback?: ErrCallback;\n  merged: boolean;\n  sendAttempted: boolean;\n  ackRequired: boolean;\n\n  constructor(message: ProtocolMessage, callback?: ErrCallback) {\n    this.message = message;\n    this.callback = callback;\n    this.merged = false;\n    const action = message.action;\n    this.sendAttempted = false;\n    this.ackRequired = action == actions.MESSAGE || action == actions.PRESENCE;\n  }\n}\n\nclass Protocol extends EventEmitter {\n  transport: Transport;\n  messageQueue: MessageQueue;\n\n  constructor(transport: Transport) {\n    super();\n    this.transport = transport;\n    this.messageQueue = new MessageQueue();\n    transport.on('ack', (serial: number, count: number) => {\n      this.onAck(serial, count);\n    });\n    transport.on('nack', (serial: number, count: number, err: ErrorInfo) => {\n      this.onNack(serial, count, err);\n    });\n  }\n\n  onAck(serial: number, count: number): void {\n    Logger.logAction(Logger.LOG_MICRO, 'Protocol.onAck()', 'serial = ' + serial + '; count = ' + count);\n    this.messageQueue.completeMessages(serial, count);\n  }\n\n  onNack(serial: number, count: number, err: ErrorInfo): void {\n    Logger.logAction(\n      Logger.LOG_ERROR,\n      'Protocol.onNack()',\n      'serial = ' + serial + '; count = ' + count + '; err = ' + Utils.inspectError(err)\n    );\n    if (!err) {\n      err = new ErrorInfo('Unable to send message; channel not responding', 50001, 500);\n    }\n    this.messageQueue.completeMessages(serial, count, err);\n  }\n\n  onceIdle(listener: ErrCallback): void {\n    const messageQueue = this.messageQueue;\n    if (messageQueue.count() === 0) {\n      listener();\n      return;\n    }\n    messageQueue.once('idle', listener);\n  }\n\n  send(pendingMessage: PendingMessage): void {\n    if (pendingMessage.ackRequired) {\n      this.messageQueue.push(pendingMessage);\n    }\n    if (Logger.shouldLog(Logger.LOG_MICRO)) {\n      Logger.logAction(\n        Logger.LOG_MICRO,\n        'Protocol.send()',\n        'sending msg; ' + ProtocolMessage.stringify(pendingMessage.message)\n      );\n    }\n    pendingMessage.sendAttempted = true;\n    this.transport.send(pendingMessage.message);\n  }\n\n  getTransport(): Transport {\n    return this.transport;\n  }\n\n  getPendingMessages(): PendingMessage[] {\n    return this.messageQueue.copyAll();\n  }\n\n  clearPendingMessages(): void {\n    return this.messageQueue.clear();\n  }\n\n  finish(): void {\n    const transport = this.transport;\n    this.onceIdle(function () {\n      transport.disconnect();\n    });\n  }\n}\n\nexport default Protocol;\n", "import { IPartialErrorInfo } from '../types/errorinfo';\n\nclass ConnectionStateChange {\n  previous?: string;\n  current?: string;\n  retryIn?: number;\n  reason?: IPartialErrorInfo;\n\n  constructor(previous?: string, current?: string, retryIn?: number | null, reason?: IPartialErrorInfo) {\n    this.previous = previous;\n    this.current = current;\n    if (retryIn) this.retryIn = retryIn;\n    if (reason) this.reason = reason;\n  }\n}\n\nexport default ConnectionStateChange;\n", "import ErrorInfo from '../types/errorinfo';\n\nconst ConnectionErrorCodes = {\n  DISCONNECTED: 80003,\n  SUSPENDED: 80002,\n  FAILED: 80000,\n  CLOSING: 80017,\n  CLOSED: 80017,\n  UNKNOWN_CONNECTION_ERR: 50002,\n  UNKNOWN_CHANNEL_ERR: 50001,\n};\n\nconst ConnectionErrors = {\n  disconnected: () =>\n    ErrorInfo.fromValues({\n      statusCode: 400,\n      code: ConnectionErrorCodes.DISCONNECTED,\n      message: 'Connection to server temporarily unavailable',\n    }),\n  suspended: () =>\n    ErrorInfo.fromValues({\n      statusCode: 400,\n      code: ConnectionErrorCodes.SUSPENDED,\n      message: 'Connection to server unavailable',\n    }),\n  failed: () =>\n    ErrorInfo.fromValues({\n      statusCode: 400,\n      code: ConnectionErrorCodes.FAILED,\n      message: 'Connection failed or disconnected by server',\n    }),\n  closing: () =>\n    ErrorInfo.fromValues({\n      statusCode: 400,\n      code: ConnectionErrorCodes.CLOSING,\n      message: 'Connection closing',\n    }),\n  closed: () =>\n    ErrorInfo.fromValues({\n      statusCode: 400,\n      code: ConnectionErrorCodes.CLOSED,\n      message: 'Connection closed',\n    }),\n  unknownConnectionErr: () =>\n    ErrorInfo.fromValues({\n      statusCode: 500,\n      code: ConnectionErrorCodes.UNKNOWN_CONNECTION_ERR,\n      message: 'Internal connection error',\n    }),\n  unknownChannelErr: () =>\n    ErrorInfo.fromValues({\n      statusCode: 500,\n      code: ConnectionErrorCodes.UNKNOWN_CONNECTION_ERR,\n      message: 'Internal channel error',\n    }),\n};\n\nexport function isRetriable(err: ErrorInfo) {\n  if (!err.statusCode || !err.code || err.statusCode >= 500) {\n    return true;\n  }\n  return Object.values(ConnectionErrorCodes).includes(err.code);\n}\n\nexport default ConnectionErrors;\n", "import ProtocolMessage from '../types/protocolmessage';\nimport * as Utils from '../util/utils';\nimport EventEmitter from '../util/eventemitter';\nimport Logger from '../util/logger';\nimport ConnectionErrors from './connectionerrors';\nimport ErrorInfo from '../types/errorinfo';\nimport Auth from '../client/auth';\nimport * as API from '../../../../ably';\nimport ConnectionManager, { TransportParams } from './connectionmanager';\nimport Platform from 'common/platform';\n\nexport type TryConnectCallback = (\n  wrappedErr: { error: ErrorInfo; event: string } | null,\n  transport?: Transport\n) => void;\n\nexport type TransportCtor = new (\n  connectionManager: ConnectionManager,\n  auth: Auth,\n  params: TransportParams,\n  forceJsonProtocol?: boolean\n) => Transport;\n\nconst actions = ProtocolMessage.Action;\nconst closeMessage = ProtocolMessage.fromValues({ action: actions.CLOSE });\nconst disconnectMessage = ProtocolMessage.fromValues({ action: actions.DISCONNECT });\n\n/*\n * Transport instances inherit from EventEmitter and emit the following events:\n *\n * event name       data\n * closed           error\n * failed           error\n * disposed\n * connected        null error, connectionSerial, connectionId, connectionDetails\n * event            channel message object\n */\n\nabstract class Transport extends EventEmitter {\n  connectionManager: ConnectionManager;\n  auth: Auth;\n  params: TransportParams;\n  timeouts: Record<string, number>;\n  format?: Utils.Format;\n  isConnected: boolean;\n  isFinished: boolean;\n  isDisposed: boolean;\n  maxIdleInterval: number | null;\n  idleTimer: NodeJS.Timeout | number | null;\n  lastActivity: number | null;\n\n  constructor(connectionManager: ConnectionManager, auth: Auth, params: TransportParams, forceJsonProtocol?: boolean) {\n    super();\n    if (forceJsonProtocol) {\n      params.format = undefined;\n      params.heartbeats = true;\n    }\n    this.connectionManager = connectionManager;\n    connectionManager.registerProposedTransport(this);\n    this.auth = auth;\n    this.params = params;\n    this.timeouts = params.options.timeouts;\n    this.format = params.format;\n    this.isConnected = false;\n    this.isFinished = false;\n    this.isDisposed = false;\n    this.maxIdleInterval = null;\n    this.idleTimer = null;\n    this.lastActivity = null;\n  }\n\n  abstract shortName: string;\n  abstract send(message: ProtocolMessage): void;\n\n  connect(): void {}\n\n  close(): void {\n    if (this.isConnected) {\n      this.requestClose();\n    }\n    this.finish('closed', ConnectionErrors.closed());\n  }\n\n  disconnect(err?: Error | ErrorInfo): void {\n    /* Used for network/transport issues that need to result in the transport\n     * being disconnected, but should not transition the connection to 'failed' */\n    if (this.isConnected) {\n      this.requestDisconnect();\n    }\n    this.finish('disconnected', err || ConnectionErrors.disconnected());\n  }\n\n  fail(err: ErrorInfo): void {\n    /* Used for client-side-detected fatal connection issues */\n    if (this.isConnected) {\n      this.requestDisconnect();\n    }\n    this.finish('failed', err || ConnectionErrors.failed());\n  }\n\n  finish(event: string, err?: Error | ErrorInfo): void {\n    if (this.isFinished) {\n      return;\n    }\n\n    this.isFinished = true;\n    this.isConnected = false;\n    this.maxIdleInterval = null;\n    clearTimeout(this.idleTimer ?? undefined);\n    this.idleTimer = null;\n    this.emit(event, err);\n    this.dispose();\n  }\n\n  onProtocolMessage(message: ProtocolMessage): void {\n    if (Logger.shouldLog(Logger.LOG_MICRO)) {\n      Logger.logAction(\n        Logger.LOG_MICRO,\n        'Transport.onProtocolMessage()',\n        'received on ' +\n          this.shortName +\n          ': ' +\n          ProtocolMessage.stringify(message) +\n          '; connectionId = ' +\n          this.connectionManager.connectionId\n      );\n    }\n    this.onActivity();\n\n    switch (message.action) {\n      case actions.HEARTBEAT:\n        Logger.logAction(\n          Logger.LOG_MICRO,\n          'Transport.onProtocolMessage()',\n          this.shortName + ' heartbeat; connectionId = ' + this.connectionManager.connectionId\n        );\n        this.emit('heartbeat', message.id);\n        break;\n      case actions.CONNECTED:\n        this.onConnect(message);\n        this.emit('connected', message.error, message.connectionId, message.connectionDetails, message);\n        break;\n      case actions.CLOSED:\n        this.onClose(message);\n        break;\n      case actions.DISCONNECTED:\n        this.onDisconnect(message);\n        break;\n      case actions.ACK:\n        this.emit('ack', message.msgSerial, message.count);\n        break;\n      case actions.NACK:\n        this.emit('nack', message.msgSerial, message.count, message.error);\n        break;\n      case actions.SYNC:\n        this.connectionManager.onChannelMessage(message, this);\n        break;\n      case actions.ACTIVATE:\n        // Ignored.\n        break;\n      case actions.AUTH:\n        this.auth.authorize(function (err: ErrorInfo) {\n          if (err) {\n            Logger.logAction(\n              Logger.LOG_ERROR,\n              'Transport.onProtocolMessage()',\n              'Ably requested re-authentication, but unable to obtain a new token: ' + Utils.inspectError(err)\n            );\n          }\n        });\n        break;\n      case actions.ERROR:\n        Logger.logAction(\n          Logger.LOG_MINOR,\n          'Transport.onProtocolMessage()',\n          'received error action; connectionId = ' +\n            this.connectionManager.connectionId +\n            '; err = ' +\n            Platform.Config.inspect(message.error) +\n            (message.channel ? ', channel: ' + message.channel : '')\n        );\n        if (message.channel === undefined) {\n          this.onFatalError(message);\n          break;\n        }\n        /* otherwise it's a channel-specific error, so handle it in the channel */\n        this.connectionManager.onChannelMessage(message, this);\n        break;\n      default:\n        /* all other actions are channel-specific */\n        this.connectionManager.onChannelMessage(message, this);\n    }\n  }\n\n  onConnect(message: ProtocolMessage): void {\n    this.isConnected = true;\n    if (!message.connectionDetails) {\n      throw new Error('Transport.onConnect(): Connect message recieved without connectionDetails');\n    }\n    const maxPromisedIdle = message.connectionDetails.maxIdleInterval as number;\n    if (maxPromisedIdle) {\n      this.maxIdleInterval = maxPromisedIdle + this.timeouts.realtimeRequestTimeout;\n      this.onActivity();\n    }\n    /* else Realtime declines to guarantee any maximum idle interval - CD2h */\n  }\n\n  onDisconnect(message: ProtocolMessage): void {\n    /* Used for when the server has disconnected the client (usually with a\n     * DISCONNECTED action) */\n    const err = message && message.error;\n    Logger.logAction(Logger.LOG_MINOR, 'Transport.onDisconnect()', 'err = ' + Utils.inspectError(err));\n    this.finish('disconnected', err);\n  }\n\n  onFatalError(message: ProtocolMessage): void {\n    /* On receipt of a fatal connection error, we can assume that the server\n     * will close the connection and the transport, and do not need to request\n     * a disconnection - RTN15i */\n    const err = message && message.error;\n    Logger.logAction(Logger.LOG_MINOR, 'Transport.onFatalError()', 'err = ' + Utils.inspectError(err));\n    this.finish('failed', err);\n  }\n\n  onClose(message: ProtocolMessage): void {\n    const err = message && message.error;\n    Logger.logAction(Logger.LOG_MINOR, 'Transport.onClose()', 'err = ' + Utils.inspectError(err));\n    this.finish('closed', err);\n  }\n\n  requestClose(): void {\n    Logger.logAction(Logger.LOG_MINOR, 'Transport.requestClose()', '');\n    this.send(closeMessage);\n  }\n\n  requestDisconnect(): void {\n    Logger.logAction(Logger.LOG_MINOR, 'Transport.requestDisconnect()', '');\n    this.send(disconnectMessage);\n  }\n\n  ping(id: string): void {\n    const msg: Record<string, number | string> = { action: ProtocolMessage.Action.HEARTBEAT };\n    if (id) msg.id = id;\n    this.send(ProtocolMessage.fromValues(msg));\n  }\n\n  dispose(): void {\n    Logger.logAction(Logger.LOG_MINOR, 'Transport.dispose()', '');\n    this.isDisposed = true;\n    this.off();\n  }\n\n  onActivity(): void {\n    if (!this.maxIdleInterval) {\n      return;\n    }\n    this.lastActivity = this.connectionManager.lastActivity = Utils.now();\n    this.setIdleTimer(this.maxIdleInterval + 100);\n  }\n\n  setIdleTimer(timeout: number): void {\n    if (!this.idleTimer) {\n      this.idleTimer = setTimeout(() => {\n        this.onIdleTimerExpire();\n      }, timeout);\n    }\n  }\n\n  onIdleTimerExpire(): void {\n    if (!this.lastActivity || !this.maxIdleInterval) {\n      throw new Error('Transport.onIdleTimerExpire(): lastActivity/maxIdleInterval not set');\n    }\n    this.idleTimer = null;\n    const sinceLast = Utils.now() - this.lastActivity;\n    const timeRemaining = this.maxIdleInterval - sinceLast;\n    if (timeRemaining <= 0) {\n      const msg = 'No activity seen from realtime in ' + sinceLast + 'ms; assuming connection has dropped';\n      Logger.logAction(Logger.LOG_ERROR, 'Transport.onIdleTimerExpire()', msg);\n      this.disconnect(new ErrorInfo(msg, 80003, 408));\n    } else {\n      this.setIdleTimer(timeRemaining + 100);\n    }\n  }\n\n  static tryConnect(\n    transportCtor: TransportCtor,\n    connectionManager: ConnectionManager,\n    auth: Auth,\n    transportParams: TransportParams,\n    callback: TryConnectCallback\n  ): void {\n    const transport = new transportCtor(connectionManager, auth, transportParams);\n\n    let transportAttemptTimer: NodeJS.Timeout | number;\n\n    const errorCb = function (this: { event: string }, err: ErrorInfo) {\n      clearTimeout(transportAttemptTimer);\n      callback({ event: this.event, error: err });\n    };\n\n    const realtimeRequestTimeout = connectionManager.options.timeouts.realtimeRequestTimeout;\n    transportAttemptTimer = setTimeout(() => {\n      transport.off(['preconnect', 'disconnected', 'failed']);\n      transport.dispose();\n      errorCb.call(\n        { event: 'disconnected' },\n        new ErrorInfo('Timeout waiting for transport to indicate itself viable', 50000, 500)\n      );\n    }, realtimeRequestTimeout);\n\n    transport.on(['failed', 'disconnected'], errorCb);\n    transport.on('preconnect', function () {\n      Logger.logAction(Logger.LOG_MINOR, 'Transport.tryConnect()', 'viable transport ' + transport);\n      clearTimeout(transportAttemptTimer);\n      transport.off(['failed', 'disconnected'], errorCb);\n      callback(null, transport);\n    });\n    transport.connect();\n  }\n\n  onAuthUpdated?: (tokenDetails: API.Types.TokenDetails) => void;\n}\n\nexport default Transport;\n", "import Platform from 'common/platform';\nimport * as Utils from '../util/utils';\nimport Transport from './transport';\nimport Defaults from '../util/defaults';\nimport Logger from '../util/logger';\nimport ProtocolMessage from '../types/protocolmessage';\nimport ErrorInfo from '../types/errorinfo';\nimport NodeWebSocket from 'ws';\nimport ConnectionManager, { TransportParams } from './connectionmanager';\nimport Auth from '../client/auth';\n\nconst shortName = 'web_socket';\n\nfunction isNodeWebSocket(ws: WebSocket | NodeWebSocket): ws is NodeWebSocket {\n  return !!(ws as NodeWebSocket).on;\n}\n\nclass WebSocketTransport extends Transport {\n  shortName = shortName;\n  wsHost: string;\n  uri?: string;\n  wsConnection?: WebSocket | NodeWebSocket;\n\n  constructor(connectionManager: ConnectionManager, auth: Auth, params: TransportParams) {\n    super(connectionManager, auth, params);\n    /* If is a browser, can't detect pings, so request protocol heartbeats */\n    params.heartbeats = Platform.Config.useProtocolHeartbeats;\n    this.wsHost = Defaults.getHost(params.options, params.host, true);\n  }\n\n  static isAvailable() {\n    return !!Platform.Config.WebSocket;\n  }\n\n  createWebSocket(uri: string, connectParams: Record<string, string>) {\n    this.uri = uri + Utils.toQueryString(connectParams);\n    return new Platform.Config.WebSocket(this.uri);\n  }\n\n  toString() {\n    return 'WebSocketTransport; uri=' + this.uri;\n  }\n\n  connect() {\n    Logger.logAction(Logger.LOG_MINOR, 'WebSocketTransport.connect()', 'starting');\n    Transport.prototype.connect.call(this);\n    const self = this,\n      params = this.params,\n      options = params.options;\n    const wsScheme = options.tls ? 'wss://' : 'ws://';\n    const wsUri = wsScheme + this.wsHost + ':' + Defaults.getPort(options) + '/';\n    Logger.logAction(Logger.LOG_MINOR, 'WebSocketTransport.connect()', 'uri: ' + wsUri);\n    this.auth.getAuthParams(function (err: ErrorInfo, authParams: Record<string, string>) {\n      if (self.isDisposed) {\n        return;\n      }\n      let paramStr = '';\n      for (const param in authParams) paramStr += ' ' + param + ': ' + authParams[param] + ';';\n      Logger.logAction(Logger.LOG_MINOR, 'WebSocketTransport.connect()', 'authParams:' + paramStr + ' err: ' + err);\n      if (err) {\n        self.disconnect(err);\n        return;\n      }\n      const connectParams = params.getConnectParams(authParams);\n      try {\n        const wsConnection = (self.wsConnection = self.createWebSocket(wsUri, connectParams));\n        wsConnection.binaryType = Platform.Config.binaryType;\n        wsConnection.onopen = function () {\n          self.onWsOpen();\n        };\n        wsConnection.onclose = function (ev: CloseEvent) {\n          self.onWsClose(ev);\n        };\n        wsConnection.onmessage = function (ev: MessageEvent) {\n          self.onWsData(ev.data);\n        };\n        wsConnection.onerror = function (ev: Event) {\n          self.onWsError(ev as ErrorEvent);\n        };\n        if (isNodeWebSocket(wsConnection)) {\n          /* node; browsers currently don't have a general eventemitter and can't detect\n           * pings. Also, no need to reply with a pong explicitly, ws lib handles that */\n          wsConnection.on('ping', function () {\n            self.onActivity();\n          });\n        }\n      } catch (e) {\n        Logger.logAction(\n          Logger.LOG_ERROR,\n          'WebSocketTransport.connect()',\n          'Unexpected exception creating websocket: err = ' + ((e as Error).stack || (e as Error).message)\n        );\n        self.disconnect(e as Error);\n      }\n    });\n  }\n\n  send(message: ProtocolMessage) {\n    const wsConnection = this.wsConnection;\n    if (!wsConnection) {\n      Logger.logAction(Logger.LOG_ERROR, 'WebSocketTransport.send()', 'No socket connection');\n      return;\n    }\n    try {\n      wsConnection.send(ProtocolMessage.serialize(message, this.params.format));\n    } catch (e) {\n      const msg = 'Exception from ws connection when trying to send: ' + Utils.inspectError(e);\n      Logger.logAction(Logger.LOG_ERROR, 'WebSocketTransport.send()', msg);\n      /* Don't try to request a disconnect, that'll just involve sending data\n       * down the websocket again. Just finish the transport. */\n      this.finish('disconnected', new ErrorInfo(msg, 50000, 500));\n    }\n  }\n\n  onWsData(data: string) {\n    Logger.logAction(\n      Logger.LOG_MICRO,\n      'WebSocketTransport.onWsData()',\n      'data received; length = ' + data.length + '; type = ' + typeof data\n    );\n    try {\n      this.onProtocolMessage(ProtocolMessage.deserialize(data, this.format));\n    } catch (e) {\n      Logger.logAction(\n        Logger.LOG_ERROR,\n        'WebSocketTransport.onWsData()',\n        'Unexpected exception handing channel message: ' + (e as Error).stack\n      );\n    }\n  }\n\n  onWsOpen() {\n    Logger.logAction(Logger.LOG_MINOR, 'WebSocketTransport.onWsOpen()', 'opened WebSocket');\n    this.emit('preconnect');\n  }\n\n  onWsClose(ev: number | CloseEvent) {\n    let wasClean, code;\n    if (typeof ev == 'object') {\n      /* W3C spec-compatible */\n      code = ev.code;\n      // ev.wasClean is undefined in reactnative\n      wasClean = ev.wasClean || code === 1000;\n    } /*if(typeof(ev) == 'number')*/ else {\n      /* ws in node */\n      code = ev;\n      wasClean = code == 1000;\n    }\n    delete this.wsConnection;\n    if (wasClean) {\n      Logger.logAction(Logger.LOG_MINOR, 'WebSocketTransport.onWsClose()', 'Cleanly closed WebSocket');\n      const err = new ErrorInfo('Websocket closed', 80003, 400);\n      this.finish('disconnected', err);\n    } else {\n      const msg = 'Unclean disconnection of WebSocket ; code = ' + code,\n        err = new ErrorInfo(msg, 80003, 400);\n      Logger.logAction(Logger.LOG_MINOR, 'WebSocketTransport.onWsClose()', msg);\n      this.finish('disconnected', err);\n    }\n    this.emit('disposed');\n  }\n\n  onWsError(err: ErrorEvent) {\n    Logger.logAction(Logger.LOG_MINOR, 'WebSocketTransport.onError()', 'Error from WebSocket: ' + err.message);\n    /* Wait a tick before aborting: if the websocket was connected, this event\n     * will be immediately followed by an onclose event with a close code. Allow\n     * that to close it (so we see the close code) rather than anticipating it */\n    Platform.Config.nextTick(() => {\n      this.disconnect(Error(err.message));\n    });\n  }\n\n  dispose() {\n    Logger.logAction(Logger.LOG_MINOR, 'WebSocketTransport.dispose()', '');\n    this.isDisposed = true;\n    const wsConnection = this.wsConnection;\n    if (wsConnection) {\n      /* Ignore any messages that come through after dispose() is called but before\n       * websocket is actually closed. (mostly would be harmless, but if it's a\n       * CONNECTED, it'll re-tick isConnected and cause all sorts of havoc) */\n      wsConnection.onmessage = function () {};\n      delete this.wsConnection;\n      /* defer until the next event loop cycle before closing the socket,\n       * giving some implementations the opportunity to send any outstanding close message */\n      Platform.Config.nextTick(function () {\n        Logger.logAction(Logger.LOG_MICRO, 'WebSocketTransport.dispose()', 'closing websocket');\n        if (!wsConnection) {\n          throw new Error('WebSocketTransport.dispose(): wsConnection is not defined');\n        }\n        wsConnection.close();\n      });\n    }\n  }\n}\n\nfunction initialiseTransport(connectionManager: any): typeof WebSocketTransport {\n  if (WebSocketTransport.isAvailable()) connectionManager.supportedTransports[shortName] = WebSocketTransport;\n\n  return WebSocketTransport;\n}\n\nexport default initialiseTransport;\n", "enum HttpStatusCodes {\n  Success = 200,\n  NoContent = 204,\n  BadRequest = 400,\n  Unauthorized = 401,\n  Forbidden = 403,\n  RequestTimeout = 408,\n  InternalServerError = 500,\n}\n\nexport function isSuccessCode(statusCode: number) {\n  return statusCode >= HttpStatusCodes.Success && statusCode < HttpStatusCodes.BadRequest;\n}\n\nexport default HttpStatusCodes;\n", "import ProtocolMessage from 'common/lib/types/protocolmessage';\nimport * as Utils from 'common/lib/util/utils';\nimport Protocol, { PendingMessage } from './protocol';\nimport Defaults, { getAgentString } from 'common/lib/util/defaults';\nimport Platform from 'common/platform';\nimport EventEmitter from '../util/eventemitter';\nimport MessageQueue from './messagequeue';\nimport Logger from '../util/logger';\nimport ConnectionStateChange from 'common/lib/client/connectionstatechange';\nimport ConnectionErrors, { isRetriable } from './connectionerrors';\nimport ErrorInfo, { IPartialErrorInfo, PartialErrorInfo } from 'common/lib/types/errorinfo';\nimport Auth from 'common/lib/client/auth';\nimport Message from 'common/lib/types/message';\nimport Multicaster, { MulticasterInstance } from 'common/lib/util/multicaster';\nimport WebSocketTransport from './websockettransport';\nimport Transport, { TransportCtor } from './transport';\nimport * as API from '../../../../ably';\nimport { ErrCallback } from 'common/types/utils';\nimport HttpStatusCodes from 'common/constants/HttpStatusCodes';\n\ntype Realtime = any;\ntype ClientOptions = any;\n\nlet globalObject = typeof global !== 'undefined' ? global : typeof window !== 'undefined' ? window : self;\n\nconst haveWebStorage = () => typeof Platform.WebStorage !== 'undefined' && Platform.WebStorage?.localSupported;\nconst haveSessionStorage = () => typeof Platform.WebStorage !== 'undefined' && Platform.WebStorage?.sessionSupported;\nconst actions = ProtocolMessage.Action;\nconst noop = function () {};\nconst transportPreferenceName = 'ably-transport-preference';\n\nconst sessionRecoveryName = 'ably-connection-recovery';\nfunction getSessionRecoverData() {\n  return haveSessionStorage() && Platform.WebStorage?.getSession?.(sessionRecoveryName);\n}\nfunction setSessionRecoverData(value: any) {\n  return haveSessionStorage() && Platform.WebStorage?.setSession?.(sessionRecoveryName, value);\n}\nfunction clearSessionRecoverData() {\n  return haveSessionStorage() && Platform.WebStorage?.removeSession?.(sessionRecoveryName);\n}\n\nfunction betterTransportThan(a: Transport, b: Transport) {\n  return (\n    Utils.arrIndexOf(Platform.Defaults.transportPreferenceOrder, a.shortName) >\n    Utils.arrIndexOf(Platform.Defaults.transportPreferenceOrder, b.shortName)\n  );\n}\n\nfunction bundleWith(dest: ProtocolMessage, src: ProtocolMessage, maxSize: number) {\n  let action;\n  if (dest.channel !== src.channel) {\n    /* RTL6d3 */\n    return false;\n  }\n  if ((action = dest.action) !== actions.PRESENCE && action !== actions.MESSAGE) {\n    /* RTL6d - can only bundle messages or presence */\n    return false;\n  }\n  if (action !== src.action) {\n    /* RTL6d4 */\n    return false;\n  }\n  const kind = action === actions.PRESENCE ? 'presence' : 'messages',\n    proposed = (dest as Record<string, any>)[kind].concat((src as Record<string, any>)[kind]),\n    size = Message.getMessagesSize(proposed);\n  if (size > maxSize) {\n    /* RTL6d1 */\n    return false;\n  }\n  if (!Utils.allSame(proposed, 'clientId')) {\n    /* RTL6d2 */\n    return false;\n  }\n  if (\n    !Utils.arrEvery(proposed, function (msg: Message) {\n      return !msg.id;\n    })\n  ) {\n    /* RTL6d7 */\n    return false;\n  }\n  /* we're good to go! */\n  (dest as Record<string, any>)[kind] = proposed;\n  return true;\n}\n\ntype RecoveryContext = {\n  connectionKey: string;\n  msgSerial: number;\n  channelSerials: { [name: string]: string };\n};\n\nfunction decodeRecoveryKey(recoveryKey: string): RecoveryContext | null {\n  try {\n    return JSON.parse(recoveryKey);\n  } catch (e) {\n    return null;\n  }\n}\n\nexport class TransportParams {\n  options: ClientOptions;\n  host: string | null;\n  mode: string;\n  format?: Utils.Format;\n  connectionKey?: string;\n  stream?: any;\n  heartbeats?: boolean;\n\n  constructor(options: ClientOptions, host: string | null, mode: string, connectionKey?: string) {\n    this.options = options;\n    this.host = host;\n    this.mode = mode;\n    this.connectionKey = connectionKey;\n    this.format = options.useBinaryProtocol ? Utils.Format.msgpack : Utils.Format.json;\n  }\n\n  getConnectParams(authParams: Record<string, unknown>): Record<string, string> {\n    const params = authParams ? Utils.copy(authParams) : {};\n    const options = this.options;\n    switch (this.mode) {\n      case 'upgrade':\n        params.upgrade = this.connectionKey as string;\n        break;\n      case 'resume':\n        params.resume = this.connectionKey as string;\n        break;\n      case 'recover': {\n        const recoveryContext = decodeRecoveryKey(options.recover);\n        if (recoveryContext) {\n          params.recover = recoveryContext.connectionKey;\n        }\n        break;\n      }\n      default:\n    }\n    if (options.clientId !== undefined) {\n      params.clientId = options.clientId;\n    }\n    if (options.echoMessages === false) {\n      params.echo = 'false';\n    }\n    if (this.format !== undefined) {\n      params.format = this.format;\n    }\n    if (this.stream !== undefined) {\n      params.stream = this.stream;\n    }\n    if (this.heartbeats !== undefined) {\n      params.heartbeats = this.heartbeats;\n    }\n    params.v = Defaults.protocolVersion;\n    params.agent = encodeURIComponent(getAgentString(this.options));\n    if (options.transportParams !== undefined) {\n      Utils.mixin(params, options.transportParams);\n    }\n    return params as Record<string, string>;\n  }\n\n  toString(): string {\n    let result = '[mode=' + this.mode;\n    if (this.host) {\n      result += ',host=' + this.host;\n    }\n    if (this.connectionKey) {\n      result += ',connectionKey=' + this.connectionKey;\n    }\n    if (this.format) {\n      result += ',format=' + this.format;\n    }\n    result += ']';\n\n    return result;\n  }\n}\n\ntype ConnectionState = {\n  state: string;\n  terminal?: boolean;\n  queueEvents?: boolean;\n  sendEvents?: boolean;\n  failState?: string;\n  retryDelay?: number;\n  forceQueueEvents?: boolean;\n  retryImmediately?: boolean;\n  error?: IPartialErrorInfo;\n};\n\nclass ConnectionManager extends EventEmitter {\n  realtime: Realtime;\n  options: ClientOptions;\n  states: Record<string, ConnectionState>;\n  state: ConnectionState;\n  errorReason: IPartialErrorInfo | string | null;\n  queuedMessages: MessageQueue;\n  msgSerial: number;\n  connectionDetails?: Record<string, any>;\n  connectionId?: string;\n  connectionKey?: string;\n  connectionStateTtl: number;\n  maxIdleInterval: number | null;\n  transports: string[];\n  baseTransport: string;\n  upgradeTransports: string[];\n  transportPreference: string | null;\n  httpHosts: string[];\n  activeProtocol: null | Protocol;\n  proposedTransports: Transport[];\n  pendingTransports: Transport[];\n  host: string | null;\n  lastAutoReconnectAttempt: number | null;\n  lastActivity: number | null;\n  forceFallbackHost: boolean;\n  connectCounter: number;\n  transitionTimer?: number | NodeJS.Timeout | null;\n  suspendTimer?: number | NodeJS.Timeout | null;\n  retryTimer?: number | NodeJS.Timeout | null;\n  disconnectedRetryCount: number = 0;\n  pendingChannelMessagesState: {\n    // Whether a message is currently being processed\n    isProcessing: boolean;\n    // The messages remaining to be processed (excluding any message currently being processed)\n    queue: { message: ProtocolMessage; transport: Transport }[];\n  } = { isProcessing: false, queue: [] };\n\n  constructor(realtime: Realtime, options: ClientOptions) {\n    super();\n    ConnectionManager.initTransports();\n    this.realtime = realtime;\n    this.options = options;\n    const timeouts = options.timeouts;\n    /* connectingTimeout: leave preferenceConnectTimeout (~6s) to try the\n     * preference transport, then realtimeRequestTimeout (~10s) to establish\n     * the base transport in case that fails */\n    const connectingTimeout = timeouts.preferenceConnectTimeout + timeouts.realtimeRequestTimeout;\n    this.states = {\n      initialized: {\n        state: 'initialized',\n        terminal: false,\n        queueEvents: true,\n        sendEvents: false,\n        failState: 'disconnected',\n      },\n      connecting: {\n        state: 'connecting',\n        terminal: false,\n        queueEvents: true,\n        sendEvents: false,\n        retryDelay: connectingTimeout,\n        failState: 'disconnected',\n      },\n      connected: {\n        state: 'connected',\n        terminal: false,\n        queueEvents: false,\n        sendEvents: true,\n        failState: 'disconnected',\n      },\n      synchronizing: {\n        state: 'connected',\n        terminal: false,\n        queueEvents: true,\n        sendEvents: false,\n        forceQueueEvents: true,\n        failState: 'disconnected',\n      },\n      disconnected: {\n        state: 'disconnected',\n        terminal: false,\n        queueEvents: true,\n        sendEvents: false,\n        retryDelay: timeouts.disconnectedRetryTimeout,\n        failState: 'disconnected',\n      },\n      suspended: {\n        state: 'suspended',\n        terminal: false,\n        queueEvents: false,\n        sendEvents: false,\n        retryDelay: timeouts.suspendedRetryTimeout,\n        failState: 'suspended',\n      },\n      closing: {\n        state: 'closing',\n        terminal: false,\n        queueEvents: false,\n        sendEvents: false,\n        retryDelay: timeouts.realtimeRequestTimeout,\n        failState: 'closed',\n      },\n      closed: { state: 'closed', terminal: true, queueEvents: false, sendEvents: false, failState: 'closed' },\n      failed: { state: 'failed', terminal: true, queueEvents: false, sendEvents: false, failState: 'failed' },\n    };\n    this.state = this.states.initialized;\n    this.errorReason = null;\n\n    this.queuedMessages = new MessageQueue();\n    this.msgSerial = 0;\n    this.connectionDetails = undefined;\n    this.connectionId = undefined;\n    this.connectionKey = undefined;\n    this.connectionStateTtl = timeouts.connectionStateTtl;\n    this.maxIdleInterval = null;\n\n    this.transports = Utils.intersect(\n      options.transports || Defaults.defaultTransports,\n      ConnectionManager.supportedTransports\n    );\n    /* baseTransports selects the leftmost transport in the Defaults.baseTransportOrder list\n     * that's both requested and supported. */\n    this.baseTransport = Utils.intersect(Defaults.baseTransportOrder, this.transports)[0];\n    this.upgradeTransports = Utils.intersect(this.transports, Defaults.upgradeTransports);\n    this.transportPreference = null;\n\n    this.httpHosts = Defaults.getHosts(options);\n    this.activeProtocol = null;\n    this.proposedTransports = [];\n    this.pendingTransports = [];\n    this.host = null;\n    this.lastAutoReconnectAttempt = null;\n    this.lastActivity = null;\n    this.forceFallbackHost = false;\n    this.connectCounter = 0;\n\n    Logger.logAction(Logger.LOG_MINOR, 'Realtime.ConnectionManager()', 'started');\n    Logger.logAction(\n      Logger.LOG_MICRO,\n      'Realtime.ConnectionManager()',\n      'requested transports = [' + (options.transports || Defaults.defaultTransports) + ']'\n    );\n    Logger.logAction(\n      Logger.LOG_MICRO,\n      'Realtime.ConnectionManager()',\n      'available transports = [' + this.transports + ']'\n    );\n    Logger.logAction(Logger.LOG_MICRO, 'Realtime.ConnectionManager()', 'http hosts = [' + this.httpHosts + ']');\n\n    if (!this.transports.length) {\n      const msg = 'no requested transports available';\n      Logger.logAction(Logger.LOG_ERROR, 'realtime.ConnectionManager()', msg);\n      throw new Error(msg);\n    }\n\n    const addEventListener = Platform.Config.addEventListener;\n    if (addEventListener) {\n      /* intercept close event in browser to persist connection id if requested */\n      if (haveSessionStorage() && typeof options.recover === 'function') {\n        /* Usually can't use bind as not supported in IE8, but IE doesn't support sessionStorage, so... */\n        addEventListener('beforeunload', this.persistConnection.bind(this));\n      }\n\n      if (options.closeOnUnload === true) {\n        addEventListener('beforeunload', () => {\n          Logger.logAction(\n            Logger.LOG_MAJOR,\n            'Realtime.ConnectionManager()',\n            'beforeunload event has triggered the connection to close as closeOnUnload is true'\n          );\n          this.requestState({ state: 'closing' });\n        });\n      }\n\n      /* Listen for online and offline events */\n      addEventListener('online', () => {\n        if (this.state == this.states.disconnected || this.state == this.states.suspended) {\n          Logger.logAction(\n            Logger.LOG_MINOR,\n            'ConnectionManager caught browser \u2018online\u2019 event',\n            'reattempting connection'\n          );\n          this.requestState({ state: 'connecting' });\n        } else if (this.state == this.states.connecting) {\n          // RTN20c: if 'online' event recieved while CONNECTING, abandon connection attempt and retry\n          this.pendingTransports.forEach(function (transport) {\n            // Detach transport listeners to avoid connection state side effects from calling dispose\n            transport.off();\n          });\n          this.disconnectAllTransports();\n\n          this.startConnect();\n        }\n      });\n\n      addEventListener('offline', () => {\n        if (this.state == this.states.connected) {\n          Logger.logAction(\n            Logger.LOG_MINOR,\n            'ConnectionManager caught browser \u2018offline\u2019 event',\n            'disconnecting active transport'\n          );\n          // Not sufficient to just go to the 'disconnected' state, want to\n          // force all transports to reattempt the connection. Will immediately\n          // retry.\n          this.disconnectAllTransports();\n        }\n      });\n    }\n  }\n\n  /*********************\n   * transport management\n   *********************/\n\n  static supportedTransports: Record<string, TransportCtor> = {};\n\n  static initTransports() {\n    WebSocketTransport(ConnectionManager);\n    Utils.arrForEach(Platform.Transports, function (initFn) {\n      initFn(ConnectionManager);\n    });\n  }\n\n  createTransportParams(host: string | null, mode: string): TransportParams {\n    return new TransportParams(this.options, host, mode, this.connectionKey);\n  }\n\n  getTransportParams(callback: Function): void {\n    const decideMode = (modeCb: Function) => {\n      if (this.connectionKey) {\n        modeCb('resume');\n        return;\n      }\n\n      if (typeof this.options.recover === 'string') {\n        modeCb('recover');\n        return;\n      }\n\n      const recoverFn = this.options.recover,\n        lastSessionData = getSessionRecoverData();\n      if (lastSessionData && typeof recoverFn === 'function') {\n        Logger.logAction(\n          Logger.LOG_MINOR,\n          'ConnectionManager.getTransportParams()',\n          'Calling clientOptions-provided recover function with last session data'\n        );\n        recoverFn(lastSessionData, (shouldRecover?: boolean) => {\n          if (shouldRecover) {\n            this.options.recover = lastSessionData.recoveryKey;\n            modeCb('recover');\n          } else {\n            modeCb('clean');\n          }\n        });\n        return;\n      }\n      modeCb('clean');\n    };\n\n    decideMode((mode: string) => {\n      const transportParams = this.createTransportParams(null, mode);\n      if (mode === 'recover') {\n        Logger.logAction(\n          Logger.LOG_MINOR,\n          'ConnectionManager.getTransportParams()',\n          'Transport recovery mode = recover; recoveryKey = ' + this.options.recover\n        );\n        const recoveryContext = decodeRecoveryKey(this.options.recover);\n        if (recoveryContext) {\n          this.msgSerial = recoveryContext.msgSerial;\n        }\n      } else {\n        Logger.logAction(\n          Logger.LOG_MINOR,\n          'ConnectionManager.getTransportParams()',\n          'Transport params = ' + transportParams.toString()\n        );\n      }\n      callback(transportParams);\n    });\n  }\n\n  /**\n   * Attempt to connect using a given transport\n   * @param transportParams\n   * @param candidate, the transport to try\n   * @param callback\n   */\n  tryATransport(transportParams: TransportParams, candidate: string, callback: Function): void {\n    Logger.logAction(Logger.LOG_MICRO, 'ConnectionManager.tryATransport()', 'trying ' + candidate);\n\n    Transport.tryConnect(\n      ConnectionManager.supportedTransports[candidate],\n      this,\n      this.realtime.auth,\n      transportParams,\n      (wrappedErr: { error: ErrorInfo; event: string } | null, transport?: Transport) => {\n        const state = this.state;\n        if (state == this.states.closing || state == this.states.closed || state == this.states.failed) {\n          if (transport) {\n            Logger.logAction(\n              Logger.LOG_MINOR,\n              'ConnectionManager.tryATransport()',\n              'connection ' + state.state + ' while we were attempting the transport; closing ' + transport\n            );\n            transport.close();\n          }\n          callback(true);\n          return;\n        }\n\n        if (wrappedErr) {\n          Logger.logAction(\n            Logger.LOG_MINOR,\n            'ConnectionManager.tryATransport()',\n            'transport ' + candidate + ' ' + wrappedErr.event + ', err: ' + wrappedErr.error.toString()\n          );\n\n          /* Comet transport onconnect token errors can be dealt with here.\n           * Websocket ones only happen after the transport claims to be viable,\n           * so are dealt with as non-onconnect token errors */\n          if (\n            Auth.isTokenErr(wrappedErr.error) &&\n            !(this.errorReason && Auth.isTokenErr(this.errorReason as ErrorInfo))\n          ) {\n            this.errorReason = wrappedErr.error;\n            /* re-get a token and try again */\n            this.realtime.auth._forceNewToken(null, null, (err: ErrorInfo) => {\n              if (err) {\n                this.actOnErrorFromAuthorize(err);\n                return;\n              }\n              this.tryATransport(transportParams, candidate, callback);\n            });\n          } else if (wrappedErr.event === 'failed') {\n            /* Error that's fatal to the connection */\n            this.notifyState({ state: 'failed', error: wrappedErr.error });\n            callback(true);\n          } else if (wrappedErr.event === 'disconnected') {\n            if (!isRetriable(wrappedErr.error)) {\n              /* Error received from the server that does not call for trying a fallback host, eg a rate limit */\n              this.notifyState({ state: this.states.connecting.failState as string, error: wrappedErr.error });\n              callback(true);\n            } else {\n              /* Error with that transport only; continue trying other fallback hosts */\n              callback(false);\n            }\n          }\n          return;\n        }\n\n        Logger.logAction(\n          Logger.LOG_MICRO,\n          'ConnectionManager.tryATransport()',\n          'viable transport ' + candidate + '; setting pending'\n        );\n        this.setTransportPending(transport as Transport, transportParams);\n        callback(null, transport);\n      }\n    );\n  }\n\n  /**\n   * Called when a transport is indicated to be viable, and the ConnectionManager\n   * expects to activate this transport as soon as it is connected.\n   * @param transport\n   * @param transportParams\n   */\n  setTransportPending(transport: Transport, transportParams: TransportParams): void {\n    const mode = transportParams.mode;\n    Logger.logAction(\n      Logger.LOG_MINOR,\n      'ConnectionManager.setTransportPending()',\n      'transport = ' + transport + '; mode = ' + mode\n    );\n\n    Utils.arrDeleteValue(this.proposedTransports, transport);\n    this.pendingTransports.push(transport);\n    const optimalTransport =\n      Platform.Defaults.transportPreferenceOrder[Platform.Defaults.transportPreferenceOrder.length - 1];\n    transport.once('connected', (error: ErrorInfo, connectionId: string, connectionDetails: Record<string, any>) => {\n      if (mode == 'upgrade' && this.activeProtocol) {\n        /*  if ws and xhrs are connecting in parallel, delay xhrs activation to let ws go ahead */\n        if (\n          transport.shortName !== optimalTransport &&\n          Utils.arrIn(this.getUpgradePossibilities(), optimalTransport) &&\n          this.activeProtocol\n        ) {\n          setTimeout(() => {\n            this.scheduleTransportActivation(error, transport, connectionId, connectionDetails);\n          }, this.options.timeouts.parallelUpgradeDelay);\n        } else {\n          this.scheduleTransportActivation(error, transport, connectionId, connectionDetails);\n        }\n      } else {\n        this.activateTransport(error, transport, connectionId, connectionDetails);\n\n        /* allow connectImpl to start the upgrade process if needed, but allow\n         * other event handlers, including activating the transport, to run first */\n        Platform.Config.nextTick(() => {\n          this.connectImpl(transportParams);\n        });\n      }\n\n      if (mode === 'recover' && this.options.recover) {\n        /* After a successful recovery, we unpersist, as a recovery key cannot\n         * be used more than once */\n        this.options.recover = null;\n        this.unpersistConnection();\n      }\n    });\n\n    const self = this;\n    transport.on(['disconnected', 'closed', 'failed'], function (this: { event: string }, error: ErrorInfo) {\n      self.deactivateTransport(transport, this.event, error);\n    });\n\n    this.emit('transport.pending', transport);\n  }\n\n  /**\n   * Called when an upgrade transport is connected,\n   * to schedule the activation of that transport.\n   * @param error\n   * @param transport\n   * @param connectionId\n   * @param connectionDetails\n   */\n  scheduleTransportActivation(\n    error: ErrorInfo,\n    transport: Transport,\n    connectionId: string,\n    connectionDetails: Record<string, any>\n  ): void {\n    const currentTransport = this.activeProtocol && this.activeProtocol.getTransport(),\n      abandon = () => {\n        transport.disconnect();\n        Utils.arrDeleteValue(this.pendingTransports, transport);\n      };\n\n    if (this.state !== this.states.connected && this.state !== this.states.connecting) {\n      /* This is most likely to happen for the delayed XHRs, when XHRs and ws are scheduled in parallel*/\n      Logger.logAction(\n        Logger.LOG_MINOR,\n        'ConnectionManager.scheduleTransportActivation()',\n        'Current connection state (' +\n          this.state.state +\n          (this.state === this.states.synchronizing ? ', but with an upgrade already in progress' : '') +\n          ') is not valid to upgrade in; abandoning upgrade to ' +\n          transport.shortName\n      );\n      abandon();\n      return;\n    }\n\n    if (currentTransport && !betterTransportThan(transport, currentTransport)) {\n      Logger.logAction(\n        Logger.LOG_MINOR,\n        'ConnectionManager.scheduleTransportActivation()',\n        'Proposed transport ' +\n          transport.shortName +\n          ' is no better than current active transport ' +\n          currentTransport.shortName +\n          ' - abandoning upgrade'\n      );\n      abandon();\n      return;\n    }\n\n    Logger.logAction(\n      Logger.LOG_MINOR,\n      'ConnectionManager.scheduleTransportActivation()',\n      'Scheduling transport upgrade; transport = ' + transport\n    );\n\n    let oldProtocol: Protocol | null = null;\n\n    if (!transport.isConnected) {\n      /* This is only possible if the xhr streaming transport was disconnected during the parallelUpgradeDelay */\n      Logger.logAction(\n        Logger.LOG_MINOR,\n        'ConnectionManager.scheduleTransportActivation()',\n        'Proposed transport ' + transport.shortName + 'is no longer connected; abandoning upgrade'\n      );\n      abandon();\n      return;\n    }\n\n    if (this.state === this.states.connected) {\n      Logger.logAction(\n        Logger.LOG_MICRO,\n        'ConnectionManager.scheduleTransportActivation()',\n        'Currently connected, so temporarily pausing events until the upgrade is complete'\n      );\n      this.state = this.states.synchronizing;\n      oldProtocol = this.activeProtocol;\n    } else if (this.state !== this.states.connecting) {\n      /* Note: upgrading from the connecting state is valid if the old active\n       * transport was deactivated after the upgrade transport first connected;\n       * see logic in deactivateTransport */\n      Logger.logAction(\n        Logger.LOG_MINOR,\n        'ConnectionManager.scheduleTransportActivation()',\n        'Current connection state (' +\n          this.state.state +\n          (this.state === this.states.synchronizing ? ', but with an upgrade already in progress' : '') +\n          ') is not valid to upgrade in; abandoning upgrade to ' +\n          transport.shortName\n      );\n      abandon();\n      return;\n    }\n\n    Logger.logAction(\n      Logger.LOG_MINOR,\n      'ConnectionManager.scheduleTransportActivation()',\n      'Syncing transport; transport = ' + transport\n    );\n\n    const finishUpgrade = () => {\n      Logger.logAction(\n        Logger.LOG_MINOR,\n        'ConnectionManager.scheduleTransportActivation()',\n        'Activating transport; transport = ' + transport\n      );\n\n      // Send ACTIVATE to tell the server to make this transport the\n      // active transport, which suspends channels until we re-attach.\n      transport.send(\n        ProtocolMessage.fromValues({\n          action: actions.ACTIVATE,\n        })\n      );\n\n      this.activateTransport(error, transport, connectionId, connectionDetails);\n      /* Restore pre-sync state. If state has changed in the meantime,\n       * don't touch it -- since the websocket transport waits a tick before\n       * disposing itself, it's possible for it to have happily synced\n       * without err while, unknown to it, the connection has closed in the\n       * meantime and the ws transport is scheduled for death */\n      if (this.state === this.states.synchronizing) {\n        Logger.logAction(\n          Logger.LOG_MICRO,\n          'ConnectionManager.scheduleTransportActivation()',\n          'Pre-upgrade protocol idle, sending queued messages on upgraded transport; transport = ' + transport\n        );\n        this.state = this.states.connected;\n      } else {\n        Logger.logAction(\n          Logger.LOG_MINOR,\n          'ConnectionManager.scheduleTransportActivation()',\n          'Pre-upgrade protocol idle, but state is now ' + this.state.state + ', so leaving unchanged'\n        );\n      }\n      if (this.state.sendEvents) {\n        this.sendQueuedMessages();\n      }\n    };\n\n    /* Wait until sync is done and old transport is idle before activating new transport. This\n     * guarantees that messages arrive at realtime in the same order they are sent.\n     *\n     * If a message times out on the old transport, since it's still the active transport the\n     * message will be requeued. deactivateTransport will see the pending transport and notify\n     * the `connecting` state without starting a new connection, so the new transport can take\n     * over once deactivateTransport clears the old protocol's queue.\n     *\n     * If there is no old protocol, that meant that we weren't in the connected state at the\n     * beginning of the sync - likely the base transport died just before the sync. So can just\n     * finish the upgrade. If we're actually in closing/failed rather than connecting, that's\n     * fine, activatetransport will deal with that. */\n    if (oldProtocol) {\n      /* Most of the time this will be already true: the new-transport sync will have given\n       * enough time for in-flight messages on the old transport to complete. */\n      oldProtocol.onceIdle(finishUpgrade);\n    } else {\n      finishUpgrade();\n    }\n  }\n\n  /**\n   * Called when a transport is connected, and the connectionmanager decides that\n   * it will now be the active transport. Returns whether or not it activated\n   * the transport (if the connection is closing/closed it will choose not to).\n   * @param transport the transport instance\n   * @param connectionId the id of the new active connection\n   * @param connectionDetails the details of the new active connection\n   */\n  activateTransport(\n    error: ErrorInfo,\n    transport: Transport,\n    connectionId: string,\n    connectionDetails: Record<string, any>\n  ): boolean {\n    Logger.logAction(Logger.LOG_MINOR, 'ConnectionManager.activateTransport()', 'transport = ' + transport);\n    if (error) {\n      Logger.logAction(Logger.LOG_ERROR, 'ConnectionManager.activateTransport()', 'error = ' + error);\n    }\n    if (connectionId) {\n      Logger.logAction(Logger.LOG_MICRO, 'ConnectionManager.activateTransport()', 'connectionId =  ' + connectionId);\n    }\n    if (connectionDetails) {\n      Logger.logAction(\n        Logger.LOG_MICRO,\n        'ConnectionManager.activateTransport()',\n        'connectionDetails =  ' + JSON.stringify(connectionDetails)\n      );\n    }\n\n    this.persistTransportPreference(transport);\n\n    /* if the connectionmanager moved to the closing/closed state before this\n     * connection event, then we won't activate this transport */\n    const existingState = this.state,\n      connectedState = this.states.connected.state;\n    Logger.logAction(\n      Logger.LOG_MINOR,\n      'ConnectionManager.activateTransport()',\n      'current state = ' + existingState.state\n    );\n    if (\n      existingState.state == this.states.closing.state ||\n      existingState.state == this.states.closed.state ||\n      existingState.state == this.states.failed.state\n    ) {\n      Logger.logAction(\n        Logger.LOG_MINOR,\n        'ConnectionManager.activateTransport()',\n        'Disconnecting transport and abandoning'\n      );\n      transport.disconnect();\n      return false;\n    }\n\n    /* remove this transport from pending transports */\n    Utils.arrDeleteValue(this.pendingTransports, transport);\n\n    /* if the transport is not connected then don't activate it */\n    if (!transport.isConnected) {\n      Logger.logAction(\n        Logger.LOG_MINOR,\n        'ConnectionManager.activateTransport()',\n        'Declining to activate transport ' + transport + ' since it appears to no longer be connected'\n      );\n      return false;\n    }\n\n    /* the given transport is connected; this will immediately\n     * take over as the active transport */\n    const existingActiveProtocol = this.activeProtocol;\n    this.activeProtocol = new Protocol(transport);\n    this.host = transport.params.host;\n\n    const connectionKey = connectionDetails.connectionKey;\n    if (connectionKey && this.connectionKey != connectionKey) {\n      this.setConnection(connectionId, connectionDetails, !!error);\n    }\n\n    /* Rebroadcast any new connectionDetails from the active transport, which\n     * can come at any time (eg following a reauth), and emit an RTN24 UPDATE\n     * event. (Listener added on nextTick because we're in a transport.on('connected')\n     * callback at the moment; if we add it now we'll be adding it to the end\n     * of the listeners array and it'll be called immediately) */\n    this.onConnectionDetailsUpdate(connectionDetails, transport);\n    Platform.Config.nextTick(() => {\n      transport.on(\n        'connected',\n        (connectedErr: ErrorInfo, _connectionId: string, connectionDetails: Record<string, any>) => {\n          this.onConnectionDetailsUpdate(connectionDetails, transport);\n          this.emit('update', new ConnectionStateChange(connectedState, connectedState, null, connectedErr));\n        }\n      );\n    });\n\n    /* If previously not connected, notify the state change (including any\n     * error). */\n    if (existingState.state === this.states.connected.state) {\n      if (error) {\n        /* if upgrading without error, leave any existing errorReason alone */\n        this.errorReason = this.realtime.connection.errorReason = error;\n        /* Only bother emitting an upgrade if there's an error; otherwise it's\n         * just a transport upgrade, so auth details won't have changed */\n        this.emit('update', new ConnectionStateChange(connectedState, connectedState, null, error));\n      }\n    } else {\n      this.notifyState({ state: 'connected', error: error });\n      this.errorReason = this.realtime.connection.errorReason = error || null;\n    }\n\n    /* Send after the connection state update, as Channels hooks into this to\n     * resend attaches on a new transport if necessary */\n    this.emit('transport.active', transport);\n\n    /* Gracefully terminate existing protocol */\n    if (existingActiveProtocol) {\n      if (existingActiveProtocol.messageQueue.count() > 0) {\n        /* We could just requeue pending messages on the new transport, but\n         * actually this should never happen: transports should only take over\n         * from other active transports when upgrading, and upgrading waits for\n         * the old transport to be idle. So log an error. */\n        Logger.logAction(\n          Logger.LOG_ERROR,\n          'ConnectionManager.activateTransport()',\n          'Previous active protocol (for transport ' +\n            existingActiveProtocol.transport.shortName +\n            ', new one is ' +\n            transport.shortName +\n            ') finishing with ' +\n            existingActiveProtocol.messageQueue.count() +\n            ' messages still pending'\n        );\n      }\n      if (existingActiveProtocol.transport === transport) {\n        const msg =\n          'Assumption violated: activating a transport that was also the transport for the previous active protocol; transport = ' +\n          transport.shortName +\n          '; stack = ' +\n          new Error().stack;\n        Logger.logAction(Logger.LOG_ERROR, 'ConnectionManager.activateTransport()', msg);\n      } else {\n        existingActiveProtocol.finish();\n      }\n    }\n\n    /* Terminate any other pending transport(s), and\n     * abort any not-yet-pending transport attempts */\n    Utils.safeArrForEach(this.pendingTransports, (pendingTransport) => {\n      if (pendingTransport === transport) {\n        const msg =\n          'Assumption violated: activating a transport that is still marked as a pending transport; transport = ' +\n          transport.shortName +\n          '; stack = ' +\n          new Error().stack;\n        Logger.logAction(Logger.LOG_ERROR, 'ConnectionManager.activateTransport()', msg);\n        Utils.arrDeleteValue(this.pendingTransports, transport);\n      } else {\n        pendingTransport.disconnect();\n      }\n    });\n    Utils.safeArrForEach(this.proposedTransports, (proposedTransport: Transport) => {\n      if (proposedTransport === transport) {\n        Logger.logAction(\n          Logger.LOG_ERROR,\n          'ConnectionManager.activateTransport()',\n          'Assumption violated: activating a transport that is still marked as a proposed transport; transport = ' +\n            transport.shortName +\n            '; stack = ' +\n            new Error().stack\n        );\n        Utils.arrDeleteValue(this.proposedTransports, transport);\n      } else {\n        proposedTransport.dispose();\n      }\n    });\n\n    return true;\n  }\n\n  /**\n   * Called when a transport is no longer the active transport. This can occur\n   * in any transport connection state.\n   * @param transport\n   */\n  deactivateTransport(transport: Transport, state: string, error: ErrorInfo): void {\n    const currentProtocol = this.activeProtocol,\n      wasActive = currentProtocol && currentProtocol.getTransport() === transport,\n      wasPending = Utils.arrDeleteValue(this.pendingTransports, transport),\n      wasProposed = Utils.arrDeleteValue(this.proposedTransports, transport),\n      noTransportsScheduledForActivation = this.noTransportsScheduledForActivation();\n\n    Logger.logAction(Logger.LOG_MINOR, 'ConnectionManager.deactivateTransport()', 'transport = ' + transport);\n    Logger.logAction(\n      Logger.LOG_MINOR,\n      'ConnectionManager.deactivateTransport()',\n      'state = ' +\n        state +\n        (wasActive ? '; was active' : wasPending ? '; was pending' : wasProposed ? '; was proposed' : '') +\n        (noTransportsScheduledForActivation ? '' : '; another transport is scheduled for activation')\n    );\n    if (error && error.message)\n      Logger.logAction(Logger.LOG_MICRO, 'ConnectionManager.deactivateTransport()', 'reason =  ' + error.message);\n\n    if (wasActive) {\n      Logger.logAction(\n        Logger.LOG_MICRO,\n        'ConnectionManager.deactivateTransport()',\n        'Getting, clearing, and requeuing ' +\n          (this.activeProtocol as Protocol).messageQueue.count() +\n          ' pending messages'\n      );\n      this.queuePendingMessages((currentProtocol as Protocol).getPendingMessages());\n      /* Clear any messages we requeue to allow the protocol to become idle.\n       * In case of an upgrade, this will trigger an immediate activation of\n       * the upgrade transport, so delay a tick so this transport can finish\n       * deactivating */\n      Platform.Config.nextTick(function () {\n        (currentProtocol as Protocol).clearPendingMessages();\n      });\n      this.activeProtocol = this.host = null;\n    }\n\n    this.emit('transport.inactive', transport);\n\n    /* this transport state change is a state change for the connectionmanager if\n     * - the transport was the active transport and there are no transports\n     *   which are connected and scheduled for activation, just waiting for the\n     *   active transport to finish what its doing; or\n     * - the transport was the active transport and the error was fatal (so\n     *   unhealable by another transport); or\n     * - there is no active transport, and this is the last remaining\n     *   pending transport (so we were in the connecting state)\n     */\n    if (\n      (wasActive && noTransportsScheduledForActivation) ||\n      (wasActive && state === 'failed') ||\n      state === 'closed' ||\n      (currentProtocol === null && wasPending && this.pendingTransports.length === 0)\n    ) {\n      /* If we're disconnected with a 5xx we need to try fallback hosts\n       * (RTN14d), but (a) due to how the upgrade sequence works, the\n       * host/transport selection sequence only cares about getting to\n       * `preconnect` (eg establishing a websocket) getting a `disconnected`\n       * protocol message afterwards is too late; and (b) host retry only\n       * applies to connectBase unless the stored preference transport doesn't\n       * work. We solve this by unpersisting the transport preference and\n       * setting an instance variable to force fallback hosts to be used (if\n       * any) here. Bit of a kludge, but no real better alternatives without\n       * rewriting the entire thing */\n      if (state === 'disconnected' && error && (error.statusCode as number) > 500 && this.httpHosts.length > 1) {\n        this.unpersistTransportPreference();\n        this.forceFallbackHost = true;\n        /* and try to connect again to try a fallback host without waiting for the usual 15s disconnectedRetryTimeout */\n        this.notifyState({ state: state, error: error, retryImmediately: true });\n        return;\n      }\n\n      /* TODO remove below line once realtime sends token errors as DISCONNECTEDs */\n      const newConnectionState = state === 'failed' && Auth.isTokenErr(error) ? 'disconnected' : state;\n      this.notifyState({ state: newConnectionState, error: error });\n      return;\n    }\n\n    if (wasActive && state === 'disconnected' && this.state !== this.states.synchronizing) {\n      /* If we were active but there is another transport scheduled for\n       * activation, go into to the connecting state until that transport\n       * activates and sets us back to connected. (manually starting the\n       * transition timers in case that never happens). (If we were in the\n       * synchronizing state, then that's fine, the old transport just got its\n       * disconnected before the new one got the sync -- ignore it and keep\n       * waiting for the sync. If it fails we have a separate sync timer that\n       * will expire). */\n      Logger.logAction(\n        Logger.LOG_MICRO,\n        'ConnectionManager.deactivateTransport()',\n        'wasActive but another transport is connected and scheduled for activation, so going into the connecting state until it activates'\n      );\n      this.startSuspendTimer();\n      this.startTransitionTimer(this.states.connecting);\n      this.notifyState({ state: 'connecting', error: error });\n    }\n  }\n\n  /* Helper that returns true if there are no transports which are pending,\n   * have been connected, and are just waiting for onceNoPending to fire before\n   * being activated */\n  noTransportsScheduledForActivation(): boolean {\n    return (\n      Utils.isEmpty(this.pendingTransports) ||\n      this.pendingTransports.every(function (transport) {\n        return !transport.isConnected;\n      })\n    );\n  }\n\n  setConnection(connectionId: string, connectionDetails: Record<string, any>, hasConnectionError?: boolean): void {\n    /* if connectionKey changes but connectionId stays the same, then just a\n     * transport change on the same connection. If connectionId changes, we're\n     * on a new connection, with implications for msgSerial and channel state */\n    /* If no previous connectionId, don't reset the msgSerial as it may have\n     * been set by recover data (unless the recover failed) */\n    const prevConnId = this.connectionId,\n      connIdChanged = prevConnId && prevConnId !== connectionId,\n      recoverFailure = !prevConnId && hasConnectionError;\n    if (connIdChanged || recoverFailure) {\n      Logger.logAction(Logger.LOG_MINOR, 'ConnectionManager.setConnection()', 'Resetting msgSerial');\n      this.msgSerial = 0;\n      // RTN19a2: In the event of a new connectionId, previous msgSerials are\n      // meaningless.\n      this.queuedMessages.resetSendAttempted();\n    }\n    if (this.connectionId !== connectionId) {\n      Logger.logAction(\n        Logger.LOG_MINOR,\n        'ConnectionManager.setConnection()',\n        'New connectionId; reattaching any attached channels'\n      );\n    }\n    this.realtime.connection.id = this.connectionId = connectionId;\n    this.realtime.connection.key = this.connectionKey = connectionDetails.connectionKey;\n  }\n\n  clearConnection(): void {\n    this.realtime.connection.id = this.connectionId = undefined;\n    this.realtime.connection.key = this.connectionKey = undefined;\n    this.msgSerial = 0;\n    this.unpersistConnection();\n  }\n\n  createRecoveryKey(): string | null {\n    // RTN16g2.\n    if (!this.connectionKey) {\n      return null;\n    }\n\n    return JSON.stringify({\n      connectionKey: this.connectionKey,\n      msgSerial: this.msgSerial,\n      channelSerials: this.realtime.channels.channelSerials(),\n    });\n  }\n\n  checkConnectionStateFreshness(): void {\n    if (!this.lastActivity || !this.connectionId) {\n      return;\n    }\n\n    const sinceLast = Utils.now() - this.lastActivity;\n    if (sinceLast > this.connectionStateTtl + (this.maxIdleInterval as number)) {\n      Logger.logAction(\n        Logger.LOG_MINOR,\n        'ConnectionManager.checkConnectionStateFreshness()',\n        'Last known activity from realtime was ' + sinceLast + 'ms ago; discarding connection state'\n      );\n      this.clearConnection();\n      this.states.connecting.failState = 'suspended';\n    }\n  }\n\n  /**\n   * Called when the connectionmanager wants to persist transport\n   * state for later recovery. Only applicable in the browser context.\n   */\n  persistConnection(): void {\n    if (haveSessionStorage()) {\n      const recoveryKey = this.createRecoveryKey();\n      if (recoveryKey) {\n        setSessionRecoverData({\n          recoveryKey: recoveryKey,\n          disconnectedAt: Utils.now(),\n          location: globalObject.location,\n          clientId: this.realtime.auth.clientId,\n        });\n      }\n    }\n  }\n\n  /**\n   * Called when the connectionmanager wants to persist transport\n   * state for later recovery. Only applicable in the browser context.\n   */\n  unpersistConnection(): void {\n    clearSessionRecoverData();\n  }\n\n  /*********************\n   * state management\n   *********************/\n\n  getError(): IPartialErrorInfo | string {\n    return this.errorReason || this.getStateError();\n  }\n\n  getStateError(): ErrorInfo {\n    return (ConnectionErrors as Record<string, () => ErrorInfo>)[this.state.state]?.();\n  }\n\n  activeState(): boolean | void {\n    return this.state.queueEvents || this.state.sendEvents;\n  }\n\n  enactStateChange(stateChange: ConnectionStateChange): void {\n    const logLevel = stateChange.current === 'failed' ? Logger.LOG_ERROR : Logger.LOG_MAJOR;\n    Logger.logAction(\n      logLevel,\n      'Connection state',\n      stateChange.current + (stateChange.reason ? '; reason: ' + stateChange.reason : '')\n    );\n    Logger.logAction(\n      Logger.LOG_MINOR,\n      'ConnectionManager.enactStateChange',\n      'setting new state: ' +\n        stateChange.current +\n        '; reason = ' +\n        (stateChange.reason && (stateChange.reason as ErrorInfo).message)\n    );\n    const newState = (this.state = this.states[stateChange.current as string]);\n    if (stateChange.reason) {\n      this.errorReason = stateChange.reason;\n      this.realtime.connection.errorReason = stateChange.reason;\n    }\n    if (newState.terminal || newState.state === 'suspended') {\n      /* suspended is nonterminal, but once in the suspended state, realtime\n       * will have discarded our connection state, so futher connection\n       * attempts should start from scratch */\n      this.clearConnection();\n    }\n    this.emit('connectionstate', stateChange);\n  }\n\n  /****************************************\n   * ConnectionManager connection lifecycle\n   ****************************************/\n\n  startTransitionTimer(transitionState: ConnectionState): void {\n    Logger.logAction(\n      Logger.LOG_MINOR,\n      'ConnectionManager.startTransitionTimer()',\n      'transitionState: ' + transitionState.state\n    );\n\n    if (this.transitionTimer) {\n      Logger.logAction(Logger.LOG_MINOR, 'ConnectionManager.startTransitionTimer()', 'clearing already-running timer');\n      clearTimeout(this.transitionTimer as number);\n    }\n\n    this.transitionTimer = setTimeout(() => {\n      if (this.transitionTimer) {\n        this.transitionTimer = null;\n        Logger.logAction(\n          Logger.LOG_MINOR,\n          'ConnectionManager ' + transitionState.state + ' timer expired',\n          'requesting new state: ' + transitionState.failState\n        );\n        this.notifyState({ state: transitionState.failState as string });\n      }\n    }, transitionState.retryDelay);\n  }\n\n  cancelTransitionTimer(): void {\n    Logger.logAction(Logger.LOG_MINOR, 'ConnectionManager.cancelTransitionTimer()', '');\n    if (this.transitionTimer) {\n      clearTimeout(this.transitionTimer as number);\n      this.transitionTimer = null;\n    }\n  }\n\n  startSuspendTimer(): void {\n    if (this.suspendTimer) return;\n    this.suspendTimer = setTimeout(() => {\n      if (this.suspendTimer) {\n        this.suspendTimer = null;\n        Logger.logAction(\n          Logger.LOG_MINOR,\n          'ConnectionManager suspend timer expired',\n          'requesting new state: suspended'\n        );\n        this.states.connecting.failState = 'suspended';\n        this.notifyState({ state: 'suspended' });\n      }\n    }, this.connectionStateTtl);\n  }\n\n  checkSuspendTimer(state: string): void {\n    if (state !== 'disconnected' && state !== 'suspended' && state !== 'connecting') this.cancelSuspendTimer();\n  }\n\n  cancelSuspendTimer(): void {\n    this.states.connecting.failState = 'disconnected';\n    if (this.suspendTimer) {\n      clearTimeout(this.suspendTimer as number);\n      this.suspendTimer = null;\n    }\n  }\n\n  startRetryTimer(interval: number): void {\n    this.retryTimer = setTimeout(() => {\n      Logger.logAction(Logger.LOG_MINOR, 'ConnectionManager retry timer expired', 'retrying');\n      this.retryTimer = null;\n      this.requestState({ state: 'connecting' });\n    }, interval);\n  }\n\n  cancelRetryTimer(): void {\n    if (this.retryTimer) {\n      clearTimeout(this.retryTimer as NodeJS.Timeout);\n      this.retryTimer = null;\n    }\n  }\n\n  notifyState(indicated: ConnectionState): void {\n    const state = indicated.state;\n\n    /* We retry immediately if:\n     * - something disconnects us while we're connected, or\n     * - a viable (but not yet active) transport fails due to a token error (so\n     *   this.errorReason will be set, and startConnect will do a forced\n     *   authorize). If this.errorReason is already set (to a token error),\n     *   then there has been at least one previous attempt to connect that also\n     *   failed for a token error, so by RTN14b we go to DISCONNECTED and wait\n     *   before trying again */\n    const retryImmediately =\n      state === 'disconnected' &&\n      (this.state === this.states.connected ||\n        this.state === this.states.synchronizing ||\n        indicated.retryImmediately ||\n        (this.state === this.states.connecting &&\n          indicated.error &&\n          Auth.isTokenErr(indicated.error) &&\n          !(this.errorReason && Auth.isTokenErr(this.errorReason as ErrorInfo))));\n\n    Logger.logAction(\n      Logger.LOG_MINOR,\n      'ConnectionManager.notifyState()',\n      'new state: ' + state + (retryImmediately ? '; will retry connection immediately' : '')\n    );\n    /* do nothing if we're already in the indicated state */\n    if (state == this.state.state) return;\n\n    /* kill timers (possibly excepting suspend timer depending on the notified\n     * state), as these are superseded by this notification */\n    this.cancelTransitionTimer();\n    this.cancelRetryTimer();\n    this.checkSuspendTimer(indicated.state);\n\n    if (state === 'suspended' || state === 'connected') {\n      this.disconnectedRetryCount = 0;\n    }\n\n    /* do nothing if we're unable to move from the current state */\n    if (this.state.terminal) return;\n\n    /* process new state */\n    const newState = this.states[indicated.state];\n\n    let retryDelay = newState.retryDelay;\n    if (newState.state === 'disconnected') {\n      this.disconnectedRetryCount++;\n      retryDelay =\n        (newState.retryDelay as number) *\n        Utils.getBackoffCoefficient(this.disconnectedRetryCount) *\n        Utils.getJitterCoefficient();\n    }\n\n    const change = new ConnectionStateChange(\n      this.state.state,\n      newState.state,\n      retryDelay,\n      indicated.error || (ConnectionErrors as Partial<Record<string, () => ErrorInfo>>)[newState.state]?.()\n    );\n\n    if (retryImmediately) {\n      const autoReconnect = () => {\n        if (this.state === this.states.disconnected) {\n          this.lastAutoReconnectAttempt = Utils.now();\n          this.requestState({ state: 'connecting' });\n        }\n      };\n      const sinceLast = this.lastAutoReconnectAttempt && Utils.now() - this.lastAutoReconnectAttempt + 1;\n      if (sinceLast && sinceLast < 1000) {\n        Logger.logAction(\n          Logger.LOG_MICRO,\n          'ConnectionManager.notifyState()',\n          'Last reconnect attempt was only ' +\n            sinceLast +\n            'ms ago, waiting another ' +\n            (1000 - sinceLast) +\n            'ms before trying again'\n        );\n        setTimeout(autoReconnect, 1000 - sinceLast);\n      } else {\n        Platform.Config.nextTick(autoReconnect);\n      }\n    } else if (state === 'disconnected' || state === 'suspended') {\n      this.startRetryTimer(retryDelay as number);\n    }\n\n    /* If going into disconnect/suspended (and not retrying immediately), or a\n     * terminal state, ensure there are no orphaned transports hanging around. */\n    if ((state === 'disconnected' && !retryImmediately) || state === 'suspended' || newState.terminal) {\n      /* Wait till the next tick so the connection state change is enacted,\n       * so aborting transports doesn't trigger redundant state changes */\n      Platform.Config.nextTick(() => {\n        this.disconnectAllTransports();\n      });\n    }\n\n    if (state == 'connected' && !this.activeProtocol) {\n      Logger.logAction(\n        Logger.LOG_ERROR,\n        'ConnectionManager.notifyState()',\n        'Broken invariant: attempted to go into connected state, but there is no active protocol'\n      );\n    }\n\n    /* implement the change and notify */\n    this.enactStateChange(change);\n    if (this.state.sendEvents) {\n      this.sendQueuedMessages();\n    } else if (!this.state.queueEvents) {\n      this.realtime.channels.propogateConnectionInterruption(state, change.reason);\n      this.failQueuedMessages(change.reason as ErrorInfo); // RTN7c\n    }\n  }\n\n  requestState(request: any): void {\n    const state = request.state;\n    Logger.logAction(\n      Logger.LOG_MINOR,\n      'ConnectionManager.requestState()',\n      'requested state: ' + state + '; current state: ' + this.state.state\n    );\n    if (state == this.state.state) return; /* silently do nothing */\n\n    /* kill running timers, as this request supersedes them */\n    this.cancelTransitionTimer();\n    this.cancelRetryTimer();\n    /* for suspend timer check rather than cancel -- eg requesting a connecting\n     * state should not reset the suspend timer */\n    this.checkSuspendTimer(state);\n\n    if (state == 'connecting' && this.state.state == 'connected') return;\n    if (state == 'closing' && this.state.state == 'closed') return;\n\n    const newState = this.states[state],\n      change = new ConnectionStateChange(\n        this.state.state,\n        newState.state,\n        null,\n        request.error || (ConnectionErrors as Partial<Record<string, () => ErrorInfo>>)[newState.state]?.()\n      );\n\n    this.enactStateChange(change);\n\n    if (state == 'connecting') {\n      Platform.Config.nextTick(() => {\n        this.startConnect();\n      });\n    }\n    if (state == 'closing') {\n      this.closeImpl();\n    }\n  }\n\n  startConnect(): void {\n    if (this.state !== this.states.connecting) {\n      Logger.logAction(\n        Logger.LOG_MINOR,\n        'ConnectionManager.startConnect()',\n        'Must be in connecting state to connect, but was ' + this.state.state\n      );\n      return;\n    }\n\n    const auth = this.realtime.auth;\n\n    /* The point of the connectCounter mechanism is to ensure that the\n     * connection procedure can be cancelled. We want disconnectAllTransports\n     * to be able to stop any in-progress connection, even before it gets to\n     * the stage of having a pending (or even a proposed) transport that it can\n     * dispose() of. So we check that it's still current after any async stage,\n     * up until the stage that is synchronous with instantiating a transport */\n    const connectCount = ++this.connectCounter;\n\n    const connect = () => {\n      this.checkConnectionStateFreshness();\n      this.getTransportParams((transportParams: TransportParams) => {\n        if (transportParams.mode === 'recover' && transportParams.options.recover) {\n          const recoveryContext = decodeRecoveryKey(transportParams.options.recover);\n          if (recoveryContext) {\n            this.realtime.channels.recoverChannels(recoveryContext.channelSerials);\n          }\n        }\n\n        if (connectCount !== this.connectCounter) {\n          return;\n        }\n        this.connectImpl(transportParams, connectCount);\n      });\n    };\n\n    Logger.logAction(Logger.LOG_MINOR, 'ConnectionManager.startConnect()', 'starting connection');\n    this.startSuspendTimer();\n    this.startTransitionTimer(this.states.connecting);\n\n    if (auth.method === 'basic') {\n      connect();\n    } else {\n      const authCb = (err: ErrorInfo | null) => {\n        if (connectCount !== this.connectCounter) {\n          return;\n        }\n        if (err) {\n          this.actOnErrorFromAuthorize(err);\n        } else {\n          connect();\n        }\n      };\n      if (this.errorReason && Auth.isTokenErr(this.errorReason as ErrorInfo)) {\n        /* Force a refetch of a new token */\n        auth._forceNewToken(null, null, authCb);\n      } else {\n        auth._ensureValidAuthCredentials(false, authCb);\n      }\n    }\n  }\n\n  /**\n   * There are three stages in connecting:\n   * - preference: if there is a cached transport preference, we try to connect\n   *   on that. If that fails or times out we abort the attempt, remove the\n   *   preference and fall back to base. If it succeeds, we try upgrading it if\n   *   needed (will only be in the case where the preference is xhrs and the\n   *   browser supports ws).\n   * - base: we try to connect with the best transport that we think will\n   *   never fail for this platform. If it doesn't work, we try fallback hosts.\n   * - upgrade: given a connected transport, we see if there are any better\n   *   ones, and if so, try to upgrade to them.\n   *\n   * connectImpl works out what stage you're at (which is purely a function of\n   * the current connection state and whether there are any stored preferences),\n   * and dispatches accordingly. After a transport has been set pending,\n   * tryATransport calls connectImpl to see if there's another stage to be done.\n   * */\n  connectImpl(transportParams: TransportParams, connectCount?: number): void {\n    const state = this.state.state;\n\n    if (state !== this.states.connecting.state && state !== this.states.connected.state) {\n      /* Only keep trying as long as in the 'connecting' state (or 'connected'\n       * for upgrading). Any operation can put us into 'disconnected' to cancel\n       * connection attempts and wait before retrying, or 'failed' to fail. */\n      Logger.logAction(\n        Logger.LOG_MINOR,\n        'ConnectionManager.connectImpl()',\n        'Must be in connecting state to connect (or connected to upgrade), but was ' + state\n      );\n    } else if (this.pendingTransports.length) {\n      Logger.logAction(\n        Logger.LOG_MINOR,\n        'ConnectionManager.connectImpl()',\n        'Transports ' + this.pendingTransports[0].toString() + ' currently pending; taking no action'\n      );\n    } else if (state == this.states.connected.state) {\n      this.upgradeIfNeeded(transportParams);\n    } else if (this.transports.length > 1 && this.getTransportPreference()) {\n      this.connectPreference(transportParams);\n    } else {\n      this.connectBase(transportParams, connectCount);\n    }\n  }\n\n  connectPreference(transportParams: TransportParams): void {\n    const preference = this.getTransportPreference();\n    let preferenceTimeoutExpired = false;\n\n    if (!Utils.arrIn(this.transports, preference)) {\n      this.unpersistTransportPreference();\n      this.connectImpl(transportParams);\n    }\n\n    Logger.logAction(\n      Logger.LOG_MINOR,\n      'ConnectionManager.connectPreference()',\n      'Trying to connect with stored transport preference ' + preference\n    );\n\n    const preferenceTimeout = setTimeout(() => {\n      preferenceTimeoutExpired = true;\n      if (!(this.state.state === this.states.connected.state)) {\n        Logger.logAction(\n          Logger.LOG_MINOR,\n          'ConnectionManager.connectPreference()',\n          'Shortcircuit connection attempt with ' + preference + ' failed; clearing preference and trying from scratch'\n        );\n        /* Abort all connection attempts. (This also disconnects the active\n         * protocol, but none exists if we're not in the connected state) */\n        this.disconnectAllTransports();\n        /* Be quite agressive about clearing the stored preference if ever it doesn't work */\n        this.unpersistTransportPreference();\n      }\n      this.connectImpl(transportParams);\n    }, this.options.timeouts.preferenceConnectTimeout);\n\n    /* For connectPreference, just use the main host. If host fallback is needed, do it in connectBase.\n     * The wstransport it will substitute the httphost for an appropriate wshost */\n    transportParams.host = this.httpHosts[0];\n    this.tryATransport(transportParams, preference, (fatal: boolean, transport: Transport) => {\n      clearTimeout(preferenceTimeout);\n      if (preferenceTimeoutExpired && transport) {\n        /* Viable, but too late - connectImpl() will already be trying\n         * connectBase, and we weren't in upgrade mode. Just remove the\n         * onconnected listener and get rid of it */\n        transport.off();\n        transport.disconnect();\n        Utils.arrDeleteValue(this.pendingTransports, transport);\n      } else if (!transport && !fatal) {\n        /* Preference failed in a transport-specific way. Try more */\n        this.unpersistTransportPreference();\n        this.connectImpl(transportParams);\n      }\n      /* If suceeded, or failed fatally, nothing to do */\n    });\n  }\n\n  /**\n   * Try to establish a transport on the base transport (the best transport\n   * such that if it doesn't work, nothing will work) as determined through\n   * static feature detection, checking for network connectivity and trying\n   * fallback hosts if applicable.\n   * @param transportParams\n   */\n  connectBase(transportParams: TransportParams, connectCount?: number): void {\n    const giveUp = (err: IPartialErrorInfo) => {\n      this.notifyState({ state: this.states.connecting.failState as string, error: err });\n    };\n    const candidateHosts = this.httpHosts.slice();\n    const hostAttemptCb = (fatal: boolean, transport: Transport) => {\n      if (connectCount !== this.connectCounter) {\n        return;\n      }\n      if (!transport && !fatal) {\n        tryFallbackHosts();\n      }\n    };\n\n    Logger.logAction(\n      Logger.LOG_MINOR,\n      'ConnectionManager.connectBase()',\n      'Trying to connect with base transport ' + this.baseTransport\n    );\n\n    /* first try to establish a connection with the priority host with http transport */\n    const host = candidateHosts.shift();\n    if (!host) {\n      giveUp(new ErrorInfo('Unable to connect (no available host)', 80003, 404));\n      return;\n    }\n    transportParams.host = host;\n\n    /* this is what we'll be doing if the attempt for the main host fails */\n    const tryFallbackHosts = () => {\n      /* if there aren't any fallback hosts, fail */\n      if (!candidateHosts.length) {\n        giveUp(new ErrorInfo('Unable to connect (and no more fallback hosts to try)', 80003, 404));\n        return;\n      }\n      /* before trying any fallback (or any remaining fallback) we decide if\n       * there is a problem with the ably host, or there is a general connectivity\n       * problem */\n      if (!this.realtime.http.checkConnectivity) {\n        giveUp(new PartialErrorInfo('Internal error: Http.checkConnectivity not set', null, 500));\n        return;\n      }\n      this.realtime.http.checkConnectivity((err?: ErrorInfo | null, connectivity?: boolean) => {\n        if (connectCount !== this.connectCounter) {\n          return;\n        }\n        /* we know err won't happen but handle it here anyway */\n        if (err) {\n          giveUp(err);\n          return;\n        }\n        if (!connectivity) {\n          /* the internet isn't reachable, so don't try the fallback hosts */\n          giveUp(new ErrorInfo('Unable to connect (network unreachable)', 80003, 404));\n          return;\n        }\n        /* the network is there, so there's a problem with the main host, or\n         * its dns. Try the fallback hosts. We could try them simultaneously but\n         * that would potentially cause a huge spike in load on the load balancer */\n        transportParams.host = Utils.arrPopRandomElement(candidateHosts);\n        this.tryATransport(transportParams, this.baseTransport, hostAttemptCb);\n      });\n    };\n\n    if (this.forceFallbackHost && candidateHosts.length) {\n      this.forceFallbackHost = false;\n      tryFallbackHosts();\n      return;\n    }\n\n    this.tryATransport(transportParams, this.baseTransport, hostAttemptCb);\n  }\n\n  getUpgradePossibilities(): string[] {\n    /* returns the subset of upgradeTransports to the right of the current\n     * transport in upgradeTransports (if it's in there - if not, currentSerial\n     * will be -1, so return upgradeTransports.slice(0) == upgradeTransports */\n    const current = (this.activeProtocol as Protocol).getTransport().shortName;\n    const currentSerial = Utils.arrIndexOf(this.upgradeTransports, current);\n    return this.upgradeTransports.slice(currentSerial + 1) as string[];\n  }\n\n  upgradeIfNeeded(transportParams: Record<string, any>): void {\n    const upgradePossibilities = this.getUpgradePossibilities();\n    Logger.logAction(\n      Logger.LOG_MINOR,\n      'ConnectionManager.upgradeIfNeeded()',\n      'upgrade possibilities: ' + Platform.Config.inspect(upgradePossibilities)\n    );\n\n    if (!upgradePossibilities.length) {\n      return;\n    }\n\n    Utils.arrForEach(upgradePossibilities, (upgradeTransport: string) => {\n      /* Note: the transport may mutate the params, so give each transport a fresh one */\n      const upgradeTransportParams = this.createTransportParams(transportParams.host, 'upgrade');\n      this.tryATransport(upgradeTransportParams, upgradeTransport, noop);\n    });\n  }\n\n  closeImpl(): void {\n    Logger.logAction(Logger.LOG_MINOR, 'ConnectionManager.closeImpl()', 'closing connection');\n    this.cancelSuspendTimer();\n    this.startTransitionTimer(this.states.closing);\n\n    Utils.safeArrForEach(this.pendingTransports, function (transport) {\n      Logger.logAction(Logger.LOG_MICRO, 'ConnectionManager.closeImpl()', 'Closing pending transport: ' + transport);\n      if (transport) transport.close();\n    });\n\n    Utils.safeArrForEach(this.proposedTransports, function (transport) {\n      Logger.logAction(\n        Logger.LOG_MICRO,\n        'ConnectionManager.closeImpl()',\n        'Disposing of proposed transport: ' + transport\n      );\n      if (transport) transport.dispose();\n    });\n\n    if (this.activeProtocol) {\n      Logger.logAction(\n        Logger.LOG_MICRO,\n        'ConnectionManager.closeImpl()',\n        'Closing active transport: ' + this.activeProtocol.getTransport()\n      );\n      this.activeProtocol.getTransport().close();\n    }\n\n    /* If there was an active transport, this will probably be\n     * preempted by the notifyState call in deactivateTransport */\n    this.notifyState({ state: 'closed' });\n  }\n\n  onAuthUpdated(tokenDetails: API.Types.TokenDetails, callback: Function): void {\n    switch (this.state.state) {\n      case 'connected': {\n        Logger.logAction(\n          Logger.LOG_MICRO,\n          'ConnectionManager.onAuthUpdated()',\n          'Sending AUTH message on active transport'\n        );\n        /* If there are any proposed/pending transports (eg an upgrade that\n         * isn't yet scheduled for activation) that hasn't yet started syncing,\n         * just to get rid of them & restart the upgrade with the new token, to\n         * avoid a race condition. (If it has started syncing, the AUTH will be\n         * queued until the upgrade is complete, so everything's fine) */\n        if (\n          (this.pendingTransports.length || this.proposedTransports.length) &&\n          this.state !== this.states.synchronizing\n        ) {\n          this.disconnectAllTransports(/* exceptActive: */ true);\n          const transportParams = (this.activeProtocol as Protocol).getTransport().params;\n          Platform.Config.nextTick(() => {\n            if (this.state.state === 'connected') {\n              this.upgradeIfNeeded(transportParams);\n            }\n          });\n        }\n\n        /* Do any transport-specific new-token action */\n        const activeTransport = this.activeProtocol?.getTransport();\n        if (activeTransport && activeTransport.onAuthUpdated) {\n          activeTransport.onAuthUpdated(tokenDetails);\n        }\n\n        const authMsg = ProtocolMessage.fromValues({\n          action: actions.AUTH,\n          auth: {\n            accessToken: tokenDetails.token,\n          },\n        });\n        this.send(authMsg);\n\n        /* The answer will come back as either a connectiondetails event\n         * (realtime sends a CONNECTED to acknowledge the reauth) or a\n         * statechange to failed */\n        const successListener = () => {\n          this.off(failureListener);\n          callback(null, tokenDetails);\n        };\n        const failureListener = (stateChange: ConnectionStateChange) => {\n          if (stateChange.current === 'failed') {\n            this.off(successListener);\n            this.off(failureListener);\n            callback(stateChange.reason || this.getStateError());\n          }\n        };\n        this.once('connectiondetails', successListener);\n        this.on('connectionstate', failureListener);\n        break;\n      }\n\n      case 'connecting':\n        Logger.logAction(\n          Logger.LOG_MICRO,\n          'ConnectionManager.onAuthUpdated()',\n          'Aborting current connection attempts in order to start again with the new auth details'\n        );\n        this.disconnectAllTransports();\n      /* fallthrough to add statechange listener */\n\n      default: {\n        Logger.logAction(\n          Logger.LOG_MICRO,\n          'ConnectionManager.onAuthUpdated()',\n          'Connection state is ' + this.state.state + '; waiting until either connected or failed'\n        );\n        const listener = (stateChange: ConnectionStateChange) => {\n          switch (stateChange.current) {\n            case 'connected':\n              this.off(listener);\n              callback(null, tokenDetails);\n              break;\n            case 'failed':\n            case 'closed':\n            case 'suspended':\n              this.off(listener);\n              callback(stateChange.reason || this.getStateError());\n              break;\n            default:\n              /* ignore till we get either connected or failed */\n              break;\n          }\n        };\n        this.on('connectionstate', listener);\n        if (this.state.state === 'connecting') {\n          /* can happen if in the connecting state but no transport was pending\n           * yet, so disconnectAllTransports did not trigger a disconnected state */\n          this.startConnect();\n        } else {\n          this.requestState({ state: 'connecting' });\n        }\n      }\n    }\n  }\n\n  disconnectAllTransports(exceptActive?: boolean): void {\n    Logger.logAction(\n      Logger.LOG_MINOR,\n      'ConnectionManager.disconnectAllTransports()',\n      'Disconnecting all transports' + (exceptActive ? ' except the active transport' : '')\n    );\n\n    /* This will prevent any connection procedure in an async part of one of its early stages from continuing */\n    this.connectCounter++;\n\n    Utils.safeArrForEach(this.pendingTransports, function (transport) {\n      Logger.logAction(\n        Logger.LOG_MICRO,\n        'ConnectionManager.disconnectAllTransports()',\n        'Disconnecting pending transport: ' + transport\n      );\n      if (transport) transport.disconnect();\n    });\n    this.pendingTransports = [];\n\n    Utils.safeArrForEach(this.proposedTransports, function (transport) {\n      Logger.logAction(\n        Logger.LOG_MICRO,\n        'ConnectionManager.disconnectAllTransports()',\n        'Disposing of proposed transport: ' + transport\n      );\n      if (transport) transport.dispose();\n    });\n    this.proposedTransports = [];\n\n    if (this.activeProtocol && !exceptActive) {\n      Logger.logAction(\n        Logger.LOG_MICRO,\n        'ConnectionManager.disconnectAllTransports()',\n        'Disconnecting active transport: ' + this.activeProtocol.getTransport()\n      );\n      this.activeProtocol.getTransport().disconnect();\n    }\n    /* No need to notify state disconnected; disconnecting the active transport\n     * will have that effect */\n  }\n\n  /******************\n   * event queueing\n   ******************/\n\n  send(msg: ProtocolMessage, queueEvent?: boolean, callback?: ErrCallback): void {\n    callback = callback || noop;\n    const state = this.state;\n\n    if (state.sendEvents) {\n      Logger.logAction(Logger.LOG_MICRO, 'ConnectionManager.send()', 'sending event');\n      this.sendImpl(new PendingMessage(msg, callback));\n      return;\n    }\n    const shouldQueue = (queueEvent && state.queueEvents) || state.forceQueueEvents;\n    if (!shouldQueue) {\n      const err = 'rejecting event, queueEvent was ' + queueEvent + ', state was ' + state.state;\n      Logger.logAction(Logger.LOG_MICRO, 'ConnectionManager.send()', err);\n      callback(this.errorReason || new ErrorInfo(err, 90000, 400));\n      return;\n    }\n    if (Logger.shouldLog(Logger.LOG_MICRO)) {\n      Logger.logAction(Logger.LOG_MICRO, 'ConnectionManager.send()', 'queueing msg; ' + ProtocolMessage.stringify(msg));\n    }\n    this.queue(msg, callback);\n  }\n\n  sendImpl(pendingMessage: PendingMessage): void {\n    const msg = pendingMessage.message;\n    /* If have already attempted to send this, resend with the same msgSerial,\n     * so Ably can dedup if the previous send succeeded */\n    if (pendingMessage.ackRequired && !pendingMessage.sendAttempted) {\n      msg.msgSerial = this.msgSerial++;\n    }\n    try {\n      (this.activeProtocol as Protocol).send(pendingMessage);\n    } catch (e) {\n      Logger.logAction(\n        Logger.LOG_ERROR,\n        'ConnectionManager.sendImpl()',\n        'Unexpected exception in transport.send(): ' + (e as Error).stack\n      );\n    }\n  }\n\n  queue(msg: ProtocolMessage, callback: ErrCallback): void {\n    Logger.logAction(Logger.LOG_MICRO, 'ConnectionManager.queue()', 'queueing event');\n    const lastQueued = this.queuedMessages.last();\n    const maxSize = this.options.maxMessageSize;\n    /* If have already attempted to send a message, don't merge more messages\n     * into it, as if the previous send actually succeeded and realtime ignores\n     * the dup, they'll be lost */\n    if (lastQueued && !lastQueued.sendAttempted && bundleWith(lastQueued.message, msg, maxSize)) {\n      if (!lastQueued.merged) {\n        lastQueued.callback = Multicaster.create([lastQueued.callback as any]);\n        lastQueued.merged = true;\n      }\n      (lastQueued.callback as MulticasterInstance).push(callback as any);\n    } else {\n      this.queuedMessages.push(new PendingMessage(msg, callback));\n    }\n  }\n\n  sendQueuedMessages(): void {\n    Logger.logAction(\n      Logger.LOG_MICRO,\n      'ConnectionManager.sendQueuedMessages()',\n      'sending ' + this.queuedMessages.count() + ' queued messages'\n    );\n    let pendingMessage;\n    while ((pendingMessage = this.queuedMessages.shift())) this.sendImpl(pendingMessage);\n  }\n\n  queuePendingMessages(pendingMessages: Array<PendingMessage>): void {\n    if (pendingMessages && pendingMessages.length) {\n      Logger.logAction(\n        Logger.LOG_MICRO,\n        'ConnectionManager.queuePendingMessages()',\n        'queueing ' + pendingMessages.length + ' pending messages'\n      );\n      this.queuedMessages.prepend(pendingMessages);\n    }\n  }\n\n  failQueuedMessages(err: ErrorInfo): void {\n    const numQueued = this.queuedMessages.count();\n    if (numQueued > 0) {\n      Logger.logAction(\n        Logger.LOG_ERROR,\n        'ConnectionManager.failQueuedMessages()',\n        'failing ' + numQueued + ' queued messages, err = ' + Utils.inspectError(err)\n      );\n      this.queuedMessages.completeAllMessages(err);\n    }\n  }\n\n  onChannelMessage(message: ProtocolMessage, transport: Transport): void {\n    this.pendingChannelMessagesState.queue.push({ message, transport });\n\n    if (!this.pendingChannelMessagesState.isProcessing) {\n      this.processNextPendingChannelMessage();\n    }\n  }\n\n  private processNextPendingChannelMessage() {\n    if (this.pendingChannelMessagesState.queue.length > 0) {\n      this.pendingChannelMessagesState.isProcessing = true;\n\n      const pendingChannelMessage = this.pendingChannelMessagesState.queue.shift()!;\n      this.processChannelMessage(pendingChannelMessage.message, pendingChannelMessage.transport)\n        .catch((err) => {\n          Logger.logAction(\n            Logger.LOG_ERROR,\n            'ConnectionManager.processNextPendingChannelMessage() received error ',\n            err\n          );\n        })\n        .finally(() => {\n          this.pendingChannelMessagesState.isProcessing = false;\n          this.processNextPendingChannelMessage();\n        });\n    }\n  }\n\n  private async processChannelMessage(message: ProtocolMessage, transport: Transport) {\n    const onActiveTransport = this.activeProtocol && transport === this.activeProtocol.getTransport(),\n      onUpgradeTransport = Utils.arrIn(this.pendingTransports, transport) && this.state == this.states.synchronizing;\n\n    /* As the lib now has a period where the upgrade transport is synced but\n     * before it's become active (while waiting for the old one to become\n     * idle), message can validly arrive on it even though it isn't active */\n    if (onActiveTransport || onUpgradeTransport) {\n      await this.realtime.channels.processChannelMessage(message);\n    } else {\n      // Message came in on a defunct transport. Allow only acks, nacks, & errors for outstanding\n      // messages,  no new messages (as sync has been sent on new transport so new messages will\n      // be resent there, or connection has been closed so don't want new messages)\n      if (Utils.arrIndexOf([actions.ACK, actions.NACK, actions.ERROR], message.action) > -1) {\n        await this.realtime.channels.processChannelMessage(message);\n      } else {\n        Logger.logAction(\n          Logger.LOG_MICRO,\n          'ConnectionManager.onChannelMessage()',\n          'received message ' + JSON.stringify(message) + 'on defunct transport; discarding'\n        );\n      }\n    }\n  }\n\n  ping(transport: Transport | null, callback: Function): void {\n    /* if transport is specified, try that */\n    if (transport) {\n      Logger.logAction(Logger.LOG_MINOR, 'ConnectionManager.ping()', 'transport = ' + transport);\n\n      const onTimeout = function () {\n        transport.off('heartbeat', onHeartbeat);\n        callback(new ErrorInfo('Timeout waiting for heartbeat response', 50000, 500));\n      };\n\n      const pingStart = Utils.now(),\n        id = Utils.cheapRandStr();\n\n      const onHeartbeat = function (responseId: string) {\n        if (responseId === id) {\n          transport.off('heartbeat', onHeartbeat);\n          clearTimeout(timer);\n          const responseTime = Utils.now() - pingStart;\n          callback(null, responseTime);\n        }\n      };\n\n      const timer = setTimeout(onTimeout, this.options.timeouts.realtimeRequestTimeout);\n\n      transport.on('heartbeat', onHeartbeat);\n      transport.ping(id);\n      return;\n    }\n\n    /* if we're not connected, don't attempt */\n    if (this.state.state !== 'connected') {\n      callback(new ErrorInfo('Unable to ping service; not connected', 40000, 400));\n      return;\n    }\n\n    /* no transport was specified, so use the current (connected) one\n     * but ensure that we retry if the transport is superseded before we complete */\n    let completed = false;\n\n    const onPingComplete = (err: Error, responseTime: number) => {\n      this.off('transport.active', onTransportActive);\n      if (!completed) {\n        completed = true;\n        callback(err, responseTime);\n      }\n    };\n\n    const onTransportActive = () => {\n      if (!completed) {\n        /* ensure that no callback happens for the currently outstanding operation */\n        completed = true;\n        /* repeat but picking up the new transport */\n        Platform.Config.nextTick(() => {\n          this.ping(null, callback);\n        });\n      }\n    };\n\n    this.on('transport.active', onTransportActive);\n    this.ping((this.activeProtocol as Protocol).getTransport(), onPingComplete);\n  }\n\n  abort(error: ErrorInfo): void {\n    (this.activeProtocol as Protocol).getTransport().fail(error);\n  }\n\n  registerProposedTransport(transport: Transport): void {\n    this.proposedTransports.push(transport);\n  }\n\n  getTransportPreference(): string {\n    return this.transportPreference || (haveWebStorage() && Platform.WebStorage?.get?.(transportPreferenceName));\n  }\n\n  persistTransportPreference(transport: Transport): void {\n    if (Utils.arrIn(Defaults.upgradeTransports, transport.shortName)) {\n      this.transportPreference = transport.shortName;\n      if (haveWebStorage()) {\n        Platform.WebStorage?.set?.(transportPreferenceName, transport.shortName);\n      }\n    }\n  }\n\n  unpersistTransportPreference(): void {\n    this.transportPreference = null;\n    if (haveWebStorage()) {\n      Platform.WebStorage?.remove?.(transportPreferenceName);\n    }\n  }\n\n  /* This method is only used during connection attempts, so implements RSA4c1,\n   * RSA4c2, and RSA4d. In particular, it is not invoked for\n   * serverside-triggered reauths or manual reauths, so RSA4c3 does not apply */\n  actOnErrorFromAuthorize(err: ErrorInfo): void {\n    if (err.code === 40171) {\n      /* No way to reauth */\n      this.notifyState({ state: 'failed', error: err });\n    } else if (err.code === 40102) {\n      this.notifyState({ state: 'failed', error: err });\n    } else if (err.statusCode === HttpStatusCodes.Forbidden) {\n      const msg = 'Client configured authentication provider returned 403; failing the connection';\n      Logger.logAction(Logger.LOG_ERROR, 'ConnectionManager.actOnErrorFromAuthorize()', msg);\n      this.notifyState({ state: 'failed', error: new ErrorInfo(msg, 80019, 403, err) });\n    } else {\n      const msg = 'Client configured authentication provider request failed';\n      Logger.logAction(Logger.LOG_MINOR, 'ConnectionManager.actOnErrorFromAuthorize', msg);\n      this.notifyState({ state: this.state.failState as string, error: new ErrorInfo(msg, 80019, 401, err) });\n    }\n  }\n\n  onConnectionDetailsUpdate(connectionDetails: Record<string, any>, transport: Transport): void {\n    if (!connectionDetails) {\n      return;\n    }\n    this.connectionDetails = connectionDetails;\n    if (connectionDetails.maxMessageSize) {\n      this.options.maxMessageSize = connectionDetails.maxMessageSize;\n    }\n    const clientId = connectionDetails.clientId;\n    if (clientId) {\n      const err = this.realtime.auth._uncheckedSetClientId(clientId);\n      if (err) {\n        Logger.logAction(Logger.LOG_ERROR, 'ConnectionManager.onConnectionDetailsUpdate()', err.message);\n        /* Errors setting the clientId are fatal to the connection */\n        transport.fail(err);\n        return;\n      }\n    }\n    const connectionStateTtl = connectionDetails.connectionStateTtl;\n    if (connectionStateTtl) {\n      this.connectionStateTtl = connectionStateTtl;\n    }\n    this.maxIdleInterval = connectionDetails.maxIdleInterval;\n    this.emit('connectiondetails', connectionDetails);\n  }\n}\n\nexport default ConnectionManager;\n", "import * as Utils from '../util/utils';\nimport EventEmitter from '../util/eventemitter';\nimport ConnectionManager from '../transport/connectionmanager';\nimport Logger from '../util/logger';\nimport ConnectionStateChange from './connectionstatechange';\nimport ErrorInfo from '../types/errorinfo';\nimport { NormalisedClientOptions } from '../../types/ClientOptions';\nimport Realtime from './realtime';\nimport Platform from 'common/platform';\n\nclass Connection extends EventEmitter {\n  ably: Realtime;\n  connectionManager: ConnectionManager;\n  state: string;\n  key?: string;\n  id?: string;\n  errorReason: ErrorInfo | null;\n\n  constructor(ably: Realtime, options: NormalisedClientOptions) {\n    super();\n    this.ably = ably;\n    this.connectionManager = new ConnectionManager(ably, options);\n    this.state = this.connectionManager.state.state;\n    this.key = undefined;\n    this.id = undefined;\n    this.errorReason = null;\n\n    this.connectionManager.on('connectionstate', (stateChange: ConnectionStateChange) => {\n      const state = (this.state = stateChange.current as string);\n      Platform.Config.nextTick(() => {\n        this.emit(state, stateChange);\n      });\n    });\n    this.connectionManager.on('update', (stateChange: ConnectionStateChange) => {\n      Platform.Config.nextTick(() => {\n        this.emit('update', stateChange);\n      });\n    });\n  }\n\n  whenState = ((state: string, listener: Function) => {\n    return EventEmitter.prototype.whenState.call(\n      this,\n      state,\n      this.state,\n      listener,\n      new ConnectionStateChange(undefined, state)\n    );\n  }) as any;\n\n  connect(): void {\n    Logger.logAction(Logger.LOG_MINOR, 'Connection.connect()', '');\n    this.connectionManager.requestState({ state: 'connecting' });\n  }\n\n  ping(callback: Function): Promise<void> | void {\n    Logger.logAction(Logger.LOG_MINOR, 'Connection.ping()', '');\n    if (!callback) {\n      return Utils.promisify(this, 'ping', arguments);\n    }\n    this.connectionManager.ping(null, callback);\n  }\n\n  close(): void {\n    Logger.logAction(Logger.LOG_MINOR, 'Connection.close()', 'connectionKey = ' + this.key);\n    this.connectionManager.requestState({ state: 'closing' });\n  }\n\n  get recoveryKey(): string | null {\n    return this.createRecoveryKey();\n  }\n\n  createRecoveryKey(): string | null {\n    return this.connectionManager.createRecoveryKey();\n  }\n}\n\nexport default Connection;\n", "import ErrorInfo from '../types/errorinfo';\n\nclass ChannelStateChange {\n  previous: string;\n  current: string;\n  resumed?: boolean;\n  reason?: string | Error | ErrorInfo;\n\n  constructor(previous: string, current: string, resumed?: boolean, reason?: string | Error | ErrorInfo | null) {\n    this.previous = previous;\n    this.current = current;\n    if (current === 'attached') this.resumed = resumed;\n    if (reason) this.reason = reason;\n  }\n}\n\nexport default ChannelStateChange;\n", "import * as Utils from '../util/utils';\nimport Presence from './presence';\nimport EventEmitter from '../util/eventemitter';\nimport Logger from '../util/logger';\nimport PresenceMessage from '../types/presencemessage';\nimport ErrorInfo, { IPartialErrorInfo, PartialErrorInfo } from '../types/errorinfo';\nimport RealtimeChannel from './realtimechannel';\nimport Multicaster from '../util/multicaster';\nimport ChannelStateChange from './channelstatechange';\nimport { CipherOptions } from '../types/message';\nimport { ErrCallback, PaginatedResultCallback, StandardCallback } from '../../types/utils';\nimport { PaginatedResult } from './paginatedresource';\n\ninterface RealtimePresenceParams {\n  waitForSync?: boolean;\n  clientId?: string;\n  connectionId?: string;\n}\n\ninterface RealtimeHistoryParams {\n  start?: number;\n  end?: number;\n  direction?: string;\n  limit?: number;\n  untilAttach?: boolean;\n  from_serial?: string | null;\n}\n\nfunction getClientId(realtimePresence: RealtimePresence) {\n  return realtimePresence.channel.realtime.auth.clientId;\n}\n\nfunction isAnonymousOrWildcard(realtimePresence: RealtimePresence) {\n  const realtime = realtimePresence.channel.realtime;\n  /* If not currently connected, we can't assume that we're an anonymous\n   * client, as realtime may inform us of our clientId in the CONNECTED\n   * message. So assume we're not anonymous and leave it to realtime to\n   * return an error if we are */\n  const clientId = realtime.auth.clientId;\n  return (!clientId || clientId === '*') && realtime.connection.state === 'connected';\n}\n\n/* Callback is called only in the event of an error */\nfunction waitAttached(channel: RealtimeChannel, callback: ErrCallback, action: () => void) {\n  switch (channel.state) {\n    case 'attached':\n    case 'suspended':\n      action();\n      break;\n    case 'initialized':\n    case 'detached':\n    case 'detaching':\n    case 'attaching':\n      channel.attach(function (err: Error) {\n        if (err) callback(err);\n        else action();\n      });\n      break;\n    default:\n      callback(ErrorInfo.fromValues(channel.invalidStateError()));\n  }\n}\n\nfunction newerThan(item: PresenceMessage, existing: PresenceMessage) {\n  /* RTP2b1: if either is synthesised, compare by timestamp */\n  if (item.isSynthesized() || existing.isSynthesized()) {\n    // RTP2b1a: if equal, prefer the newly-arrived one\n    return (item.timestamp as number) >= (existing.timestamp as number);\n  }\n\n  /* RTP2b2 */\n  const itemOrderings = item.parseId(),\n    existingOrderings = existing.parseId();\n  if (itemOrderings.msgSerial === existingOrderings.msgSerial) {\n    return itemOrderings.index > existingOrderings.index;\n  } else {\n    return itemOrderings.msgSerial > existingOrderings.msgSerial;\n  }\n}\n\nclass RealtimePresence extends Presence {\n  channel: RealtimeChannel;\n  pendingPresence: { presence: PresenceMessage; callback: ErrCallback }[];\n  syncComplete: boolean;\n  members: PresenceMap;\n  _myMembers: PresenceMap;\n  subscriptions: EventEmitter;\n  name?: string;\n\n  constructor(channel: RealtimeChannel) {\n    super(channel);\n    this.channel = channel;\n    this.syncComplete = false;\n    this.members = new PresenceMap(this, (item) => item.clientId + ':' + item.connectionId);\n    // RTP17h: Store own members by clientId only.\n    this._myMembers = new PresenceMap(this, (item) => item.clientId!);\n    this.subscriptions = new EventEmitter();\n    this.pendingPresence = [];\n  }\n\n  enter(data: unknown, callback: ErrCallback): void | Promise<void> {\n    if (isAnonymousOrWildcard(this)) {\n      throw new ErrorInfo('clientId must be specified to enter a presence channel', 40012, 400);\n    }\n    return this._enterOrUpdateClient(undefined, undefined, data, 'enter', callback);\n  }\n\n  update(data: unknown, callback: ErrCallback): void | Promise<void> {\n    if (isAnonymousOrWildcard(this)) {\n      throw new ErrorInfo('clientId must be specified to update presence data', 40012, 400);\n    }\n    return this._enterOrUpdateClient(undefined, undefined, data, 'update', callback);\n  }\n\n  enterClient(clientId: string, data: unknown, callback: ErrCallback): void | Promise<void> {\n    return this._enterOrUpdateClient(undefined, clientId, data, 'enter', callback);\n  }\n\n  updateClient(clientId: string, data: unknown, callback: ErrCallback): void | Promise<void> {\n    return this._enterOrUpdateClient(undefined, clientId, data, 'update', callback);\n  }\n\n  _enterOrUpdateClient(\n    id: string | undefined,\n    clientId: string | undefined,\n    data: unknown,\n    action: string,\n    callback: ErrCallback\n  ): void | Promise<void> {\n    if (!callback) {\n      if (typeof data === 'function') {\n        callback = data as ErrCallback;\n        data = null;\n      } else {\n        return Utils.promisify(this, '_enterOrUpdateClient', [id, clientId, data, action]);\n      }\n    }\n\n    const channel = this.channel;\n    if (!channel.connectionManager.activeState()) {\n      callback(channel.connectionManager.getError());\n      return;\n    }\n\n    Logger.logAction(\n      Logger.LOG_MICRO,\n      'RealtimePresence.' + action + 'Client()',\n      'channel = ' + channel.name + ', id = ' + id + ', client = ' + (clientId || '(implicit) ' + getClientId(this))\n    );\n\n    const presence = PresenceMessage.fromValues({\n      action: action,\n      data: data,\n    });\n    if (id) {\n      presence.id = id;\n    }\n    if (clientId) {\n      presence.clientId = clientId;\n    }\n\n    PresenceMessage.encode(presence, channel.channelOptions as CipherOptions, (err: IPartialErrorInfo) => {\n      if (err) {\n        callback(err);\n        return;\n      }\n      switch (channel.state) {\n        case 'attached':\n          channel.sendPresence(presence, callback);\n          break;\n        case 'initialized':\n        case 'detached':\n          channel.attach();\n        // eslint-disable-next-line no-fallthrough\n        case 'attaching':\n          this.pendingPresence.push({\n            presence: presence,\n            callback: callback,\n          });\n          break;\n        default:\n          err = new PartialErrorInfo(\n            'Unable to ' + action + ' presence channel while in ' + channel.state + ' state',\n            90001\n          );\n          err.code = 90001;\n          callback(err);\n      }\n    });\n  }\n\n  leave(data: unknown, callback: ErrCallback): void | Promise<void> {\n    if (isAnonymousOrWildcard(this)) {\n      throw new ErrorInfo('clientId must have been specified to enter or leave a presence channel', 40012, 400);\n    }\n    return this.leaveClient(undefined, data, callback);\n  }\n\n  leaveClient(clientId?: string, data?: unknown, callback?: ErrCallback): void | Promise<void> {\n    if (!callback) {\n      if (typeof data === 'function') {\n        callback = data as ErrCallback;\n        data = null;\n      } else {\n        return Utils.promisify(this, 'leaveClient', [clientId, data]);\n      }\n    }\n\n    const channel = this.channel;\n    if (!channel.connectionManager.activeState()) {\n      callback?.(channel.connectionManager.getError());\n      return;\n    }\n\n    Logger.logAction(\n      Logger.LOG_MICRO,\n      'RealtimePresence.leaveClient()',\n      'leaving; channel = ' + this.channel.name + ', client = ' + clientId\n    );\n    const presence = PresenceMessage.fromValues({\n      action: 'leave',\n      data: data,\n    });\n    if (clientId) {\n      presence.clientId = clientId;\n    }\n\n    switch (channel.state) {\n      case 'attached':\n        channel.sendPresence(presence, callback);\n        break;\n      case 'attaching':\n        this.pendingPresence.push({\n          presence: presence,\n          callback: callback,\n        });\n        break;\n      case 'initialized':\n      case 'failed': {\n        /* we're not attached; therefore we let any entered status\n         * timeout by itself instead of attaching just in order to leave */\n        const err = new PartialErrorInfo('Unable to leave presence channel (incompatible state)', 90001);\n        callback?.(err);\n        break;\n      }\n      default:\n        callback?.(channel.invalidStateError());\n    }\n  }\n\n  // Return type is any to avoid conflict with base Presence class\n  get(this: RealtimePresence, params: RealtimePresenceParams, callback: StandardCallback<PresenceMessage[]>): any {\n    const args = Array.prototype.slice.call(arguments);\n    if (args.length == 1 && typeof args[0] == 'function') args.unshift(null);\n\n    params = args[0] as RealtimePresenceParams;\n    callback = args[1] as StandardCallback<PresenceMessage[]>;\n    const waitForSync = !params || ('waitForSync' in params ? params.waitForSync : true);\n\n    if (!callback) {\n      return Utils.promisify(this, 'get', args);\n    }\n\n    function returnMembers(members: PresenceMap) {\n      callback(null, params ? members.list(params) : members.values());\n    }\n\n    /* Special-case the suspended state: can still get (stale) presence set if waitForSync is false */\n    if (this.channel.state === 'suspended') {\n      if (waitForSync) {\n        callback(\n          ErrorInfo.fromValues({\n            statusCode: 400,\n            code: 91005,\n            message: 'Presence state is out of sync due to channel being in the SUSPENDED state',\n          })\n        );\n      } else {\n        returnMembers(this.members);\n      }\n      return;\n    }\n\n    waitAttached(this.channel, callback, () => {\n      const members = this.members;\n      if (waitForSync) {\n        members.waitSync(function () {\n          returnMembers(members);\n        });\n      } else {\n        returnMembers(members);\n      }\n    });\n  }\n\n  history(\n    params: RealtimeHistoryParams | null,\n    callback: PaginatedResultCallback<PresenceMessage>\n  ): void | Promise<PaginatedResult<PresenceMessage>> {\n    Logger.logAction(Logger.LOG_MICRO, 'RealtimePresence.history()', 'channel = ' + this.name);\n    /* params and callback are optional; see if params contains the callback */\n    if (callback === undefined) {\n      if (typeof params == 'function') {\n        callback = params;\n        params = null;\n      } else {\n        return Utils.promisify(this, 'history', arguments);\n      }\n    }\n\n    if (params && params.untilAttach) {\n      if (this.channel.state === 'attached') {\n        delete params.untilAttach;\n        params.from_serial = this.channel.properties.attachSerial;\n      } else {\n        callback(\n          new ErrorInfo(\n            'option untilAttach requires the channel to be attached, was: ' + this.channel.state,\n            40000,\n            400\n          )\n        );\n      }\n    }\n\n    Presence.prototype._history.call(this, params, callback);\n  }\n\n  setPresence(presenceSet: PresenceMessage[], isSync: boolean, syncChannelSerial?: string): void {\n    Logger.logAction(\n      Logger.LOG_MICRO,\n      'RealtimePresence.setPresence()',\n      'received presence for ' + presenceSet.length + ' participants; syncChannelSerial = ' + syncChannelSerial\n    );\n    let syncCursor, match;\n    const members = this.members,\n      myMembers = this._myMembers,\n      broadcastMessages = [],\n      connId = this.channel.connectionManager.connectionId;\n\n    if (isSync) {\n      this.members.startSync();\n      if (syncChannelSerial && (match = syncChannelSerial.match(/^[\\w-]+:(.*)$/))) {\n        syncCursor = match[1];\n      }\n    }\n\n    for (let i = 0; i < presenceSet.length; i++) {\n      const presence = PresenceMessage.fromValues(presenceSet[i]);\n      switch (presence.action) {\n        case 'leave':\n          if (members.remove(presence)) {\n            broadcastMessages.push(presence);\n          }\n          if (presence.connectionId === connId && !presence.isSynthesized()) {\n            myMembers.remove(presence);\n          }\n          break;\n        case 'enter':\n        case 'present':\n        case 'update':\n          if (members.put(presence)) {\n            broadcastMessages.push(presence);\n          }\n          if (presence.connectionId === connId) {\n            myMembers.put(presence);\n          }\n          break;\n      }\n    }\n    /* if this is the last (or only) message in a sequence of sync updates, end the sync */\n    if (isSync && !syncCursor) {\n      members.endSync();\n      this.channel.syncChannelSerial = null;\n    }\n\n    /* broadcast to listeners */\n    for (let i = 0; i < broadcastMessages.length; i++) {\n      const presence = broadcastMessages[i];\n      this.subscriptions.emit(presence.action as string, presence);\n    }\n  }\n\n  onAttached(hasPresence?: boolean): void {\n    Logger.logAction(\n      Logger.LOG_MINOR,\n      'RealtimePresence.onAttached()',\n      'channel = ' + this.channel.name + ', hasPresence = ' + hasPresence\n    );\n\n    if (hasPresence) {\n      this.members.startSync();\n    } else {\n      this._synthesizeLeaves(this.members.values());\n      this.members.clear();\n    }\n\n    // RTP17f: Re-enter own members when moving into the attached state.\n    this._ensureMyMembersPresent();\n\n    /* NB this must be after the _ensureMyMembersPresent call, which may add items to pendingPresence */\n    const pendingPresence = this.pendingPresence,\n      pendingPresCount = pendingPresence.length;\n\n    if (pendingPresCount) {\n      this.pendingPresence = [];\n      const presenceArray = [];\n      const multicaster = Multicaster.create();\n      Logger.logAction(\n        Logger.LOG_MICRO,\n        'RealtimePresence.onAttached',\n        'sending ' + pendingPresCount + ' queued presence messages'\n      );\n      for (let i = 0; i < pendingPresCount; i++) {\n        const event = pendingPresence[i];\n        presenceArray.push(event.presence);\n        multicaster.push(event.callback);\n      }\n      this.channel.sendPresence(presenceArray, multicaster);\n    }\n  }\n\n  actOnChannelState(state: string, hasPresence?: boolean, err?: ErrorInfo | null): void {\n    switch (state) {\n      case 'attached':\n        this.onAttached(hasPresence);\n        break;\n      case 'detached':\n      case 'failed':\n        this._clearMyMembers();\n        this.members.clear();\n      /* falls through */\n      case 'suspended':\n        this.failPendingPresence(err);\n        break;\n    }\n  }\n\n  failPendingPresence(err?: ErrorInfo | null): void {\n    if (this.pendingPresence.length) {\n      Logger.logAction(\n        Logger.LOG_MINOR,\n        'RealtimeChannel.failPendingPresence',\n        'channel; name = ' + this.channel.name + ', err = ' + Utils.inspectError(err)\n      );\n      for (let i = 0; i < this.pendingPresence.length; i++)\n        try {\n          this.pendingPresence[i].callback(err);\n          // eslint-disable-next-line no-empty\n        } catch (e) {}\n      this.pendingPresence = [];\n    }\n  }\n\n  _clearMyMembers(): void {\n    this._myMembers.clear();\n  }\n\n  _ensureMyMembersPresent(): void {\n    const myMembers = this._myMembers,\n      reenterCb = (err?: ErrorInfo | null) => {\n        if (err) {\n          const msg = 'Presence auto-re-enter failed: ' + err.toString();\n          const wrappedErr = new ErrorInfo(msg, 91004, 400);\n          Logger.logAction(Logger.LOG_ERROR, 'RealtimePresence._ensureMyMembersPresent()', msg);\n          const change = new ChannelStateChange(this.channel.state, this.channel.state, true, wrappedErr);\n          this.channel.emit('update', change);\n        }\n      };\n\n    for (const memberKey in myMembers.map) {\n      const entry = myMembers.map[memberKey];\n      Logger.logAction(\n        Logger.LOG_MICRO,\n        'RealtimePresence._ensureMyMembersPresent()',\n        'Auto-reentering clientId \"' + entry.clientId + '\" into the presence set'\n      );\n      // RTP17g: Send ENTER containing the member id, clientId and data\n      // attributes.\n      this._enterOrUpdateClient(entry.id, entry.clientId, entry.data, 'enter', reenterCb);\n    }\n  }\n\n  _synthesizeLeaves(items: PresenceMessage[]): void {\n    const subscriptions = this.subscriptions;\n    Utils.arrForEach(items, function (item) {\n      const presence = PresenceMessage.fromValues({\n        action: 'leave',\n        connectionId: item.connectionId,\n        clientId: item.clientId,\n        data: item.data,\n        encoding: item.encoding,\n        timestamp: Utils.now(),\n      });\n      subscriptions.emit('leave', presence);\n    });\n  }\n\n  subscribe(..._args: unknown[] /* [event], listener, [callback] */): void | Promise<void> {\n    const args = RealtimeChannel.processListenerArgs(_args);\n    const event = args[0];\n    const listener = args[1];\n    let callback = args[2];\n    const channel = this.channel;\n\n    if (!callback) {\n      return Utils.promisify(this, 'subscribe', [event, listener]);\n    }\n\n    if (channel.state === 'failed') {\n      callback(ErrorInfo.fromValues(channel.invalidStateError()));\n      return;\n    }\n\n    this.subscriptions.on(event, listener);\n    channel.attach(callback);\n  }\n\n  unsubscribe(..._args: unknown[] /* [event], listener */): void {\n    const args = RealtimeChannel.processListenerArgs(_args);\n    const event = args[0];\n    const listener = args[1];\n    this.subscriptions.off(event, listener);\n  }\n}\n\nclass PresenceMap extends EventEmitter {\n  map: Record<string, PresenceMessage>;\n  residualMembers: Record<string, PresenceMessage> | null;\n  syncInProgress: boolean;\n  presence: RealtimePresence;\n  memberKey: (item: PresenceMessage) => string;\n\n  constructor(presence: RealtimePresence, memberKey: (item: PresenceMessage) => string) {\n    super();\n    this.presence = presence;\n    this.map = Object.create(null);\n    this.syncInProgress = false;\n    this.residualMembers = null;\n    this.memberKey = memberKey;\n  }\n\n  get(key: string) {\n    return this.map[key];\n  }\n\n  getClient(clientId: string) {\n    const map = this.map,\n      result = [];\n    for (const key in map) {\n      const item = map[key];\n      if (item.clientId == clientId && item.action != 'absent') result.push(item);\n    }\n    return result;\n  }\n\n  list(params: RealtimePresenceParams) {\n    const map = this.map,\n      clientId = params && params.clientId,\n      connectionId = params && params.connectionId,\n      result = [];\n\n    for (const key in map) {\n      const item = map[key];\n      if (item.action === 'absent') continue;\n      if (clientId && clientId != item.clientId) continue;\n      if (connectionId && connectionId != item.connectionId) continue;\n      result.push(item);\n    }\n    return result;\n  }\n\n  put(item: PresenceMessage) {\n    if (item.action === 'enter' || item.action === 'update') {\n      item = PresenceMessage.fromValues(item);\n      item.action = 'present';\n    }\n    const map = this.map,\n      key = this.memberKey(item);\n    /* we've seen this member, so do not remove it at the end of sync */\n    if (this.residualMembers) delete this.residualMembers[key];\n\n    /* compare the timestamp of the new item with any existing member (or ABSENT witness) */\n    const existingItem = map[key];\n    if (existingItem && !newerThan(item, existingItem)) {\n      return false;\n    }\n    map[key] = item;\n    return true;\n  }\n\n  values() {\n    const map = this.map,\n      result = [];\n    for (const key in map) {\n      const item = map[key];\n      if (item.action != 'absent') result.push(item);\n    }\n    return result;\n  }\n\n  remove(item: PresenceMessage) {\n    const map = this.map,\n      key = this.memberKey(item);\n    const existingItem = map[key];\n\n    if (existingItem && !newerThan(item, existingItem)) {\n      return false;\n    }\n\n    /* RTP2f */\n    if (this.syncInProgress) {\n      item = PresenceMessage.fromValues(item);\n      item.action = 'absent';\n      map[key] = item;\n    } else {\n      delete map[key];\n    }\n\n    return true;\n  }\n\n  startSync() {\n    const map = this.map,\n      syncInProgress = this.syncInProgress;\n    Logger.logAction(\n      Logger.LOG_MINOR,\n      'PresenceMap.startSync()',\n      'channel = ' + this.presence.channel.name + '; syncInProgress = ' + syncInProgress\n    );\n    /* we might be called multiple times while a sync is in progress */\n    if (!this.syncInProgress) {\n      this.residualMembers = Utils.copy(map);\n      this.setInProgress(true);\n    }\n  }\n\n  endSync() {\n    const map = this.map,\n      syncInProgress = this.syncInProgress;\n    Logger.logAction(\n      Logger.LOG_MINOR,\n      'PresenceMap.endSync()',\n      'channel = ' + this.presence.channel.name + '; syncInProgress = ' + syncInProgress\n    );\n    if (syncInProgress) {\n      /* we can now strip out the ABSENT members, as we have\n       * received all of the out-of-order sync messages */\n      for (const memberKey in map) {\n        const entry = map[memberKey];\n        if (entry.action === 'absent') {\n          delete map[memberKey];\n        }\n      }\n      /* any members that were present at the start of the sync,\n       * and have not been seen in sync, can be removed, and leave events emitted */\n      this.presence._synthesizeLeaves(Utils.valuesArray(this.residualMembers as Record<string, PresenceMessage>));\n      for (const memberKey in this.residualMembers) {\n        delete map[memberKey];\n      }\n      this.residualMembers = null;\n\n      /* finish, notifying any waiters */\n      this.setInProgress(false);\n    }\n    this.emit('sync');\n  }\n\n  waitSync(callback: () => void) {\n    const syncInProgress = this.syncInProgress;\n    Logger.logAction(\n      Logger.LOG_MINOR,\n      'PresenceMap.waitSync()',\n      'channel = ' + this.presence.channel.name + '; syncInProgress = ' + syncInProgress\n    );\n    if (!syncInProgress) {\n      callback();\n      return;\n    }\n    this.once('sync', callback);\n  }\n\n  clear() {\n    this.map = {};\n    this.setInProgress(false);\n    this.residualMembers = null;\n  }\n\n  setInProgress(inProgress: boolean) {\n    Logger.logAction(Logger.LOG_MICRO, 'PresenceMap.setInProgress()', 'inProgress = ' + inProgress);\n    this.syncInProgress = inProgress;\n    this.presence.syncComplete = !inProgress;\n  }\n}\n\nexport default RealtimePresence;\n", "import ProtocolMessage from '../types/protocolmessage';\nimport EventEmitter from '../util/eventemitter';\nimport * as Utils from '../util/utils';\nimport Channel from './channel';\nimport Logger from '../util/logger';\nimport RealtimePresence from './realtimepresence';\nimport Message, { CipherOptions } from '../types/message';\nimport ChannelStateChange from './channelstatechange';\nimport ErrorInfo, { IPartialErrorInfo, PartialErrorInfo } from '../types/errorinfo';\nimport PresenceMessage from '../types/presencemessage';\nimport ConnectionErrors from '../transport/connectionerrors';\nimport * as API from '../../../../ably';\nimport ConnectionManager from '../transport/connectionmanager';\nimport ConnectionStateChange from './connectionstatechange';\nimport { ErrCallback, PaginatedResultCallback } from '../../types/utils';\nimport Realtime from './realtime';\n\ninterface RealtimeHistoryParams {\n  start?: number;\n  end?: number;\n  direction?: string;\n  limit?: number;\n  untilAttach?: boolean;\n  from_serial?: string;\n}\n\nconst actions = ProtocolMessage.Action;\nconst noop = function () {};\n\nfunction validateChannelOptions(options?: API.Types.ChannelOptions) {\n  if (options && 'params' in options && !Utils.isObject(options.params)) {\n    return new ErrorInfo('options.params must be an object', 40000, 400);\n  }\n  if (options && 'modes' in options) {\n    if (!Utils.isArray(options.modes)) {\n      return new ErrorInfo('options.modes must be an array', 40000, 400);\n    }\n    for (let i = 0; i < options.modes.length; i++) {\n      const currentMode = options.modes[i];\n      if (\n        !currentMode ||\n        typeof currentMode !== 'string' ||\n        !Utils.arrIn(ProtocolMessage.channelModes, String.prototype.toUpperCase.call(currentMode))\n      ) {\n        return new ErrorInfo('Invalid channel mode: ' + currentMode, 40000, 400);\n      }\n    }\n  }\n}\n\nclass RealtimeChannel extends Channel {\n  realtime: Realtime;\n  presence: RealtimePresence;\n  connectionManager: ConnectionManager;\n  state: API.Types.ChannelState;\n  subscriptions: EventEmitter;\n  filteredSubscriptions?: Map<\n    API.Types.messageCallback<Message>,\n    Map<API.Types.MessageFilter, API.Types.messageCallback<Message>[]>\n  >;\n  syncChannelSerial?: string | null;\n  properties: {\n    attachSerial: string | null | undefined;\n    channelSerial: string | null | undefined;\n  };\n  errorReason: ErrorInfo | string | null;\n  _requestedFlags: Array<API.Types.ChannelMode> | null;\n  _mode?: null | number;\n  _attachResume: boolean;\n  _decodingContext: { channelOptions: API.Types.ChannelOptions; plugins: any; baseEncodedPreviousPayload: undefined };\n  _lastPayload: {\n    messageId?: string | null;\n    protocolMessageChannelSerial?: string | null;\n    decodeFailureRecoveryInProgress: null | boolean;\n  };\n  _allChannelChanges: EventEmitter;\n  params?: Record<string, any>;\n  modes: string[] | undefined;\n  stateTimer?: number | NodeJS.Timeout | null;\n  retryTimer?: number | NodeJS.Timeout | null;\n  retryCount: number = 0;\n\n  constructor(realtime: Realtime, name: string, options?: API.Types.ChannelOptions) {\n    super(realtime, name, options);\n    Logger.logAction(Logger.LOG_MINOR, 'RealtimeChannel()', 'started; name = ' + name);\n    this.realtime = realtime;\n    this.presence = new RealtimePresence(this);\n    this.connectionManager = realtime.connection.connectionManager;\n    this.state = 'initialized';\n    this.subscriptions = new EventEmitter();\n    this.syncChannelSerial = undefined;\n    this.properties = {\n      attachSerial: undefined,\n      channelSerial: undefined,\n    };\n    this.setOptions(options);\n    this.errorReason = null;\n    this._requestedFlags = null;\n    this._mode = null;\n    this._attachResume = false;\n    this._decodingContext = {\n      channelOptions: this.channelOptions,\n      plugins: realtime.options.plugins || {},\n      baseEncodedPreviousPayload: undefined,\n    };\n    this._lastPayload = {\n      messageId: null,\n      protocolMessageChannelSerial: null,\n      decodeFailureRecoveryInProgress: null,\n    };\n    /* Only differences between this and the public event emitter is that this emits an\n     * update event for all ATTACHEDs, whether resumed or not */\n    this._allChannelChanges = new EventEmitter();\n  }\n\n  invalidStateError(): ErrorInfo {\n    return new ErrorInfo(\n      'Channel operation failed as channel state is ' + this.state,\n      90001,\n      400,\n      this.errorReason || undefined\n    );\n  }\n\n  static processListenerArgs(args: unknown[]): any[] {\n    /* [event], listener, [callback] */\n    args = Array.prototype.slice.call(args);\n    if (typeof args[0] === 'function') {\n      args.unshift(null);\n    }\n    if (args[args.length - 1] == undefined) {\n      args.pop();\n    }\n    return args;\n  }\n\n  setOptions(options?: API.Types.ChannelOptions, callback?: ErrCallback): void | Promise<void> {\n    if (!callback) {\n      return Utils.promisify(this, 'setOptions', arguments);\n    }\n    const _callback =\n      callback ||\n      function (err?: IPartialErrorInfo | null) {\n        if (err) {\n          Logger.logAction(Logger.LOG_ERROR, 'RealtimeChannel.setOptions()', 'Set options failed: ' + err.toString());\n        }\n      };\n    const err = validateChannelOptions(options);\n    if (err) {\n      _callback(err);\n      return;\n    }\n    Channel.prototype.setOptions.call(this, options);\n    if (this._decodingContext) this._decodingContext.channelOptions = this.channelOptions;\n    if (this._shouldReattachToSetOptions(options)) {\n      /* This does not just do _attach(true, null, callback) because that would put us\n       * into the 'attaching' state until we receive the new attached, which is\n       * conceptually incorrect: we are still attached, we just have a pending request to\n       * change some channel params. Per RTL17 going into the attaching state would mean\n       * rejecting messages until we have confirmation that the options have changed,\n       * which would unnecessarily lose message continuity. */\n      this.attachImpl();\n      // Ignore 'attaching' -- could be just due to to a resume & reattach, should not\n      // call back setOptions until we're definitely attached with the new options (or\n      // else in a terminal state)\n      this._allChannelChanges.once(\n        ['attached', 'update', 'detached', 'failed'],\n        function (this: { event: string }, stateChange: ConnectionStateChange) {\n          switch (this.event) {\n            case 'update':\n            case 'attached':\n              _callback?.(null);\n              return;\n            default:\n              _callback?.(stateChange.reason);\n              return;\n          }\n        }\n      );\n    } else {\n      _callback();\n    }\n  }\n\n  _shouldReattachToSetOptions(options?: API.Types.ChannelOptions) {\n    return (this.state === 'attached' || this.state === 'attaching') && (options?.params || options?.modes);\n  }\n\n  publish(...args: any[]): void | Promise<void> {\n    let messages = args[0];\n    let argCount = args.length;\n    let callback = args[argCount - 1];\n\n    if (typeof callback !== 'function') {\n      return Utils.promisify(this, 'publish', arguments);\n    }\n    if (!this.connectionManager.activeState()) {\n      callback(this.connectionManager.getError());\n      return;\n    }\n    if (argCount == 2) {\n      if (Utils.isObject(messages)) messages = [Message.fromValues(messages)];\n      else if (Utils.isArray(messages)) messages = Message.fromValuesArray(messages);\n      else\n        throw new ErrorInfo(\n          'The single-argument form of publish() expects a message object or an array of message objects',\n          40013,\n          400\n        );\n    } else {\n      messages = [Message.fromValues({ name: args[0], data: args[1] })];\n    }\n    const maxMessageSize = this.realtime.options.maxMessageSize;\n    Message.encodeArray(messages, this.channelOptions as CipherOptions, (err: Error | null) => {\n      if (err) {\n        callback(err);\n        return;\n      }\n      /* RSL1i */\n      const size = Message.getMessagesSize(messages);\n      if (size > maxMessageSize) {\n        callback(\n          new ErrorInfo(\n            'Maximum size of messages that can be published at once exceeded ( was ' +\n              size +\n              ' bytes; limit is ' +\n              maxMessageSize +\n              ' bytes)',\n            40009,\n            400\n          )\n        );\n        return;\n      }\n      this.__publish(messages, callback);\n    });\n  }\n\n  // Double underscore used to prevent type conflict with underlying Channel._publish method\n  __publish(messages: Array<Message>, callback: ErrCallback) {\n    Logger.logAction(Logger.LOG_MICRO, 'RealtimeChannel.publish()', 'message count = ' + messages.length);\n    const state = this.state;\n    switch (state) {\n      case 'failed':\n      case 'suspended':\n        callback(ErrorInfo.fromValues(this.invalidStateError()));\n        break;\n      default: {\n        Logger.logAction(Logger.LOG_MICRO, 'RealtimeChannel.publish()', 'sending message; channel state is ' + state);\n        const msg = new ProtocolMessage();\n        msg.action = actions.MESSAGE;\n        msg.channel = this.name;\n        msg.messages = messages;\n        this.sendMessage(msg, callback);\n        break;\n      }\n    }\n  }\n\n  onEvent(messages: Array<any>): void {\n    Logger.logAction(Logger.LOG_MICRO, 'RealtimeChannel.onEvent()', 'received message');\n    const subscriptions = this.subscriptions;\n    for (let i = 0; i < messages.length; i++) {\n      const message = messages[i];\n      subscriptions.emit(message.name, message);\n    }\n  }\n\n  attach(callback?: ErrCallback): void | Promise<void> {\n    if (!callback) {\n      return Utils.promisify(this, 'attach', arguments);\n    }\n    if (this.state === 'attached') {\n      callback();\n      return;\n    }\n\n    this._attach(false, null, callback);\n  }\n\n  _attach(forceReattach: boolean, attachReason: ErrorInfo | null, callback?: ErrCallback): void {\n    if (!callback) {\n      callback = function (err?: ErrorInfo | null) {\n        if (err) {\n          Logger.logAction(Logger.LOG_ERROR, 'RealtimeChannel._attach()', 'Channel attach failed: ' + err.toString());\n        }\n      };\n    }\n\n    const connectionManager = this.connectionManager;\n    if (!connectionManager.activeState()) {\n      callback(connectionManager.getError());\n      return;\n    }\n\n    if (this.state !== 'attaching' || forceReattach) {\n      this.requestState('attaching', attachReason);\n    }\n\n    this.once(function (this: { event: string }, stateChange: ChannelStateChange) {\n      switch (this.event) {\n        case 'attached':\n          callback?.();\n          break;\n        case 'detached':\n        case 'suspended':\n        case 'failed':\n          callback?.(\n            stateChange.reason ||\n              connectionManager.getError() ||\n              new ErrorInfo('Unable to attach; reason unknown; state = ' + this.event, 90000, 500)\n          );\n          break;\n        case 'detaching':\n          callback?.(new ErrorInfo('Attach request superseded by a subsequent detach request', 90000, 409));\n          break;\n      }\n    });\n  }\n\n  attachImpl(): void {\n    Logger.logAction(Logger.LOG_MICRO, 'RealtimeChannel.attachImpl()', 'sending ATTACH message');\n    const attachMsg = ProtocolMessage.fromValues({\n      action: actions.ATTACH,\n      channel: this.name,\n      params: this.channelOptions.params,\n      // RTL4c1: Includes the channel serial to resume from a previous message\n      // or attachment.\n      channelSerial: this.properties.channelSerial,\n    });\n    if (this._requestedFlags) {\n      attachMsg.encodeModesToFlags(this._requestedFlags);\n    } else if (this.channelOptions.modes) {\n      attachMsg.encodeModesToFlags(Utils.allToUpperCase(this.channelOptions.modes) as API.Types.ChannelMode[]);\n    }\n    if (this._attachResume) {\n      attachMsg.setFlag('ATTACH_RESUME');\n    }\n    if (this._lastPayload.decodeFailureRecoveryInProgress) {\n      attachMsg.channelSerial = this._lastPayload.protocolMessageChannelSerial;\n    }\n    this.sendMessage(attachMsg, noop);\n  }\n\n  detach(callback: ErrCallback): void | Promise<void> {\n    if (!callback) {\n      return Utils.promisify(this, 'detach', arguments);\n    }\n    const connectionManager = this.connectionManager;\n    if (!connectionManager.activeState()) {\n      callback(connectionManager.getError());\n      return;\n    }\n    switch (this.state) {\n      case 'suspended':\n        this.notifyState('detached');\n        callback();\n        break;\n      case 'detached':\n        callback();\n        break;\n      case 'failed':\n        callback(new ErrorInfo('Unable to detach; channel state = failed', 90001, 400));\n        break;\n      default:\n        this.requestState('detaching');\n      // eslint-disable-next-line no-fallthrough\n      case 'detaching':\n        this.once(function (this: { event: string }, stateChange: ChannelStateChange) {\n          switch (this.event) {\n            case 'detached':\n              callback();\n              break;\n            case 'attached':\n            case 'suspended':\n            case 'failed':\n              callback(\n                stateChange.reason ||\n                  connectionManager.getError() ||\n                  new ErrorInfo('Unable to detach; reason unknown; state = ' + this.event, 90000, 500)\n              );\n              break;\n            case 'attaching':\n              callback(new ErrorInfo('Detach request superseded by a subsequent attach request', 90000, 409));\n              break;\n          }\n        });\n    }\n  }\n\n  detachImpl(callback?: ErrCallback): void {\n    Logger.logAction(Logger.LOG_MICRO, 'RealtimeChannel.detach()', 'sending DETACH message');\n    const msg = ProtocolMessage.fromValues({ action: actions.DETACH, channel: this.name });\n    this.sendMessage(msg, callback || noop);\n  }\n\n  subscribe(...args: unknown[] /* [event], listener, [callback] */): void | Promise<void> {\n    const [event, listener, callback] = RealtimeChannel.processListenerArgs(args);\n\n    if (!callback) {\n      return Utils.promisify(this, 'subscribe', [event, listener]);\n    }\n\n    if (this.state === 'failed') {\n      callback?.(ErrorInfo.fromValues(this.invalidStateError()));\n      return;\n    }\n\n    // Filtered\n    if (event && typeof event === 'object' && !Array.isArray(event)) {\n      this._subscribeFilter(event, listener);\n    } else {\n      this.subscriptions.on(event, listener);\n    }\n\n    return this.attach(callback || noop);\n  }\n\n  _subscribeFilter(filter: API.Types.MessageFilter, listener: API.Types.messageCallback<Message>) {\n    const filteredListener = (m: Message) => {\n      const mapping: { [key in keyof API.Types.MessageFilter]: any } = {\n        name: m.name,\n        refTimeserial: m.extras?.ref?.timeserial,\n        refType: m.extras?.ref?.type,\n        isRef: !!m.extras?.ref?.timeserial,\n        clientId: m.clientId,\n      };\n      // Check if any values are defined in the filter and if they match the value in the message object\n      if (\n        Object.entries(filter).find(([key, value]) =>\n          value !== undefined ? mapping[key as keyof API.Types.MessageFilter] !== value : false\n        )\n      ) {\n        return;\n      }\n      listener(m);\n    };\n    this._addFilteredSubscription(filter, listener, filteredListener);\n    this.subscriptions.on(filteredListener);\n  }\n\n  // Adds a new filtered subscription\n  _addFilteredSubscription(\n    filter: API.Types.MessageFilter,\n    realListener: API.Types.messageCallback<Message>,\n    filteredListener: API.Types.messageCallback<Message>\n  ) {\n    if (!this.filteredSubscriptions) {\n      this.filteredSubscriptions = new Map<\n        API.Types.messageCallback<Message>,\n        Map<API.Types.MessageFilter, API.Types.messageCallback<Message>[]>\n      >();\n    }\n    if (this.filteredSubscriptions.has(realListener)) {\n      const realListenerMap = this.filteredSubscriptions.get(realListener) as Map<\n        API.Types.MessageFilter,\n        API.Types.messageCallback<Message>[]\n      >;\n      // Add the filtered listener to the map, or append to the array if this filter has already been used\n      realListenerMap.set(filter, realListenerMap?.get(filter)?.concat(filteredListener) || [filteredListener]);\n    } else {\n      this.filteredSubscriptions.set(\n        realListener,\n        new Map<API.Types.MessageFilter, API.Types.messageCallback<Message>[]>([[filter, [filteredListener]]])\n      );\n    }\n  }\n\n  _getAndDeleteFilteredSubscriptions(\n    filter: API.Types.MessageFilter | undefined,\n    realListener: API.Types.messageCallback<Message> | undefined\n  ): API.Types.messageCallback<Message>[] {\n    // No filtered subscriptions map means there has been no filtered subscriptions yet, so return nothing\n    if (!this.filteredSubscriptions) {\n      return [];\n    }\n    // Only a filter is passed in with no specific listener\n    if (!realListener && filter) {\n      // Return each listener which is attached to the specified filter object\n      return Array.from(this.filteredSubscriptions.entries())\n        .map(([key, filterMaps]) => {\n          // Get (then delete) the maps matching this filter\n          let listenerMaps = filterMaps.get(filter);\n          filterMaps.delete(filter);\n          // Clear the parent if nothing is left\n          if (filterMaps.size === 0) {\n            this.filteredSubscriptions?.delete(key);\n          }\n          return listenerMaps;\n        })\n        .reduce(\n          (prev, cur) => (cur ? (prev as API.Types.messageCallback<Message>[]).concat(...cur) : prev),\n          []\n        ) as API.Types.messageCallback<Message>[];\n    }\n\n    // No subscriptions for this listener\n    if (!realListener || !this.filteredSubscriptions.has(realListener)) {\n      return [];\n    }\n    const realListenerMap = this.filteredSubscriptions.get(realListener) as Map<\n      API.Types.MessageFilter,\n      API.Types.messageCallback<Message>[]\n    >;\n    // If no filter is specified return all listeners using that function\n    if (!filter) {\n      // array.flat is not available unless we support es2019 or higher\n      const listeners = Array.from(realListenerMap.values()).reduce((prev, cur) => prev.concat(...cur), []);\n      // remove the listener from the map\n      this.filteredSubscriptions.delete(realListener);\n      return listeners;\n    }\n\n    let listeners = realListenerMap.get(filter);\n    realListenerMap.delete(filter);\n\n    return listeners || [];\n  }\n\n  unsubscribe(...args: unknown[] /* [event], listener */): void {\n    const [event, listener] = RealtimeChannel.processListenerArgs(args);\n\n    // If we either have a filtered listener, a filter or both we need to do additional processing to find the original function(s)\n    if ((typeof event === 'object' && !listener) || this.filteredSubscriptions?.has(listener)) {\n      this._getAndDeleteFilteredSubscriptions(event, listener).forEach((l) => this.subscriptions.off(l));\n      return;\n    }\n\n    this.subscriptions.off(event, listener);\n  }\n\n  sync(): void {\n    /* check preconditions */\n    switch (this.state) {\n      case 'initialized':\n      case 'detaching':\n      case 'detached':\n        throw new PartialErrorInfo('Unable to sync to channel; not attached', 40000);\n      default:\n    }\n    const connectionManager = this.connectionManager;\n    if (!connectionManager.activeState()) {\n      throw connectionManager.getError();\n    }\n\n    /* send sync request */\n    const syncMessage = ProtocolMessage.fromValues({ action: actions.SYNC, channel: this.name });\n    if (this.syncChannelSerial) {\n      syncMessage.channelSerial = this.syncChannelSerial;\n    }\n    connectionManager.send(syncMessage);\n  }\n\n  sendMessage(msg: ProtocolMessage, callback?: ErrCallback): void {\n    this.connectionManager.send(msg, this.realtime.options.queueMessages, callback);\n  }\n\n  sendPresence(presence: PresenceMessage | PresenceMessage[], callback?: ErrCallback): void {\n    const msg = ProtocolMessage.fromValues({\n      action: actions.PRESENCE,\n      channel: this.name,\n      presence: Utils.isArray(presence)\n        ? PresenceMessage.fromValuesArray(presence)\n        : [PresenceMessage.fromValues(presence)],\n    });\n    this.sendMessage(msg, callback);\n  }\n\n  // Access to this method is synchronised by ConnectionManager#processChannelMessage, in order to synchronise access to the state stored in _decodingContext.\n  async processMessage(message: ProtocolMessage): Promise<void> {\n    if (\n      message.action === actions.ATTACHED ||\n      message.action === actions.MESSAGE ||\n      message.action === actions.PRESENCE\n    ) {\n      // RTL15b\n      this.setChannelSerial(message.channelSerial);\n    }\n\n    let syncChannelSerial,\n      isSync = false;\n    switch (message.action) {\n      case actions.ATTACHED: {\n        this.properties.attachSerial = message.channelSerial;\n        this._mode = message.getMode();\n        this.params = (message as any).params || {};\n        const modesFromFlags = message.decodeModesFromFlags();\n        this.modes = (modesFromFlags && Utils.allToLowerCase(modesFromFlags)) || undefined;\n        const resumed = message.hasFlag('RESUMED');\n        const hasPresence = message.hasFlag('HAS_PRESENCE');\n        if (this.state === 'attached') {\n          if (!resumed) {\n            /* On a loss of continuity, the presence set needs to be re-synced */\n            this.presence.onAttached(hasPresence);\n          }\n          const change = new ChannelStateChange(this.state, this.state, resumed, message.error);\n          this._allChannelChanges.emit('update', change);\n          if (!resumed || this.channelOptions.updateOnAttached) {\n            this.emit('update', change);\n          }\n        } else if (this.state === 'detaching') {\n          /* RTL5i: re-send DETACH and remain in the 'detaching' state */\n          this.checkPendingState();\n        } else {\n          this.notifyState('attached', message.error, resumed, hasPresence);\n        }\n        break;\n      }\n\n      case actions.DETACHED: {\n        const detachErr = message.error\n          ? ErrorInfo.fromValues(message.error)\n          : new ErrorInfo('Channel detached', 90001, 404);\n        if (this.state === 'detaching') {\n          this.notifyState('detached', detachErr);\n        } else if (this.state === 'attaching') {\n          /* Only retry immediately if we were previously attached. If we were\n           * attaching, go into suspended, fail messages, and wait a few seconds\n           * before retrying */\n          this.notifyState('suspended', detachErr);\n        } else {\n          this.requestState('attaching', detachErr);\n        }\n        break;\n      }\n\n      case actions.SYNC:\n        /* syncs can have channelSerials, but might not if the sync is one page long */\n        isSync = true;\n        syncChannelSerial = this.syncChannelSerial = message.channelSerial;\n        /* syncs can happen on channels with no presence data as part of connection\n         * resuming, in which case protocol message has no presence property */\n        if (!message.presence) break;\n      // eslint-disable-next-line no-fallthrough\n      case actions.PRESENCE: {\n        const presence = message.presence as Array<PresenceMessage>;\n        const { id, connectionId, timestamp } = message;\n\n        const options = this.channelOptions;\n        let presenceMsg: PresenceMessage;\n        for (let i = 0; i < presence.length; i++) {\n          try {\n            presenceMsg = presence[i];\n            await PresenceMessage.decode(presenceMsg, options);\n            if (!presenceMsg.connectionId) presenceMsg.connectionId = connectionId;\n            if (!presenceMsg.timestamp) presenceMsg.timestamp = timestamp;\n            if (!presenceMsg.id) presenceMsg.id = id + ':' + i;\n          } catch (e) {\n            Logger.logAction(Logger.LOG_ERROR, 'RealtimeChannel.processMessage()', (e as Error).toString());\n          }\n        }\n        this.presence.setPresence(presence, isSync, syncChannelSerial as any);\n        break;\n      }\n      case actions.MESSAGE: {\n        //RTL17\n        if (this.state !== 'attached') {\n          Logger.logAction(\n            Logger.LOG_MAJOR,\n            'RealtimeChannel.processMessage()',\n            'Message \"' +\n              message.id +\n              '\" skipped as this channel \"' +\n              this.name +\n              '\" state is not \"attached\" (state is \"' +\n              this.state +\n              '\").'\n          );\n          return;\n        }\n\n        const messages = message.messages as Array<Message>,\n          firstMessage = messages[0],\n          lastMessage = messages[messages.length - 1],\n          id = message.id,\n          connectionId = message.connectionId,\n          timestamp = message.timestamp;\n\n        if (\n          firstMessage.extras &&\n          firstMessage.extras.delta &&\n          firstMessage.extras.delta.from !== this._lastPayload.messageId\n        ) {\n          const msg =\n            'Delta message decode failure - previous message not available for message \"' +\n            message.id +\n            '\" on this channel \"' +\n            this.name +\n            '\".';\n          Logger.logAction(Logger.LOG_ERROR, 'RealtimeChannel.processMessage()', msg);\n          this._startDecodeFailureRecovery(new ErrorInfo(msg, 40018, 400));\n          break;\n        }\n\n        for (let i = 0; i < messages.length; i++) {\n          const msg = messages[i];\n          try {\n            await Message.decode(msg, this._decodingContext);\n          } catch (e) {\n            /* decrypt failed .. the most likely cause is that we have the wrong key */\n            Logger.logAction(Logger.LOG_ERROR, 'RealtimeChannel.processMessage()', (e as Error).toString());\n            switch ((e as ErrorInfo).code) {\n              case 40018:\n                /* decode failure */\n                this._startDecodeFailureRecovery(e as ErrorInfo);\n                return;\n              case 40019:\n              /* No vcdiff plugin passed in - no point recovering, give up */\n              // eslint-disable-next-line no-fallthrough\n              case 40021:\n                /* Browser does not support deltas, similarly no point recovering */\n                this.notifyState('failed', e as ErrorInfo);\n                return;\n            }\n          }\n          if (!msg.connectionId) msg.connectionId = connectionId;\n          if (!msg.timestamp) msg.timestamp = timestamp;\n          if (!msg.id) msg.id = id + ':' + i;\n        }\n        this._lastPayload.messageId = lastMessage.id;\n        this._lastPayload.protocolMessageChannelSerial = message.channelSerial;\n        this.onEvent(messages);\n        break;\n      }\n\n      case actions.ERROR: {\n        /* there was a channel-specific error */\n        const err = message.error as ErrorInfo;\n        if (err && err.code == 80016) {\n          /* attach/detach operation attempted on superseded transport handle */\n          this.checkPendingState();\n        } else {\n          this.notifyState('failed', ErrorInfo.fromValues(err));\n        }\n        break;\n      }\n\n      default:\n        Logger.logAction(\n          Logger.LOG_ERROR,\n          'RealtimeChannel.processMessage()',\n          'Fatal protocol error: unrecognised action (' + message.action + ')'\n        );\n        this.connectionManager.abort(ConnectionErrors.unknownChannelErr());\n    }\n  }\n\n  _startDecodeFailureRecovery(reason: ErrorInfo): void {\n    if (!this._lastPayload.decodeFailureRecoveryInProgress) {\n      Logger.logAction(\n        Logger.LOG_MAJOR,\n        'RealtimeChannel.processMessage()',\n        'Starting decode failure recovery process.'\n      );\n      this._lastPayload.decodeFailureRecoveryInProgress = true;\n      this._attach(true, reason, () => {\n        this._lastPayload.decodeFailureRecoveryInProgress = false;\n      });\n    }\n  }\n\n  onAttached(): void {\n    Logger.logAction(Logger.LOG_MINOR, 'RealtimeChannel.onAttached', 'activating channel; name = ' + this.name);\n  }\n\n  notifyState(\n    state: API.Types.ChannelState,\n    reason?: ErrorInfo | null,\n    resumed?: boolean,\n    hasPresence?: boolean\n  ): void {\n    Logger.logAction(\n      Logger.LOG_MICRO,\n      'RealtimeChannel.notifyState',\n      'name = ' + this.name + ', current state = ' + this.state + ', notifying state ' + state\n    );\n    this.clearStateTimer();\n\n    // RTP5a1\n    if (Utils.arrIn(['detached', 'suspended', 'failed'], state)) {\n      this.properties.channelSerial = null;\n    }\n\n    if (state === this.state) {\n      return;\n    }\n    this.presence.actOnChannelState(state, hasPresence, reason);\n    if (state === 'suspended' && this.connectionManager.state.sendEvents) {\n      this.startRetryTimer();\n    } else {\n      this.cancelRetryTimer();\n    }\n    if (reason) {\n      this.errorReason = reason;\n    }\n    const change = new ChannelStateChange(this.state, state, resumed, reason);\n    const logLevel = state === 'failed' ? Logger.LOG_ERROR : Logger.LOG_MAJOR;\n    Logger.logAction(\n      logLevel,\n      'Channel state for channel \"' + this.name + '\"',\n      state + (reason ? '; reason: ' + reason : '')\n    );\n\n    if (state !== 'attaching' && state !== 'suspended') {\n      this.retryCount = 0;\n    }\n\n    /* Note: we don't set inProgress for pending states until the request is actually in progress */\n    if (state === 'attached') {\n      this.onAttached();\n    }\n\n    if (state === 'attached') {\n      this._attachResume = true;\n    } else if (state === 'detaching' || state === 'failed') {\n      this._attachResume = false;\n    }\n\n    this.state = state;\n    this._allChannelChanges.emit(state, change);\n    this.emit(state, change);\n  }\n\n  requestState(state: API.Types.ChannelState, reason?: ErrorInfo | null): void {\n    Logger.logAction(Logger.LOG_MINOR, 'RealtimeChannel.requestState', 'name = ' + this.name + ', state = ' + state);\n    this.notifyState(state, reason);\n    /* send the event and await response */\n    this.checkPendingState();\n  }\n\n  checkPendingState(): void {\n    /* if can't send events, do nothing */\n    const cmState = this.connectionManager.state;\n    /* Allow attach messages to queue up when synchronizing, since this will be\n     * the state we'll be in when upgrade transport.active triggers a checkpendingstate */\n    if (!(cmState.sendEvents || cmState.forceQueueEvents)) {\n      Logger.logAction(\n        Logger.LOG_MINOR,\n        'RealtimeChannel.checkPendingState',\n        'sendEvents is false; state is ' + this.connectionManager.state.state\n      );\n      return;\n    }\n\n    Logger.logAction(\n      Logger.LOG_MINOR,\n      'RealtimeChannel.checkPendingState',\n      'name = ' + this.name + ', state = ' + this.state\n    );\n    /* Only start the state timer running when actually sending the event */\n    switch (this.state) {\n      case 'attaching':\n        this.startStateTimerIfNotRunning();\n        this.attachImpl();\n        break;\n      case 'detaching':\n        this.startStateTimerIfNotRunning();\n        this.detachImpl();\n        break;\n      case 'attached':\n        /* resume any sync operation that was in progress */\n        this.sync();\n        break;\n      default:\n        break;\n    }\n  }\n\n  timeoutPendingState(): void {\n    switch (this.state) {\n      case 'attaching': {\n        const err = new ErrorInfo('Channel attach timed out', 90007, 408);\n        this.notifyState('suspended', err);\n        break;\n      }\n      case 'detaching': {\n        const err = new ErrorInfo('Channel detach timed out', 90007, 408);\n        this.notifyState('attached', err);\n        break;\n      }\n      default:\n        this.checkPendingState();\n        break;\n    }\n  }\n\n  startStateTimerIfNotRunning(): void {\n    if (!this.stateTimer) {\n      this.stateTimer = setTimeout(() => {\n        Logger.logAction(Logger.LOG_MINOR, 'RealtimeChannel.startStateTimerIfNotRunning', 'timer expired');\n        this.stateTimer = null;\n        this.timeoutPendingState();\n      }, this.realtime.options.timeouts.realtimeRequestTimeout);\n    }\n  }\n\n  clearStateTimer(): void {\n    const stateTimer = this.stateTimer;\n    if (stateTimer) {\n      clearTimeout(stateTimer);\n      this.stateTimer = null;\n    }\n  }\n\n  startRetryTimer(): void {\n    if (this.retryTimer) return;\n\n    this.retryCount++;\n    const retryDelay =\n      this.realtime.options.timeouts.channelRetryTimeout *\n      Utils.getJitterCoefficient() *\n      Utils.getBackoffCoefficient(this.retryCount);\n\n    this.retryTimer = setTimeout(() => {\n      /* If connection is not connected, just leave in suspended, a reattach\n       * will be triggered once it connects again */\n      if (this.state === 'suspended' && this.connectionManager.state.sendEvents) {\n        this.retryTimer = null;\n        Logger.logAction(Logger.LOG_MINOR, 'RealtimeChannel retry timer expired', 'attempting a new attach');\n        this.requestState('attaching');\n      }\n    }, retryDelay);\n  }\n\n  cancelRetryTimer(): void {\n    if (this.retryTimer) {\n      clearTimeout(this.retryTimer as NodeJS.Timeout);\n      this.retryTimer = null;\n    }\n  }\n\n  history = function (\n    this: RealtimeChannel,\n    params: RealtimeHistoryParams | null,\n    callback: PaginatedResultCallback<Message>\n  ): void | Promise<PaginatedResultCallback<Message>> {\n    Logger.logAction(Logger.LOG_MICRO, 'RealtimeChannel.history()', 'channel = ' + this.name);\n    /* params and callback are optional; see if params contains the callback */\n    if (callback === undefined) {\n      if (typeof params == 'function') {\n        callback = params;\n        params = null;\n      } else {\n        return Utils.promisify(this, 'history', arguments);\n      }\n    }\n\n    if (params && params.untilAttach) {\n      if (this.state !== 'attached') {\n        callback(new ErrorInfo('option untilAttach requires the channel to be attached', 40000, 400));\n        return;\n      }\n      if (!this.properties.attachSerial) {\n        callback(\n          new ErrorInfo(\n            'untilAttach was specified and channel is attached, but attachSerial is not defined',\n            40000,\n            400\n          )\n        );\n        return;\n      }\n      delete params.untilAttach;\n      params.from_serial = this.properties.attachSerial;\n    }\n\n    Channel.prototype._history.call(this, params, callback);\n  } as any;\n\n  whenState = ((state: string, listener: ErrCallback) => {\n    return EventEmitter.prototype.whenState.call(this, state, this.state, listener);\n  }) as any;\n\n  /* @returns null (if can safely be released) | ErrorInfo (if cannot) */\n  getReleaseErr(): ErrorInfo | null {\n    const s = this.state;\n    if (s === 'initialized' || s === 'detached' || s === 'failed') {\n      return null;\n    }\n    return new ErrorInfo(\n      'Can only release a channel in a state where there is no possibility of further updates from the server being received (initialized, detached, or failed); was ' +\n        s,\n      90001,\n      400\n    );\n  }\n\n  setChannelSerial(channelSerial?: string | null): void {\n    Logger.logAction(\n      Logger.LOG_MICRO,\n      'RealtimeChannel.setChannelSerial()',\n      'Updating channel serial; serial = ' + channelSerial + '; previous = ' + this.properties.channelSerial\n    );\n\n    // RTP17h: Only update the channel serial if its present (it won't always\n    // be set).\n    if (channelSerial) {\n      this.properties.channelSerial = channelSerial;\n    }\n  }\n}\n\nexport default RealtimeChannel;\n", "import * as Utils from '../util/utils';\nimport { DefaultRest as Rest } from './defaultrest';\nimport EventEmitter from '../util/eventemitter';\nimport Logger from '../util/logger';\nimport Connection from './connection';\nimport RealtimeChannel from './realtimechannel';\nimport ErrorInfo from '../types/errorinfo';\nimport ProtocolMessage from '../types/protocolmessage';\nimport { ChannelOptions } from '../../types/channel';\nimport ClientOptions from '../../types/ClientOptions';\nimport * as API from '../../../../ably';\nimport ConnectionManager from '../transport/connectionmanager';\nimport Platform from 'common/platform';\nimport Message from '../types/message';\n\nclass Realtime extends Rest {\n  _channels: any;\n  connection: Connection;\n\n  constructor(options: ClientOptions) {\n    super(options);\n    Logger.logAction(Logger.LOG_MINOR, 'Realtime()', '');\n    this.connection = new Connection(this, this.options);\n    this._channels = new Channels(this);\n    if (options.autoConnect !== false) this.connect();\n  }\n\n  get channels() {\n    return this._channels;\n  }\n\n  connect(): void {\n    Logger.logAction(Logger.LOG_MINOR, 'Realtime.connect()', '');\n    this.connection.connect();\n  }\n\n  close(): void {\n    Logger.logAction(Logger.LOG_MINOR, 'Realtime.close()', '');\n    this.connection.close();\n  }\n\n  static Utils = Utils;\n  static ConnectionManager = ConnectionManager;\n  static Platform = Platform;\n  static ProtocolMessage = ProtocolMessage;\n  static Message = Message;\n  static Crypto?: typeof Platform.Crypto;\n}\n\nclass Channels extends EventEmitter {\n  realtime: Realtime;\n  all: Record<string, RealtimeChannel>;\n\n  constructor(realtime: Realtime) {\n    super();\n    this.realtime = realtime;\n    this.all = Object.create(null);\n    realtime.connection.connectionManager.on('transport.active', () => {\n      this.onTransportActive();\n    });\n  }\n\n  channelSerials(): { [name: string]: string } {\n    let serials: { [name: string]: string } = {};\n    for (const name of Utils.keysArray(this.all, true)) {\n      const channel = this.all[name];\n      if (channel.properties.channelSerial) {\n        serials[name] = channel.properties.channelSerial;\n      }\n    }\n    return serials;\n  }\n\n  // recoverChannels gets the given channels and sets their channel serials.\n  recoverChannels(channelSerials: { [name: string]: string }) {\n    for (const name of Utils.keysArray(channelSerials, true)) {\n      const channel = this.get(name);\n      channel.properties.channelSerial = channelSerials[name];\n    }\n  }\n\n  // Access to this method is synchronised by ConnectionManager#processChannelMessage.\n  async processChannelMessage(msg: ProtocolMessage) {\n    const channelName = msg.channel;\n    if (channelName === undefined) {\n      Logger.logAction(\n        Logger.LOG_ERROR,\n        'Channels.processChannelMessage()',\n        'received event unspecified channel, action = ' + msg.action\n      );\n      return;\n    }\n    const channel = this.all[channelName];\n    if (!channel) {\n      Logger.logAction(\n        Logger.LOG_ERROR,\n        'Channels.processChannelMessage()',\n        'received event for non-existent channel: ' + channelName\n      );\n      return;\n    }\n    await channel.processMessage(msg);\n  }\n\n  /* called when a transport becomes connected; reattempt attach/detach\n   * for channels that are attaching or detaching. */\n  onTransportActive() {\n    for (const channelName in this.all) {\n      const channel = this.all[channelName];\n      if (channel.state === 'attaching' || channel.state === 'detaching') {\n        channel.checkPendingState();\n      } else if (channel.state === 'suspended') {\n        channel._attach(false, null);\n      } else if (channel.state === 'attached') {\n        // Note explicity request the state, channel.attach() would do nothing\n        // as its already attached.\n        channel.requestState('attaching');\n      }\n    }\n  }\n\n  /* Connection interruptions (ie when the connection will no longer queue\n   * events) imply connection state changes for any channel which is either\n   * attached, pending, or will attempt to become attached in the future */\n  propogateConnectionInterruption(connectionState: string, reason: ErrorInfo) {\n    const connectionStateToChannelState: Record<string, API.Types.ChannelState> = {\n      closing: 'detached',\n      closed: 'detached',\n      failed: 'failed',\n      suspended: 'suspended',\n    };\n    const fromChannelStates = ['attaching', 'attached', 'detaching', 'suspended'];\n    const toChannelState = connectionStateToChannelState[connectionState];\n\n    for (const channelId in this.all) {\n      const channel = this.all[channelId];\n      if (Utils.arrIn(fromChannelStates, channel.state)) {\n        channel.notifyState(toChannelState, reason);\n      }\n    }\n  }\n\n  get(name: string, channelOptions?: ChannelOptions) {\n    name = String(name);\n    let channel = this.all[name];\n    if (!channel) {\n      channel = this.all[name] = new RealtimeChannel(this.realtime, name, channelOptions);\n    } else if (channelOptions) {\n      if (channel._shouldReattachToSetOptions(channelOptions)) {\n        throw new ErrorInfo(\n          'Channels.get() cannot be used to set channel options that would cause the channel to reattach. Please, use RealtimeChannel.setOptions() instead.',\n          40000,\n          400\n        );\n      }\n      channel.setOptions(channelOptions);\n    }\n    return channel;\n  }\n\n  getDerived(name: string, deriveOptions: API.Types.DeriveOptions, channelOptions?: ChannelOptions) {\n    if (deriveOptions.filter) {\n      const filter = Utils.toBase64(deriveOptions.filter);\n      const match = Utils.matchDerivedChannel(name);\n      name = `[filter=${filter}${match.qualifierParam}]${match.channelName}`;\n    }\n    return this.get(name, channelOptions);\n  }\n\n  /* Included to support certain niche use-cases; most users should ignore this.\n   * Please do not use this unless you know what you're doing */\n  release(name: string) {\n    name = String(name);\n    const channel = this.all[name];\n    if (!channel) {\n      return;\n    }\n    const releaseErr = channel.getReleaseErr();\n    if (releaseErr) {\n      throw releaseErr;\n    }\n    delete this.all[name];\n  }\n}\n\nexport default Realtime;\n", "/**\n * Copied from https://gist.github.com/stevendesu/2d52f7b5e1f1184af3b667c0b5e054b8\n *\n * \"A simple, open-source, HMAC-SHA256 implementation in pure JavaScript. Designed for efficient minification.\"\n *\n * I asked about licensing, and the author said:\n *\n * > Feel free to use it however you'd like \uD83D\uDE04 As the gist title indicates,\n * > this is \"a simple open source implementation\". Feel free to choose whatever\n * > license you find most permissible, but I offer no warranty for the code.\n * > It's 100% free to do with as you please.\n */\n\n// To ensure cross-browser support even without a proper SubtleCrypto\n// impelmentation (or without access to the impelmentation, as is the case with\n// Chrome loaded over HTTP instead of HTTPS), this library can create SHA-256\n// HMAC signatures using nothing but raw JavaScript\n\n/* eslint-disable no-magic-numbers, id-length, no-param-reassign, new-cap */\n\n// By giving internal functions names that we can mangle, future calls to\n// them are reduced to a single byte (minor space savings in minified file)\nvar uint8Array = Uint8Array;\nvar uint32Array = Uint32Array;\nvar pow = Math.pow;\n\n// Will be initialized below\n// Using a Uint32Array instead of a simple array makes the minified code\n// a bit bigger (we lose our `unshift()` hack), but comes with huge\n// performance gains\nvar DEFAULT_STATE = new uint32Array(8);\nvar ROUND_CONSTANTS: number[] = [];\n\n// Reusable object for expanded message\n// Using a Uint32Array instead of a simple array makes the minified code\n// 7 bytes larger, but comes with huge performance gains\nvar M = new uint32Array(64);\n\n// After minification the code to compute the default state and round\n// constants is smaller than the output. More importantly, this serves as a\n// good educational aide for anyone wondering where the magic numbers come\n// from. No magic numbers FTW!\nfunction getFractionalBits(n: number) {\n  return ((n - (n | 0)) * pow(2, 32)) | 0;\n}\n\nvar n = 2,\n  nPrime = 0;\nwhile (nPrime < 64) {\n  // isPrime() was in-lined from its original function form to save\n  // a few bytes\n  var isPrime = true;\n  // Math.sqrt() was replaced with pow(n, 1/2) to save a few bytes\n  // var sqrtN = pow(n, 1 / 2);\n  // So technically to determine if a number is prime you only need to\n  // check numbers up to the square root. However this function only runs\n  // once and we're only computing the first 64 primes (up to 311), so on\n  // any modern CPU this whole function runs in a couple milliseconds.\n  // By going to n / 2 instead of sqrt(n) we net 8 byte savings and no\n  // scaling performance cost\n  for (var factor = 2; factor <= n / 2; factor++) {\n    if (n % factor === 0) {\n      isPrime = false;\n    }\n  }\n  if (isPrime) {\n    if (nPrime < 8) {\n      DEFAULT_STATE[nPrime] = getFractionalBits(pow(n, 1 / 2));\n    }\n    ROUND_CONSTANTS[nPrime] = getFractionalBits(pow(n, 1 / 3));\n\n    nPrime++;\n  }\n\n  n++;\n}\n\n// For cross-platform support we need to ensure that all 32-bit words are\n// in the same endianness. A UTF-8 TextEncoder will return BigEndian data,\n// so upon reading or writing to our ArrayBuffer we'll only swap the bytes\n// if our system is LittleEndian (which is about 99% of CPUs)\nvar LittleEndian = !!new uint8Array(new uint32Array([1]).buffer)[0];\n\nfunction convertEndian(word: number) {\n  if (LittleEndian) {\n    return (\n      // byte 1 -> byte 4\n      (word >>> 24) |\n      // byte 2 -> byte 3\n      (((word >>> 16) & 0xff) << 8) |\n      // byte 3 -> byte 2\n      ((word & 0xff00) << 8) |\n      // byte 4 -> byte 1\n      (word << 24)\n    );\n  } else {\n    return word;\n  }\n}\n\nfunction rightRotate(word: number, bits: number) {\n  return (word >>> bits) | (word << (32 - bits));\n}\n\nfunction sha256(data: Uint8Array) {\n  // Copy default state\n  var STATE = DEFAULT_STATE.slice();\n\n  // Caching this reduces occurrences of \".length\" in minified JavaScript\n  // 3 more byte savings! :D\n  var legth = data.length;\n\n  // Pad data\n  var bitLength = legth * 8;\n  var newBitLength = 512 - ((bitLength + 64) % 512) - 1 + bitLength + 65;\n\n  // \"bytes\" and \"words\" are stored BigEndian\n  var bytes = new uint8Array(newBitLength / 8);\n  var words = new uint32Array(bytes.buffer);\n\n  bytes.set(data, 0);\n  // Append a 1\n  bytes[legth] = 0b10000000;\n  // Store length in BigEndian\n  words[words.length - 1] = convertEndian(bitLength);\n\n  // Loop iterator (avoid two instances of \"var\") -- saves 2 bytes\n  var round;\n\n  // Process blocks (512 bits / 64 bytes / 16 words at a time)\n  for (var block = 0; block < newBitLength / 32; block += 16) {\n    var workingState = STATE.slice();\n\n    // Rounds\n    for (round = 0; round < 64; round++) {\n      var MRound;\n      // Expand message\n      if (round < 16) {\n        // Convert to platform Endianness for later math\n        MRound = convertEndian(words[block + round]);\n      } else {\n        var gamma0x = M[round - 15];\n        var gamma1x = M[round - 2];\n        MRound =\n          M[round - 7] +\n          M[round - 16] +\n          (rightRotate(gamma0x, 7) ^ rightRotate(gamma0x, 18) ^ (gamma0x >>> 3)) +\n          (rightRotate(gamma1x, 17) ^ rightRotate(gamma1x, 19) ^ (gamma1x >>> 10));\n      }\n\n      // M array matches platform endianness\n      M[round] = MRound |= 0;\n\n      // Computation\n      var t1 =\n        (rightRotate(workingState[4], 6) ^ rightRotate(workingState[4], 11) ^ rightRotate(workingState[4], 25)) +\n        ((workingState[4] & workingState[5]) ^ (~workingState[4] & workingState[6])) +\n        workingState[7] +\n        MRound +\n        ROUND_CONSTANTS[round];\n      var t2 =\n        (rightRotate(workingState[0], 2) ^ rightRotate(workingState[0], 13) ^ rightRotate(workingState[0], 22)) +\n        ((workingState[0] & workingState[1]) ^ (workingState[2] & (workingState[0] ^ workingState[1])));\n      for (var i = 7; i > 0; i--) {\n        workingState[i] = workingState[i - 1];\n      }\n      workingState[0] = (t1 + t2) | 0;\n      workingState[4] = (workingState[4] + t1) | 0;\n    }\n\n    // Update state\n    for (round = 0; round < 8; round++) {\n      STATE[round] = (STATE[round] + workingState[round]) | 0;\n    }\n  }\n\n  // Finally the state needs to be converted to BigEndian for output\n  // And we want to return a Uint8Array, not a Uint32Array\n  return new uint8Array(\n    new uint32Array(\n      STATE.map(function (val) {\n        return convertEndian(val);\n      })\n    ).buffer\n  );\n}\n\nexport function hmac(key: Uint8Array, data: Uint8Array) {\n  if (key.length > 64) key = sha256(key);\n\n  if (key.length < 64) {\n    const tmp = new Uint8Array(64);\n    tmp.set(key, 0);\n    key = tmp;\n  }\n\n  // Generate inner and outer keys\n  var innerKey = new Uint8Array(64);\n  var outerKey = new Uint8Array(64);\n  for (var i = 0; i < 64; i++) {\n    innerKey[i] = 0x36 ^ key[i];\n    outerKey[i] = 0x5c ^ key[i];\n  }\n\n  // Append the innerKey\n  var msg = new Uint8Array(data.length + 64);\n  msg.set(innerKey, 0);\n  msg.set(data, 64);\n\n  // Has the previous message and append the outerKey\n  var result = new Uint8Array(64 + 32);\n  result.set(outerKey, 0);\n  result.set(sha256(msg), 64);\n\n  // Hash the previous message\n  return sha256(result);\n}\n", "import Platform from 'common/platform';\nimport IBufferUtils from 'common/types/IBufferUtils';\nimport { hmac as hmacSha256 } from './hmac-sha256';\n\n/* Most BufferUtils methods that return a binary object return an ArrayBuffer\n * The exception is toBuffer, which returns a Uint8Array (and won't work on\n * browsers too old to support it) */\n\nexport type Bufferlike = BufferSource;\nexport type Output = Bufferlike;\nexport type ToBufferOutput = Uint8Array;\n\nclass BufferUtils implements IBufferUtils<Bufferlike, Output, ToBufferOutput> {\n  base64CharSet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\n  hexCharSet = '0123456789abcdef';\n\n  // // https://gist.githubusercontent.com/jonleighton/958841/raw/f200e30dfe95212c0165ccf1ae000ca51e9de803/gistfile1.js\n  uint8ViewToBase64(bytes: Uint8Array) {\n    let base64 = '';\n    const encodings = this.base64CharSet;\n\n    const byteLength = bytes.byteLength;\n    const byteRemainder = byteLength % 3;\n    const mainLength = byteLength - byteRemainder;\n\n    let a, b, c, d;\n    let chunk;\n\n    // Main loop deals with bytes in chunks of 3\n    for (let i = 0; i < mainLength; i = i + 3) {\n      // Combine the three bytes into a single integer\n      chunk = (bytes[i] << 16) | (bytes[i + 1] << 8) | bytes[i + 2];\n\n      // Use bitmasks to extract 6-bit segments from the triplet\n      a = (chunk & 16515072) >> 18; // 16515072 = (2^6 - 1) << 18\n      b = (chunk & 258048) >> 12; // 258048   = (2^6 - 1) << 12\n      c = (chunk & 4032) >> 6; // 4032     = (2^6 - 1) << 6\n      d = chunk & 63; // 63       = 2^6 - 1\n\n      // Convert the raw binary segments to the appropriate ASCII encoding\n      base64 += encodings[a] + encodings[b] + encodings[c] + encodings[d];\n    }\n\n    // Deal with the remaining bytes and padding\n    if (byteRemainder == 1) {\n      chunk = bytes[mainLength];\n\n      a = (chunk & 252) >> 2; // 252 = (2^6 - 1) << 2\n\n      // Set the 4 least significant bits to zero\n      b = (chunk & 3) << 4; // 3   = 2^2 - 1\n\n      base64 += encodings[a] + encodings[b] + '==';\n    } else if (byteRemainder == 2) {\n      chunk = (bytes[mainLength] << 8) | bytes[mainLength + 1];\n\n      a = (chunk & 64512) >> 10; // 64512 = (2^6 - 1) << 10\n      b = (chunk & 1008) >> 4; // 1008  = (2^6 - 1) << 4\n\n      // Set the 2 least significant bits to zero\n      c = (chunk & 15) << 2; // 15    = 2^4 - 1\n\n      base64 += encodings[a] + encodings[b] + encodings[c] + '=';\n    }\n\n    return base64;\n  }\n\n  base64ToArrayBuffer(base64: string) {\n    const binary_string = atob?.(base64) as string; // this will always be defined in browser so it's safe to cast\n    const len = binary_string.length;\n    const bytes = new Uint8Array(len);\n    for (let i = 0; i < len; i++) {\n      const ascii = binary_string.charCodeAt(i);\n      bytes[i] = ascii;\n    }\n    return bytes.buffer;\n  }\n\n  isBuffer(buffer: unknown): buffer is Bufferlike {\n    return buffer instanceof ArrayBuffer || ArrayBuffer.isView(buffer);\n  }\n\n  /* In browsers, returns a Uint8Array */\n  toBuffer(buffer: Bufferlike): ToBufferOutput {\n    if (!ArrayBuffer) {\n      throw new Error(\"Can't convert to Buffer: browser does not support the necessary types\");\n    }\n\n    if (buffer instanceof ArrayBuffer) {\n      return new Uint8Array(buffer);\n    }\n\n    if (ArrayBuffer.isView(buffer)) {\n      return new Uint8Array(buffer.buffer);\n    }\n\n    throw new Error('BufferUtils.toBuffer expected an ArrayBuffer or a view onto one');\n  }\n\n  toArrayBuffer(buffer: Bufferlike): ArrayBuffer {\n    if (buffer instanceof ArrayBuffer) {\n      return buffer;\n    }\n    return this.toBuffer(buffer).buffer;\n  }\n\n  base64Encode(buffer: Bufferlike) {\n    return this.uint8ViewToBase64(this.toBuffer(buffer));\n  }\n\n  base64Decode(str: string): Output {\n    if (ArrayBuffer && Platform.Config.atob) {\n      return this.base64ToArrayBuffer(str);\n    } else {\n      throw new Error('Expected ArrayBuffer to exist and Platform.Config.atob to be configured');\n    }\n  }\n\n  hexEncode(buffer: Bufferlike) {\n    const arrayBuffer =\n      buffer instanceof ArrayBuffer\n        ? buffer\n        : buffer.buffer.slice(buffer.byteOffset, buffer.byteOffset + buffer.byteLength);\n    const uint8Array = new Uint8Array(arrayBuffer);\n    return uint8Array.reduce((accum, byte) => accum + byte.toString(16).padStart(2, '0'), '');\n  }\n\n  hexDecode(hexEncodedBytes: string) {\n    if (hexEncodedBytes.length % 2 !== 0) {\n      throw new Error(\"Can't create a byte array from a hex string of odd length\");\n    }\n\n    const uint8Array = new Uint8Array(hexEncodedBytes.length / 2);\n\n    for (let i = 0; i < uint8Array.length; i++) {\n      uint8Array[i] = parseInt(hexEncodedBytes.slice(2 * i, 2 * (i + 1)), 16);\n    }\n\n    return uint8Array.buffer.slice(uint8Array.byteOffset, uint8Array.byteOffset + uint8Array.byteLength);\n  }\n\n  utf8Encode(string: string) {\n    if (Platform.Config.TextEncoder) {\n      return new Platform.Config.TextEncoder().encode(string).buffer;\n    } else {\n      throw new Error('Expected TextEncoder to be configured');\n    }\n  }\n\n  /* For utf8 decoding we apply slightly stricter input validation than to\n   * hexEncode/base64Encode/etc: in those we accept anything that Buffer.from\n   * can take (in particular allowing strings, which are just interpreted as\n   * binary); here we ensure that the input is actually a buffer since trying\n   * to utf8-decode a string to another string is almost certainly a mistake */\n  utf8Decode(buffer: Bufferlike) {\n    if (!this.isBuffer(buffer)) {\n      throw new Error('Expected input of utf8decode to be an arraybuffer or typed array');\n    }\n    if (TextDecoder) {\n      return new TextDecoder().decode(buffer);\n    } else {\n      throw new Error('Expected TextDecoder to be configured');\n    }\n  }\n\n  areBuffersEqual(buffer1: Bufferlike, buffer2: Bufferlike) {\n    if (!buffer1 || !buffer2) return false;\n    const arrayBuffer1 = this.toArrayBuffer(buffer1);\n    const arrayBuffer2 = this.toArrayBuffer(buffer2);\n\n    if (arrayBuffer1.byteLength != arrayBuffer2.byteLength) return false;\n\n    const bytes1 = new Uint8Array(arrayBuffer1);\n    const bytes2 = new Uint8Array(arrayBuffer2);\n\n    for (var i = 0; i < bytes1.length; i++) {\n      if (bytes1[i] != bytes2[i]) return false;\n    }\n    return true;\n  }\n\n  byteLength(buffer: Bufferlike) {\n    if (buffer instanceof ArrayBuffer || ArrayBuffer.isView(buffer)) {\n      return buffer.byteLength;\n    }\n    return -1;\n  }\n\n  /* Returns ArrayBuffer on browser and Buffer on Node.js */\n  arrayBufferViewToBuffer(arrayBufferView: ArrayBufferView) {\n    return arrayBufferView.buffer;\n  }\n\n  hmacSha256(message: Bufferlike, key: Bufferlike): Output {\n    return hmacSha256(this.toBuffer(key), this.toBuffer(message));\n  }\n}\n\nexport default new BufferUtils();\n", "import Logger from '../../../../common/lib/util/logger';\nimport ErrorInfo from 'common/lib/types/errorinfo';\nimport * as API from '../../../../../ably';\nimport ICryptoStatic, { IGetCipherParams } from '../../../../common/types/ICryptoStatic';\nimport ICipher from '../../../../common/types/ICipher';\nimport { CryptoDataTypes } from '../../../../common/types/cryptoDataTypes';\nimport BufferUtils, { Bufferlike, Output as BufferUtilsOutput } from './bufferutils';\nimport { IPlatformConfig } from 'common/types/IPlatformConfig';\n\n// The type to which ./msgpack.ts deserializes elements of the `bin` or `ext` type\ntype MessagePackBinaryType = ArrayBuffer;\n\ntype IV = CryptoDataTypes.IV<BufferUtilsOutput>;\ntype InputPlaintext = CryptoDataTypes.InputPlaintext<Bufferlike, BufferUtilsOutput>;\ntype OutputCiphertext = ArrayBuffer;\ntype InputCiphertext = CryptoDataTypes.InputCiphertext<MessagePackBinaryType, BufferUtilsOutput>;\ntype OutputPlaintext = ArrayBuffer;\n\nvar CryptoFactory = function (config: IPlatformConfig, bufferUtils: typeof BufferUtils) {\n  var DEFAULT_ALGORITHM = 'aes';\n  var DEFAULT_KEYLENGTH = 256; // bits\n  var DEFAULT_MODE = 'cbc';\n  var DEFAULT_BLOCKLENGTH = 16; // bytes\n  var DEFAULT_BLOCKLENGTH_WORDS = 4; // 32-bit words\n  var UINT32_SUP = 0x100000000;\n\n  /**\n   * Internal: generate an array of secure random data corresponding to the given length of bytes\n   * @param bytes\n   * @param callback\n   */\n  var generateRandom: (byteLength: number, callback: (error: Error | null, result: ArrayBuffer | null) => void) => void;\n  if (config.getRandomArrayBuffer) {\n    generateRandom = config.getRandomArrayBuffer;\n  } else if (typeof Uint32Array !== 'undefined' && config.getRandomValues) {\n    var blockRandomArray = new Uint32Array(DEFAULT_BLOCKLENGTH_WORDS);\n    generateRandom = function (bytes, callback) {\n      var words = bytes / 4,\n        nativeArray = words == DEFAULT_BLOCKLENGTH_WORDS ? blockRandomArray : new Uint32Array(words);\n      config.getRandomValues!(nativeArray, function (err) {\n        if (typeof callback !== 'undefined') {\n          callback(err, bufferUtils.toArrayBuffer(nativeArray));\n        }\n      });\n    };\n  } else {\n    generateRandom = function (bytes, callback) {\n      Logger.logAction(\n        Logger.LOG_MAJOR,\n        'Ably.Crypto.generateRandom()',\n        'Warning: the browser you are using does not support secure cryptographically secure randomness generation; falling back to insecure Math.random()'\n      );\n      var words = bytes / 4,\n        array = new Uint32Array(words);\n      for (var i = 0; i < words; i++) {\n        array[i] = Math.floor(Math.random() * UINT32_SUP);\n      }\n\n      callback(null, bufferUtils.toArrayBuffer(array));\n    };\n  }\n\n  /**\n   * Internal: checks that the cipherParams are a valid combination. Currently\n   * just checks that the calculated keyLength is a valid one for aes-cbc\n   */\n  function validateCipherParams(params: API.Types.CipherParams) {\n    if (params.algorithm === 'aes' && params.mode === 'cbc') {\n      if (params.keyLength === 128 || params.keyLength === 256) {\n        return;\n      }\n      throw new Error(\n        'Unsupported key length ' +\n          params.keyLength +\n          ' for aes-cbc encryption. Encryption key must be 128 or 256 bits (16 or 32 ASCII characters)'\n      );\n    }\n  }\n\n  function normaliseBase64(string: string) {\n    /* url-safe base64 strings use _ and - instread of / and + */\n    return string.replace('_', '/').replace('-', '+');\n  }\n\n  function isCipherParams(\n    params: API.Types.CipherParams | API.Types.CipherParamOptions\n  ): params is API.Types.CipherParams {\n    // Although API.Types.CipherParams is an interface, the documentation for its `key` property makes it clear that the only valid way to form one is by using getDefaultParams. The implementation of getDefaultParams returns an instance of CipherParams.\n    return params instanceof CipherParams;\n  }\n\n  /**\n   * A class encapsulating the client-specifiable parameters for\n   * the cipher.\n   *\n   * algorithm is the name of the algorithm in the default system provider,\n   * or the lower-cased version of it; eg \"aes\" or \"AES\".\n   *\n   * Clients are recommended to not call this directly, but instead to use the\n   * Crypto.getDefaultParams helper, which will fill in any fields not supplied\n   * with default values and validation the result.\n   */\n  class CipherParams implements API.Types.CipherParams {\n    algorithm: string;\n    keyLength: number;\n    mode: string;\n    key: ArrayBuffer;\n\n    constructor(algorithm: string, keyLength: number, mode: string, key: ArrayBuffer) {\n      this.algorithm = algorithm;\n      this.keyLength = keyLength;\n      this.mode = mode;\n      this.key = key;\n    }\n  }\n\n  /**\n   * Utility classes and interfaces for message payload encryption.\n   *\n   * This class supports AES/CBC/PKCS5 with a default keylength of 128 bits\n   * but supporting other keylengths. Other algorithms and chaining modes are\n   * not supported directly, but supportable by extending/implementing the base\n   * classes and interfaces here.\n   *-\n   * Secure random data for creation of Initialization Vectors (IVs) and keys\n   * is obtained from window.crypto.getRandomValues if available, or from\n   * Math.random() if not. Clients who do not want to depend on Math.random()\n   * should polyfill window.crypto.getRandomValues with a library that seeds\n   * a PRNG with real entropy.\n   *\n   * Each message payload is encrypted with an IV in CBC mode, and the IV is\n   * concatenated with the resulting raw ciphertext to construct the \"ciphertext\"\n   * data passed to the recipient.\n   */\n  class Crypto {\n    static CipherParams = CipherParams;\n\n    /**\n     * Obtain a complete CipherParams instance from the provided params, filling\n     * in any not provided with default values, calculating a keyLength from\n     * the supplied key, and validating the result.\n     * @param params an object containing at a minimum a `key` key with value the\n     * key, as either a binary or a base64-encoded string.\n     * May optionally also contain: algorithm (defaults to AES),\n     * mode (defaults to 'cbc')\n     */\n    static getDefaultParams(params: API.Types.CipherParamOptions) {\n      var key: ArrayBuffer;\n\n      if (!params.key) {\n        throw new Error('Crypto.getDefaultParams: a key is required');\n      }\n\n      if (typeof params.key === 'string') {\n        key = bufferUtils.toArrayBuffer(bufferUtils.base64Decode(normaliseBase64(params.key)));\n      } else if (params.key instanceof ArrayBuffer) {\n        key = params.key;\n      } else {\n        key = bufferUtils.toArrayBuffer(params.key);\n      }\n\n      var algorithm = params.algorithm || DEFAULT_ALGORITHM;\n      var keyLength = key.byteLength * 8;\n      var mode = params.mode || DEFAULT_MODE;\n      var cipherParams = new CipherParams(algorithm, keyLength, mode, key);\n\n      if (params.keyLength && params.keyLength !== cipherParams.keyLength) {\n        throw new Error(\n          'Crypto.getDefaultParams: a keyLength of ' +\n            params.keyLength +\n            ' was specified, but the key actually has length ' +\n            cipherParams.keyLength\n        );\n      }\n\n      validateCipherParams(cipherParams);\n      return cipherParams;\n    }\n\n    /**\n     * Generate a random encryption key from the supplied keylength (or the\n     * default keyLength if none supplied) as an ArrayBuffer\n     * @param keyLength (optional) the required keyLength in bits\n     */\n    static async generateRandomKey(keyLength?: number): Promise<API.Types.CipherKey> {\n      return new Promise((resolve, reject) => {\n        generateRandom((keyLength || DEFAULT_KEYLENGTH) / 8, function (err, buf) {\n          if (err) {\n            const errorInfo = new ErrorInfo('Failed to generate random key: ' + err.message, 400, 50000, err);\n            reject(errorInfo);\n          } else {\n            resolve(buf!);\n          }\n        });\n      });\n    }\n\n    /**\n     * Internal; get a ChannelCipher instance based on the given cipherParams\n     * @param params either a CipherParams instance or some subset of its\n     * fields that includes a key\n     */\n    static getCipher(params: IGetCipherParams<IV>) {\n      var cipherParams = isCipherParams(params) ? (params as CipherParams) : this.getDefaultParams(params);\n\n      return {\n        cipherParams: cipherParams,\n        cipher: new CBCCipher(cipherParams, params.iv ?? null),\n      };\n    }\n  }\n\n  Crypto satisfies ICryptoStatic<IV, InputPlaintext, OutputCiphertext, InputCiphertext, OutputPlaintext>;\n\n  class CBCCipher implements ICipher<InputPlaintext, OutputCiphertext, InputCiphertext, OutputPlaintext> {\n    algorithm: string;\n    webCryptoAlgorithm: string;\n    key: ArrayBuffer;\n    iv: ArrayBuffer | null;\n\n    constructor(params: CipherParams, iv: IV | null) {\n      if (!crypto.subtle) {\n        if (isSecureContext) {\n          throw new Error(\n            'Crypto operations are not possible since the browser\u2019s SubtleCrypto class is unavailable (reason unknown).'\n          );\n        } else {\n          throw new Error(\n            'Crypto operations are is not possible since the current environment is a non-secure context and hence the browser\u2019s SubtleCrypto class is not available.'\n          );\n        }\n      }\n\n      this.algorithm = params.algorithm + '-' + String(params.keyLength) + '-' + params.mode;\n      this.webCryptoAlgorithm = params.algorithm + '-' + params.mode;\n      this.key = bufferUtils.toArrayBuffer(params.key);\n      this.iv = iv ? bufferUtils.toArrayBuffer(iv) : null;\n    }\n\n    private concat(buffer1: Bufferlike, buffer2: Bufferlike) {\n      const output = new ArrayBuffer(buffer1.byteLength + buffer2.byteLength);\n      const outputView = new DataView(output);\n\n      const buffer1View = new DataView(bufferUtils.toArrayBuffer(buffer1));\n      for (let i = 0; i < buffer1View.byteLength; i++) {\n        outputView.setInt8(i, buffer1View.getInt8(i));\n      }\n\n      const buffer2View = new DataView(bufferUtils.toArrayBuffer(buffer2));\n      for (let i = 0; i < buffer2View.byteLength; i++) {\n        outputView.setInt8(buffer1View.byteLength + i, buffer2View.getInt8(i));\n      }\n\n      return output;\n    }\n\n    encrypt(plaintext: InputPlaintext, callback: (error: Error | null, data: OutputCiphertext | null) => void) {\n      Logger.logAction(Logger.LOG_MICRO, 'CBCCipher.encrypt()', '');\n\n      const encryptAsync = async () => {\n        const iv = await new Promise((resolve: (iv: IV) => void, reject: (error: Error) => void) => {\n          this.getIv((error, iv) => {\n            if (error) {\n              reject(error);\n            } else {\n              resolve(iv!);\n            }\n          });\n        });\n\n        const cryptoKey = await crypto.subtle.importKey('raw', this.key, this.webCryptoAlgorithm, false, ['encrypt']);\n        const ciphertext = await crypto.subtle.encrypt({ name: this.webCryptoAlgorithm, iv }, cryptoKey, plaintext);\n\n        return this.concat(iv, ciphertext);\n      };\n\n      encryptAsync()\n        .then((ciphertext) => {\n          callback(null, ciphertext);\n        })\n        .catch((error) => {\n          callback(error, null);\n        });\n    }\n\n    async decrypt(ciphertext: InputCiphertext): Promise<OutputPlaintext> {\n      Logger.logAction(Logger.LOG_MICRO, 'CBCCipher.decrypt()', '');\n\n      const ciphertextArrayBuffer = bufferUtils.toArrayBuffer(ciphertext);\n      const iv = ciphertextArrayBuffer.slice(0, DEFAULT_BLOCKLENGTH);\n      const ciphertextBody = ciphertextArrayBuffer.slice(DEFAULT_BLOCKLENGTH);\n\n      const cryptoKey = await crypto.subtle.importKey('raw', this.key, this.webCryptoAlgorithm, false, ['decrypt']);\n      return crypto.subtle.decrypt({ name: this.webCryptoAlgorithm, iv }, cryptoKey, ciphertextBody);\n    }\n\n    getIv(callback: (error: Error | null, iv: ArrayBuffer | null) => void) {\n      if (this.iv) {\n        var iv = this.iv;\n        this.iv = null;\n        callback(null, iv);\n        return;\n      }\n\n      /* Since the iv for a new block is the ciphertext of the last, this\n       * sets a new iv (= aes(randomBlock XOR lastCipherText)) as well as\n       * returning it */\n      generateRandom(DEFAULT_BLOCKLENGTH, function (err, randomBlock) {\n        if (err) {\n          callback(err, null);\n          return;\n        }\n        callback(null, bufferUtils.toArrayBuffer(randomBlock!));\n      });\n    }\n  }\n\n  return Crypto;\n};\n\nexport default CryptoFactory;\n", "enum XHRStates {\n  REQ_SEND = 0,\n  REQ_RECV = 1,\n  REQ_RECV_POLL = 2,\n  REQ_RECV_STREAM = 3,\n}\n\nexport default XHRStates;\n", "import * as Utils from 'common/lib/util/utils';\nimport EventEmitter from 'common/lib/util/eventemitter';\nimport ErrorInfo, { IPartialErrorInfo, PartialErrorInfo } from 'common/lib/types/errorinfo';\nimport Logger from 'common/lib/util/logger';\nimport Defaults from 'common/lib/util/defaults';\nimport HttpMethods from 'common/constants/HttpMethods';\nimport IXHRRequest from 'common/types/IXHRRequest';\nimport { RequestParams } from 'common/types/http';\nimport XHRStates from 'common/constants/XHRStates';\nimport Platform from 'common/platform';\n\nfunction isAblyError(responseBody: unknown, headers: Record<string, string>): responseBody is { error?: ErrorInfo } {\n  return Utils.arrIn(Utils.allToLowerCase(Utils.keysArray(headers)), 'x-ably-errorcode');\n}\n\nfunction getAblyError(responseBody: unknown, headers: Record<string, string>) {\n  if (isAblyError(responseBody, headers)) {\n    return responseBody.error && ErrorInfo.fromValues(responseBody.error);\n  }\n}\n\ndeclare const global: {\n  XDomainRequest: unknown;\n};\n\nconst noop = function () {};\nlet idCounter = 0;\nconst pendingRequests: Record<string, XHRRequest> = {};\n\nconst isIE = typeof global !== 'undefined' && global.XDomainRequest;\n\nfunction ieVersion() {\n  const match = navigator.userAgent.toString().match(/MSIE\\s([\\d.]+)/);\n  return match && Number(match[1]);\n}\n\nfunction needJsonEnvelope() {\n  /* IE 10 xhr bug: http://stackoverflow.com/a/16320339 */\n  let version;\n  return isIE && (version = ieVersion()) && version === 10;\n}\n\nfunction getHeader(xhr: XMLHttpRequest, header: string) {\n  return xhr.getResponseHeader && xhr.getResponseHeader(header);\n}\n\n/* Safari mysteriously returns 'Identity' for transfer-encoding when in fact\n * it is 'chunked'. So instead, decide that it is chunked when\n * transfer-encoding is present or content-length is absent.  ('or' because\n * when using http2 streaming, there's no transfer-encoding header, but can\n * still deduce streaming from lack of content-length) */\nfunction isEncodingChunked(xhr: XMLHttpRequest) {\n  return (\n    xhr.getResponseHeader && (xhr.getResponseHeader('transfer-encoding') || !xhr.getResponseHeader('content-length'))\n  );\n}\n\nfunction getHeadersAsObject(xhr: XMLHttpRequest) {\n  const headerPairs = Utils.trim(xhr.getAllResponseHeaders()).split('\\r\\n');\n  const headers: Record<string, string> = {};\n  for (let i = 0; i < headerPairs.length; i++) {\n    const parts = headerPairs[i].split(':').map(Utils.trim);\n    headers[parts[0].toLowerCase()] = parts[1];\n  }\n  return headers;\n}\n\nclass XHRRequest extends EventEmitter implements IXHRRequest {\n  uri: string;\n  headers: Record<string, string>;\n  body: unknown;\n  method: string;\n  requestMode: number;\n  timeouts: Record<string, number>;\n  timedOut: boolean;\n  requestComplete: boolean;\n  id: string;\n  streamComplete?: boolean;\n  xhr?: XMLHttpRequest | null;\n  timer?: NodeJS.Timeout | number | null;\n\n  constructor(\n    uri: string,\n    headers: Record<string, string> | null,\n    params: Record<string, string>,\n    body: unknown,\n    requestMode: number,\n    timeouts: Record<string, number>,\n    method?: HttpMethods\n  ) {\n    super();\n    params = params || {};\n    params.rnd = Utils.cheapRandStr();\n    if (needJsonEnvelope() && !params.envelope) params.envelope = 'json';\n    this.uri = uri + Utils.toQueryString(params);\n    this.headers = headers || {};\n    this.body = body;\n    this.method = method ? method.toUpperCase() : Utils.isEmptyArg(body) ? 'GET' : 'POST';\n    this.requestMode = requestMode;\n    this.timeouts = timeouts;\n    this.timedOut = false;\n    this.requestComplete = false;\n    this.id = String(++idCounter);\n    pendingRequests[this.id] = this;\n  }\n\n  static createRequest(\n    uri: string,\n    headers: Record<string, string> | null,\n    params: RequestParams,\n    body: unknown,\n    requestMode: number,\n    timeouts: Record<string, number> | null,\n    method?: HttpMethods\n  ): XHRRequest {\n    /* XHR requests are used either with the context being a realtime\n     * transport, or with timeouts passed in (for when used by a rest client),\n     * or completely standalone.  Use the appropriate timeouts in each case */\n    const _timeouts = timeouts || Defaults.TIMEOUTS;\n    return new XHRRequest(\n      uri,\n      headers,\n      Utils.copy(params) as Record<string, string>,\n      body,\n      requestMode,\n      _timeouts,\n      method\n    );\n  }\n\n  complete(\n    err?: IPartialErrorInfo | null,\n    body?: unknown,\n    headers?: Record<string, string> | null,\n    unpacked?: boolean | null,\n    statusCode?: number\n  ): void {\n    if (!this.requestComplete) {\n      this.requestComplete = true;\n      if (!err && body) {\n        this.emit('data', body);\n      }\n      this.emit('complete', err, body, headers, unpacked, statusCode);\n      this.dispose();\n    }\n  }\n\n  abort(): void {\n    this.dispose();\n  }\n\n  exec(): void {\n    let headers = this.headers;\n    const timeout =\n        this.requestMode == XHRStates.REQ_SEND ? this.timeouts.httpRequestTimeout : this.timeouts.recvTimeout,\n      timer = (this.timer = setTimeout(() => {\n        this.timedOut = true;\n        xhr.abort();\n      }, timeout)),\n      method = this.method,\n      xhr = (this.xhr = new XMLHttpRequest()),\n      accept = headers['accept'];\n    let body = this.body;\n    let responseType: XMLHttpRequestResponseType = 'text';\n\n    if (!accept) {\n      // Default to JSON\n      headers['accept'] = 'application/json';\n    } else if (accept.indexOf('application/x-msgpack') === 0) {\n      // Msgpack responses will be typed as ArrayBuffer\n      responseType = 'arraybuffer';\n    }\n\n    if (body) {\n      const contentType = headers['content-type'] || (headers['content-type'] = 'application/json');\n      if (contentType.indexOf('application/json') > -1 && typeof body != 'string') body = JSON.stringify(body);\n    }\n\n    // Can probably remove this directive if https://github.com/nodesecurity/eslint-plugin-security/issues/26 is resolved\n    // eslint-disable-next-line security/detect-non-literal-fs-filename\n    xhr.open(method, this.uri, true);\n    xhr.responseType = responseType;\n\n    if ('authorization' in headers) {\n      xhr.withCredentials = true;\n    }\n\n    for (const h in headers) xhr.setRequestHeader(h, headers[h]);\n\n    const errorHandler = (\n      errorEvent: ProgressEvent<EventTarget>,\n      message: string,\n      code: number | null,\n      statusCode: number\n    ) => {\n      let errorMessage = message + ' (event type: ' + errorEvent.type + ')';\n      if (this?.xhr?.statusText) errorMessage += ', current statusText is ' + this.xhr.statusText;\n      Logger.logAction(Logger.LOG_ERROR, 'Request.on' + errorEvent.type + '()', errorMessage);\n      this.complete(new PartialErrorInfo(errorMessage, code, statusCode));\n    };\n    xhr.onerror = function (errorEvent) {\n      errorHandler(errorEvent, 'XHR error occurred', null, 400);\n    };\n    xhr.onabort = (errorEvent) => {\n      if (this.timedOut) {\n        errorHandler(errorEvent, 'Request aborted due to request timeout expiring', null, 408);\n      } else {\n        errorHandler(errorEvent, 'Request cancelled', null, 400);\n      }\n    };\n    xhr.ontimeout = function (errorEvent) {\n      errorHandler(errorEvent, 'Request timed out', null, 408);\n    };\n\n    let streaming: boolean | string;\n    let statusCode: number;\n    let successResponse: boolean;\n    let streamPos = 0;\n    let unpacked = false;\n\n    const onResponse = () => {\n      clearTimeout(timer);\n      successResponse = statusCode < 400;\n      if (statusCode == 204) {\n        this.complete(null, null, null, null, statusCode);\n        return;\n      }\n      streaming = this.requestMode == XHRStates.REQ_RECV_STREAM && successResponse && isEncodingChunked(xhr);\n    };\n\n    const onEnd = () => {\n      let parsedResponse: any;\n      try {\n        const contentType = getHeader(xhr, 'content-type');\n        /* Be liberal in what we accept; buggy auth servers may respond\n         * without the correct contenttype, but assume they're still\n         * responding with json */\n        const json = contentType ? contentType.indexOf('application/json') >= 0 : xhr.responseType == 'text';\n\n        if (json) {\n          /* If we requested msgpack but server responded with json, then since\n           * we set the responseType expecting msgpack, the response will be\n           * an ArrayBuffer containing json */\n          const jsonResponseBody =\n            xhr.responseType === 'arraybuffer'\n              ? Platform.BufferUtils.utf8Decode(xhr.response)\n              : String(xhr.responseText);\n          if (jsonResponseBody.length) {\n            parsedResponse = JSON.parse(jsonResponseBody);\n          } else {\n            parsedResponse = jsonResponseBody;\n          }\n          unpacked = true;\n        } else {\n          parsedResponse = xhr.response;\n        }\n\n        if (parsedResponse.response !== undefined) {\n          /* unwrap JSON envelope */\n          statusCode = parsedResponse.statusCode;\n          successResponse = statusCode < 400;\n          headers = parsedResponse.headers;\n          parsedResponse = parsedResponse.response;\n        } else {\n          headers = getHeadersAsObject(xhr);\n        }\n      } catch (e) {\n        this.complete(new PartialErrorInfo('Malformed response body from server: ' + (e as Error).message, null, 400));\n        return;\n      }\n\n      /* If response is an array, it's an array of protocol messages -- even if\n       * is contains an error action (hence the nonsuccess statuscode), we can\n       * consider the request to have succeeded, just pass it on to\n       * onProtocolMessage to decide what to do */\n      if (successResponse || Utils.isArray(parsedResponse)) {\n        this.complete(null, parsedResponse, headers, unpacked, statusCode);\n        return;\n      }\n\n      let err: IPartialErrorInfo | undefined = getAblyError(parsedResponse, headers);\n      if (!err) {\n        err = new PartialErrorInfo(\n          'Error response received from server: ' +\n            statusCode +\n            ' body was: ' +\n            Platform.Config.inspect(parsedResponse),\n          null,\n          statusCode\n        );\n      }\n      this.complete(err, parsedResponse, headers, unpacked, statusCode);\n    };\n\n    function onProgress() {\n      const responseText = xhr.responseText;\n      const bodyEnd = responseText.length - 1;\n      let idx, chunk;\n      while (streamPos < bodyEnd && (idx = responseText.indexOf('\\n', streamPos)) > -1) {\n        chunk = responseText.slice(streamPos, idx);\n        streamPos = idx + 1;\n        onChunk(chunk);\n      }\n    }\n\n    const onChunk = (chunk: string) => {\n      try {\n        chunk = JSON.parse(chunk);\n      } catch (e) {\n        this.complete(new PartialErrorInfo('Malformed response body from server: ' + (e as Error).message, null, 400));\n        return;\n      }\n      this.emit('data', chunk);\n    };\n\n    const onStreamEnd = () => {\n      onProgress();\n      this.streamComplete = true;\n      Platform.Config.nextTick(() => {\n        this.complete();\n      });\n    };\n\n    xhr.onreadystatechange = function () {\n      const readyState = xhr.readyState;\n      if (readyState < 3) return;\n      if (xhr.status !== 0) {\n        if (statusCode === undefined) {\n          statusCode = xhr.status;\n          /* IE returns 1223 for 204: http://bugs.jquery.com/ticket/1450 */\n          if (statusCode === 1223) statusCode = 204;\n          onResponse();\n        }\n        if (readyState == 3 && streaming) {\n          onProgress();\n        } else if (readyState == 4) {\n          if (streaming) onStreamEnd();\n          else onEnd();\n        }\n      }\n    };\n    xhr.send(body as any);\n  }\n\n  dispose(): void {\n    const xhr = this.xhr;\n    if (xhr) {\n      xhr.onreadystatechange = xhr.onerror = xhr.onabort = xhr.ontimeout = noop;\n      this.xhr = null;\n      const timer = this.timer;\n      if (timer) {\n        clearTimeout(timer as NodeJS.Timeout);\n        this.timer = null;\n      }\n      if (!this.requestComplete) xhr.abort();\n    }\n    delete pendingRequests[this.id];\n  }\n}\n\nexport default XHRRequest;\n", "import HttpMethods from 'common/constants/HttpMethods';\nimport ErrorInfo, { PartialErrorInfo } from 'common/lib/types/errorinfo';\nimport { RequestCallback, RequestParams } from 'common/types/http';\nimport Platform from 'common/platform';\nimport Defaults from 'common/lib/util/defaults';\nimport * as Utils from 'common/lib/util/utils';\nimport { getGlobalObject } from 'common/lib/util/utils';\nimport { BaseClient } from 'common/lib/client/baseclient';\n\nfunction isAblyError(responseBody: unknown, headers: Headers): responseBody is { error?: ErrorInfo } {\n  return !!headers.get('x-ably-errorcode');\n}\n\nfunction getAblyError(responseBody: unknown, headers: Headers) {\n  if (isAblyError(responseBody, headers)) {\n    return responseBody.error && ErrorInfo.fromValues(responseBody.error);\n  }\n}\n\nexport default function fetchRequest(\n  method: HttpMethods,\n  client: BaseClient | null,\n  uri: string,\n  headers: Record<string, string> | null,\n  params: RequestParams,\n  body: unknown,\n  callback: RequestCallback\n) {\n  const fetchHeaders = new Headers(headers || {});\n  const _method = method ? method.toUpperCase() : Utils.isEmptyArg(body) ? 'GET' : 'POST';\n\n  const controller = new AbortController();\n\n  const timeout = setTimeout(\n    () => {\n      controller.abort();\n      callback(new PartialErrorInfo('Request timed out', null, 408));\n    },\n    client ? client.options.timeouts.httpRequestTimeout : Defaults.TIMEOUTS.httpRequestTimeout\n  );\n\n  const requestInit: RequestInit = {\n    method: _method,\n    headers: fetchHeaders,\n    body: body as any,\n  };\n\n  if (!Platform.Config.isWebworker) {\n    requestInit.credentials = fetchHeaders.has('authorization') ? 'include' : 'same-origin';\n  }\n\n  getGlobalObject()\n    .fetch(uri + '?' + new URLSearchParams(params || {}), requestInit)\n    .then((res) => {\n      clearTimeout(timeout);\n      const contentType = res.headers.get('Content-Type');\n      let prom;\n      if (contentType && contentType.indexOf('application/x-msgpack') > -1) {\n        prom = res.arrayBuffer();\n      } else if (contentType && contentType.indexOf('application/json') > -1) {\n        prom = res.json();\n      } else {\n        prom = res.text();\n      }\n      prom.then((body) => {\n        const packed = !!contentType && contentType.indexOf('application/x-msgpack') === -1;\n        if (!res.ok) {\n          const err =\n            getAblyError(body, res.headers) ||\n            new PartialErrorInfo(\n              'Error response received from server: ' + res.status + ' body was: ' + Platform.Config.inspect(body),\n              null,\n              res.status\n            );\n          callback(err, body, res.headers, packed, res.status);\n        } else {\n          callback(null, body, res.headers, packed, res.status);\n        }\n      });\n    })\n    .catch((err) => {\n      clearTimeout(timeout);\n      callback(err);\n    });\n}\n", "import Platform from 'common/platform';\nimport * as Utils from 'common/lib/util/utils';\nimport Defaults from 'common/lib/util/defaults';\nimport ErrorInfo, { PartialErrorInfo } from 'common/lib/types/errorinfo';\nimport { ErrnoException, IHttp, RequestCallback, RequestParams } from 'common/types/http';\nimport HttpMethods from 'common/constants/HttpMethods';\nimport XHRRequest from '../transport/xhrrequest';\nimport XHRStates from 'common/constants/XHRStates';\nimport Logger from 'common/lib/util/logger';\nimport { StandardCallback } from 'common/types/utils';\nimport fetchRequest from '../transport/fetchrequest';\nimport { NormalisedClientOptions } from 'common/types/ClientOptions';\nimport { isSuccessCode } from 'common/constants/HttpStatusCodes';\nimport { BaseClient } from 'common/lib/client/baseclient';\n\nfunction shouldFallback(errorInfo: ErrorInfo) {\n  const statusCode = errorInfo.statusCode as number;\n  /* 400 + no code = a generic xhr onerror. Browser doesn't give us enough\n   * detail to know whether it's fallback-fixable, but it may be (eg if a\n   * network issue), so try just in case */\n  return (\n    (statusCode === 408 && !errorInfo.code) ||\n    (statusCode === 400 && !errorInfo.code) ||\n    (statusCode >= 500 && statusCode <= 504)\n  );\n}\n\nfunction getHosts(client: BaseClient): string[] {\n  /* If we're a connected realtime client, try the endpoint we're connected\n   * to first -- but still have fallbacks, being connected is not an absolute\n   * guarantee that a datacenter has free capacity to service REST requests. */\n  if (Utils.isRealtime(client)) {\n    const connectionHost = client.connection.connectionManager.host;\n    if (connectionHost) {\n      return [connectionHost].concat(Defaults.getFallbackHosts(client.options));\n    }\n  }\n\n  return Defaults.getHosts(client.options);\n}\n\nconst Http: typeof IHttp = class {\n  static methods = [HttpMethods.Get, HttpMethods.Delete, HttpMethods.Post, HttpMethods.Put, HttpMethods.Patch];\n  static methodsWithoutBody = [HttpMethods.Get, HttpMethods.Delete];\n  static methodsWithBody = [HttpMethods.Post, HttpMethods.Put, HttpMethods.Patch];\n  checksInProgress: Array<StandardCallback<boolean>> | null = null;\n  options: NormalisedClientOptions;\n\n  constructor(options: NormalisedClientOptions) {\n    this.options = options || {};\n\n    const connectivityCheckUrl = this.options.connectivityCheckUrl || Defaults.connectivityCheckUrl;\n    const connectivityCheckParams = this.options.connectivityCheckParams;\n    const connectivityUrlIsDefault = !this.options.connectivityCheckUrl;\n    if (Platform.Config.xhrSupported) {\n      this.supportsAuthHeaders = true;\n      this.Request = function (\n        method: HttpMethods,\n        client: BaseClient | null,\n        uri: string,\n        headers: Record<string, string> | null,\n        params: RequestParams,\n        body: unknown,\n        callback: RequestCallback\n      ) {\n        const req = XHRRequest.createRequest(\n          uri,\n          headers,\n          params,\n          body,\n          XHRStates.REQ_SEND,\n          client && client.options.timeouts,\n          method\n        );\n        req.once('complete', callback);\n        req.exec();\n        return req;\n      };\n      if (this.options.disableConnectivityCheck) {\n        this.checkConnectivity = function (callback: (err: null, connectivity: true) => void) {\n          callback(null, true);\n        };\n      } else {\n        this.checkConnectivity = function (callback: (err: ErrorInfo | null, connectivity: boolean) => void) {\n          Logger.logAction(\n            Logger.LOG_MICRO,\n            '(XHRRequest)Http.checkConnectivity()',\n            'Sending; ' + connectivityCheckUrl\n          );\n          this.doUri(\n            HttpMethods.Get,\n            null as any,\n            connectivityCheckUrl,\n            null,\n            null,\n            connectivityCheckParams,\n            function (\n              err?: ErrorInfo | ErrnoException | null,\n              responseText?: unknown,\n              headers?: any,\n              packed?: boolean,\n              statusCode?: number\n            ) {\n              let result = false;\n              if (!connectivityUrlIsDefault) {\n                result = !err && isSuccessCode(statusCode as number);\n              } else {\n                result = !err && (responseText as string)?.replace(/\\n/, '') == 'yes';\n              }\n              Logger.logAction(Logger.LOG_MICRO, '(XHRRequest)Http.checkConnectivity()', 'Result: ' + result);\n              callback(null, result);\n            }\n          );\n        };\n      }\n    } else if (Platform.Config.fetchSupported) {\n      this.supportsAuthHeaders = true;\n      this.Request = fetchRequest;\n      this.checkConnectivity = function (callback: (err: ErrorInfo | null, connectivity: boolean) => void) {\n        Logger.logAction(Logger.LOG_MICRO, '(Fetch)Http.checkConnectivity()', 'Sending; ' + connectivityCheckUrl);\n        this.doUri(\n          HttpMethods.Get,\n          null as any,\n          connectivityCheckUrl,\n          null,\n          null,\n          null,\n          function (err?: ErrorInfo | ErrnoException | null, responseText?: unknown) {\n            const result = !err && (responseText as string)?.replace(/\\n/, '') == 'yes';\n            Logger.logAction(Logger.LOG_MICRO, '(Fetch)Http.checkConnectivity()', 'Result: ' + result);\n            callback(null, result);\n          }\n        );\n      };\n    } else {\n      this.Request = (method, rest, uri, headers, params, body, callback) => {\n        callback(new PartialErrorInfo('no supported HTTP transports available', null, 400), null);\n      };\n    }\n  }\n\n  /* Unlike for doUri, the 'rest' param here is mandatory, as it's used to generate the hosts */\n  do(\n    method: HttpMethods,\n    client: BaseClient,\n    path: string,\n    headers: Record<string, string> | null,\n    body: unknown,\n    params: RequestParams,\n    callback?: RequestCallback\n  ): void {\n    const uriFromHost =\n      typeof path == 'function'\n        ? path\n        : function (host: string) {\n            return client.baseUri(host) + path;\n          };\n\n    const currentFallback = client._currentFallback;\n    if (currentFallback) {\n      if (currentFallback.validUntil > Utils.now()) {\n        /* Use stored fallback */\n        if (!this.Request) {\n          callback?.(new PartialErrorInfo('Request invoked before assigned to', null, 500));\n          return;\n        }\n        this.Request(\n          method,\n          client,\n          uriFromHost(currentFallback.host),\n          headers,\n          params,\n          body,\n          (err?: ErrnoException | ErrorInfo | null, ...args: unknown[]) => {\n            // This typecast is safe because ErrnoExceptions are only thrown in NodeJS\n            if (err && shouldFallback(err as ErrorInfo)) {\n              /* unstore the fallback and start from the top with the default sequence */\n              client._currentFallback = null;\n              this.do(method, client, path, headers, body, params, callback);\n              return;\n            }\n            callback?.(err, ...args);\n          }\n        );\n        return;\n      } else {\n        /* Fallback expired; remove it and fallthrough to normal sequence */\n        client._currentFallback = null;\n      }\n    }\n\n    const hosts = getHosts(client);\n\n    /* if there is only one host do it */\n    if (hosts.length === 1) {\n      this.doUri(method, client, uriFromHost(hosts[0]), headers, body, params, callback as RequestCallback);\n      return;\n    }\n\n    /* hosts is an array with preferred host plus at least one fallback */\n    const tryAHost = (candidateHosts: Array<string>, persistOnSuccess?: boolean) => {\n      const host = candidateHosts.shift();\n      this.doUri(\n        method,\n        client,\n        uriFromHost(host as string),\n        headers,\n        body,\n        params,\n        function (err?: ErrnoException | ErrorInfo | null, ...args: unknown[]) {\n          // This typecast is safe because ErrnoExceptions are only thrown in NodeJS\n          if (err && shouldFallback(err as ErrorInfo) && candidateHosts.length) {\n            tryAHost(candidateHosts, true);\n            return;\n          }\n          if (persistOnSuccess) {\n            /* RSC15f */\n            client._currentFallback = {\n              host: host as string,\n              validUntil: Utils.now() + client.options.timeouts.fallbackRetryTimeout,\n            };\n          }\n          callback?.(err, ...args);\n        }\n      );\n    };\n    tryAHost(hosts);\n  }\n\n  doUri(\n    method: HttpMethods,\n    client: BaseClient | null,\n    uri: string,\n    headers: Record<string, string> | null,\n    body: unknown,\n    params: RequestParams,\n    callback: RequestCallback\n  ): void {\n    if (!this.Request) {\n      callback(new PartialErrorInfo('Request invoked before assigned to', null, 500));\n      return;\n    }\n    this.Request(method, client, uri, headers, params, body, callback);\n  }\n\n  Request?: (\n    method: HttpMethods,\n    client: BaseClient | null,\n    uri: string,\n    headers: Record<string, string> | null,\n    params: RequestParams,\n    body: unknown,\n    callback: RequestCallback\n  ) => void;\n\n  checkConnectivity?: (callback: (err: ErrorInfo | null, connectivity?: boolean) => void) => void = undefined;\n\n  supportsAuthHeaders = false;\n  supportsLinkHeaders = false;\n\n  _getHosts = getHosts;\n};\n\nexport default Http;\n", "function inspect(buffer: undefined | ArrayBuffer | DataView) {\n  if (buffer === undefined) return 'undefined';\n  let view;\n  let type;\n  if (buffer instanceof ArrayBuffer) {\n    type = 'ArrayBuffer';\n    view = new DataView(buffer);\n  } else if (buffer instanceof DataView) {\n    type = 'DataView';\n    view = buffer;\n  }\n  if (!view) return JSON.stringify(buffer);\n  const bytes = [];\n  for (let i = 0; i < buffer.byteLength; i++) {\n    if (i > 20) {\n      bytes.push('...');\n      break;\n    }\n    let byte_ = view.getUint8(i).toString(16);\n    if (byte_.length === 1) byte_ = '0' + byte_;\n    bytes.push(byte_);\n  }\n  return '<' + type + ' ' + bytes.join(' ') + '>';\n}\n\n// Encode string as utf8 into dataview at offset\nfunction utf8Write(view: DataView, offset: number, string: string) {\n  for (let i = 0, l = string.length; i < l; i++) {\n    const codePoint = string.charCodeAt(i);\n\n    // One byte of UTF-8\n    if (codePoint < 0x80) {\n      view.setUint8(offset++, ((codePoint >>> 0) & 0x7f) | 0x00);\n      continue;\n    }\n\n    // Two bytes of UTF-8\n    if (codePoint < 0x800) {\n      view.setUint8(offset++, ((codePoint >>> 6) & 0x1f) | 0xc0);\n      view.setUint8(offset++, ((codePoint >>> 0) & 0x3f) | 0x80);\n      continue;\n    }\n\n    // Three bytes of UTF-8.\n    if (codePoint < 0x10000) {\n      view.setUint8(offset++, ((codePoint >>> 12) & 0x0f) | 0xe0);\n      view.setUint8(offset++, ((codePoint >>> 6) & 0x3f) | 0x80);\n      view.setUint8(offset++, ((codePoint >>> 0) & 0x3f) | 0x80);\n      continue;\n    }\n\n    // Four bytes of UTF-8\n    if (codePoint < 0x110000) {\n      view.setUint8(offset++, ((codePoint >>> 18) & 0x07) | 0xf0);\n      view.setUint8(offset++, ((codePoint >>> 12) & 0x3f) | 0x80);\n      view.setUint8(offset++, ((codePoint >>> 6) & 0x3f) | 0x80);\n      view.setUint8(offset++, ((codePoint >>> 0) & 0x3f) | 0x80);\n      continue;\n    }\n    throw new Error('bad codepoint ' + codePoint);\n  }\n}\n\nfunction utf8Read(view: DataView, offset: number, length: number) {\n  let string = '';\n  for (let i = offset, end = offset + length; i < end; i++) {\n    const byte_ = view.getUint8(i);\n    // One byte character\n    if ((byte_ & 0x80) === 0x00) {\n      string += String.fromCharCode(byte_);\n      continue;\n    }\n    // Two byte character\n    if ((byte_ & 0xe0) === 0xc0) {\n      string += String.fromCharCode(((byte_ & 0x0f) << 6) | (view.getUint8(++i) & 0x3f));\n      continue;\n    }\n    // Three byte character\n    if ((byte_ & 0xf0) === 0xe0) {\n      string += String.fromCharCode(\n        ((byte_ & 0x0f) << 12) | ((view.getUint8(++i) & 0x3f) << 6) | ((view.getUint8(++i) & 0x3f) << 0)\n      );\n      continue;\n    }\n    // Four byte character\n    if ((byte_ & 0xf8) === 0xf0) {\n      string += String.fromCharCode(\n        ((byte_ & 0x07) << 18) |\n          ((view.getUint8(++i) & 0x3f) << 12) |\n          ((view.getUint8(++i) & 0x3f) << 6) |\n          ((view.getUint8(++i) & 0x3f) << 0)\n      );\n      continue;\n    }\n    throw new Error('Invalid byte ' + byte_.toString(16));\n  }\n  return string;\n}\n\nfunction utf8ByteCount(string: string) {\n  let count = 0;\n  for (let i = 0, l = string.length; i < l; i++) {\n    const codePoint = string.charCodeAt(i);\n    if (codePoint < 0x80) {\n      count += 1;\n      continue;\n    }\n    if (codePoint < 0x800) {\n      count += 2;\n      continue;\n    }\n    if (codePoint < 0x10000) {\n      count += 3;\n      continue;\n    }\n    if (codePoint < 0x110000) {\n      count += 4;\n      continue;\n    }\n    throw new Error('bad codepoint ' + codePoint);\n  }\n  return count;\n}\n\nfunction encode(value: unknown, sparse?: boolean) {\n  const size = sizeof(value, sparse);\n  if (size === 0) return undefined;\n  const buffer = new ArrayBuffer(size);\n  const view = new DataView(buffer);\n  _encode(value, view, 0, sparse);\n  return buffer;\n}\n\nconst SH_L_32 = (1 << 16) * (1 << 16),\n  SH_R_32 = 1 / SH_L_32;\nfunction getInt64(view: DataView, offset: number) {\n  offset = offset || 0;\n  return view.getInt32(offset) * SH_L_32 + view.getUint32(offset + 4);\n}\n\nfunction getUint64(view: DataView, offset: number) {\n  offset = offset || 0;\n  return view.getUint32(offset) * SH_L_32 + view.getUint32(offset + 4);\n}\n\nfunction setInt64(view: DataView, offset: number, val: number) {\n  if (val < 0x8000000000000000) {\n    view.setInt32(offset, Math.floor(val * SH_R_32));\n    view.setInt32(offset + 4, val & -1);\n  } else {\n    view.setUint32(offset, 0x7fffffff);\n    view.setUint32(offset + 4, 0x7fffffff);\n  }\n}\n\nfunction setUint64(view: DataView, offset: number, val: number) {\n  if (val < 0x10000000000000000) {\n    view.setUint32(offset, Math.floor(val * SH_R_32));\n    view.setInt32(offset + 4, val & -1);\n  } else {\n    view.setUint32(offset, 0xffffffff);\n    view.setUint32(offset + 4, 0xffffffff);\n  }\n}\n\n// https://gist.github.com/frsyuki/5432559 - v5 spec\n//\n// I've used one extension point from `fixext 1` to store `undefined`. On the wire this\n// should translate to exactly 0xd40000\n//\n// +--------+--------+--------+\n// |  0xd4  |  0x00  |  0x00  |\n// +--------+--------+--------+\n//    ^ fixext |        ^ value part unused (fixed to be 0)\n//             ^ indicates undefined value\n//\n\nclass Decoder {\n  offset: number;\n  view: DataView;\n\n  constructor(view: DataView, offset?: number) {\n    this.offset = offset || 0;\n    this.view = view;\n  }\n\n  map = (length: number) => {\n    const value: { [key: string]: ArrayBuffer } = {};\n    for (let i = 0; i < length; i++) {\n      const key = this.parse();\n      value[key as string] = this.parse() as ArrayBuffer;\n    }\n    return value;\n  };\n\n  bin = (length: number) => {\n    const value = new ArrayBuffer(length);\n    new Uint8Array(value).set(new Uint8Array(this.view.buffer, this.offset, length), 0);\n    this.offset += length;\n    return value;\n  };\n\n  buf = this.bin;\n\n  str = (length: number) => {\n    const value = utf8Read(this.view, this.offset, length);\n    this.offset += length;\n    return value;\n  };\n\n  array = (length: number) => {\n    const value = new Array(length);\n    for (let i = 0; i < length; i++) {\n      value[i] = this.parse();\n    }\n    return value;\n  };\n\n  ext = (length: number) => {\n    this.offset += length;\n    return {\n      type: this.view.getInt8(this.offset),\n      data: this.buf(length),\n    };\n  };\n\n  parse = (): unknown => {\n    const type = this.view.getUint8(this.offset);\n    let value, length;\n\n    // Positive FixInt - 0xxxxxxx\n    if ((type & 0x80) === 0x00) {\n      this.offset++;\n      return type;\n    }\n\n    // FixMap - 1000xxxx\n    if ((type & 0xf0) === 0x80) {\n      length = type & 0x0f;\n      this.offset++;\n      return this.map(length);\n    }\n\n    // FixArray - 1001xxxx\n    if ((type & 0xf0) === 0x90) {\n      length = type & 0x0f;\n      this.offset++;\n      return this.array(length);\n    }\n\n    // FixStr - 101xxxxx\n    if ((type & 0xe0) === 0xa0) {\n      length = type & 0x1f;\n      this.offset++;\n      return this.str(length);\n    }\n\n    // Negative FixInt - 111xxxxx\n    if ((type & 0xe0) === 0xe0) {\n      value = this.view.getInt8(this.offset);\n      this.offset++;\n      return value;\n    }\n\n    switch (type) {\n      // nil\n      case 0xc0:\n        this.offset++;\n        return null;\n\n      // 0xc1 never used - use for undefined (NON-STANDARD)\n      case 0xc1:\n        this.offset++;\n        return undefined;\n\n      // false\n      case 0xc2:\n        this.offset++;\n        return false;\n\n      // true\n      case 0xc3:\n        this.offset++;\n        return true;\n\n      // bin 8\n      case 0xc4:\n        length = this.view.getUint8(this.offset + 1);\n        this.offset += 2;\n        return this.bin(length);\n\n      // bin 16\n      case 0xc5:\n        length = this.view.getUint16(this.offset + 1);\n        this.offset += 3;\n        return this.bin(length);\n\n      // bin 32\n      case 0xc6:\n        length = this.view.getUint32(this.offset + 1);\n        this.offset += 5;\n        return this.bin(length);\n\n      // ext 8\n      case 0xc7:\n        length = this.view.getUint8(this.offset + 1);\n        this.offset += 2;\n        return this.ext(length);\n\n      // ext 16\n      case 0xc8:\n        length = this.view.getUint16(this.offset + 1);\n        this.offset += 3;\n        return this.ext(length);\n\n      // ext 32\n      case 0xc9:\n        length = this.view.getUint32(this.offset + 1);\n        this.offset += 5;\n        return this.ext(length);\n\n      // float 32\n      case 0xca:\n        value = this.view.getFloat32(this.offset + 1);\n        this.offset += 5;\n        return value;\n\n      // float 64\n      case 0xcb:\n        value = this.view.getFloat64(this.offset + 1);\n        this.offset += 9;\n        return value;\n\n      // uint8\n      case 0xcc:\n        value = this.view.getUint8(this.offset + 1);\n        this.offset += 2;\n        return value;\n\n      // uint 16\n      case 0xcd:\n        value = this.view.getUint16(this.offset + 1);\n        this.offset += 3;\n        return value;\n\n      // uint 32\n      case 0xce:\n        value = this.view.getUint32(this.offset + 1);\n        this.offset += 5;\n        return value;\n\n      // uint 64\n      case 0xcf:\n        value = getUint64(this.view, this.offset + 1);\n        this.offset += 9;\n        return value;\n\n      // int 8\n      case 0xd0:\n        value = this.view.getInt8(this.offset + 1);\n        this.offset += 2;\n        return value;\n\n      // int 16\n      case 0xd1:\n        value = this.view.getInt16(this.offset + 1);\n        this.offset += 3;\n        return value;\n\n      // int 32\n      case 0xd2:\n        value = this.view.getInt32(this.offset + 1);\n        this.offset += 5;\n        return value;\n\n      // int 64\n      case 0xd3:\n        value = getInt64(this.view, this.offset + 1);\n        this.offset += 9;\n        return value;\n\n      // fixext 1\n      case 0xd4:\n        length = 1;\n        this.offset++;\n        return this.ext(length);\n\n      // fixext 2\n      case 0xd5:\n        length = 2;\n        this.offset++;\n        return this.ext(length);\n\n      // fixext 4\n      case 0xd6:\n        length = 4;\n        this.offset++;\n        return this.ext(length);\n\n      // fixext 8\n      case 0xd7:\n        length = 8;\n        this.offset++;\n        return this.ext(length);\n\n      // fixext 16\n      case 0xd8:\n        length = 16;\n        this.offset++;\n        return this.ext(length);\n\n      // str8\n      case 0xd9:\n        length = this.view.getUint8(this.offset + 1);\n        this.offset += 2;\n        return this.str(length);\n\n      // str 16\n      case 0xda:\n        length = this.view.getUint16(this.offset + 1);\n        this.offset += 3;\n        return this.str(length);\n\n      // str 32\n      case 0xdb:\n        length = this.view.getUint32(this.offset + 1);\n        this.offset += 5;\n        return this.str(length);\n\n      // array 16\n      case 0xdc:\n        length = this.view.getUint16(this.offset + 1);\n        this.offset += 3;\n        return this.array(length);\n\n      // array 32\n      case 0xdd:\n        length = this.view.getUint32(this.offset + 1);\n        this.offset += 5;\n        return this.array(length);\n\n      // map 16\n      case 0xde:\n        length = this.view.getUint16(this.offset + 1);\n        this.offset += 3;\n        return this.map(length);\n\n      // map 32\n      case 0xdf:\n        length = this.view.getUint32(this.offset + 1);\n        this.offset += 5;\n        return this.map(length);\n    }\n    throw new Error('Unknown type 0x' + type.toString(16));\n  };\n}\n\nfunction decode(buffer: ArrayBuffer) {\n  const view = new DataView(buffer);\n  const decoder = new Decoder(view);\n  const value = decoder.parse();\n  if (decoder.offset !== buffer.byteLength) throw new Error(buffer.byteLength - decoder.offset + ' trailing bytes');\n  return value;\n}\n\nfunction encodeableKeys(value: { [key: string]: unknown }, sparse?: boolean) {\n  return Object.keys(value).filter(function (e) {\n    const val = value[e],\n      type = typeof val;\n    return (!sparse || (val !== undefined && val !== null)) && ('function' !== type || !!(val as Date).toJSON);\n  });\n}\n\nfunction _encode(value: unknown, view: DataView, offset: number, sparse?: boolean): number {\n  const type = typeof value;\n\n  // Strings Bytes\n  // There are four string types: fixstr/str8/str16/str32\n  if (typeof value === 'string') {\n    const length = utf8ByteCount(value);\n\n    // fixstr\n    if (length < 0x20) {\n      view.setUint8(offset, length | 0xa0);\n      utf8Write(view, offset + 1, value);\n      return 1 + length;\n    }\n\n    // str8\n    if (length < 0x100) {\n      view.setUint8(offset, 0xd9);\n      view.setUint8(offset + 1, length);\n      utf8Write(view, offset + 2, value);\n      return 2 + length;\n    }\n\n    // str16\n    if (length < 0x10000) {\n      view.setUint8(offset, 0xda);\n      view.setUint16(offset + 1, length);\n      utf8Write(view, offset + 3, value);\n      return 3 + length;\n    }\n    // str32\n    if (length < 0x100000000) {\n      view.setUint8(offset, 0xdb);\n      view.setUint32(offset + 1, length);\n      utf8Write(view, offset + 5, value);\n      return 5 + length;\n    }\n  }\n\n  if (ArrayBuffer.isView && ArrayBuffer.isView(value)) {\n    // extract the arraybuffer and fallthrough\n    value = value.buffer;\n  }\n\n  // There are three bin types: bin8/bin16/bin32\n  if (value instanceof ArrayBuffer) {\n    const length = value.byteLength;\n\n    // bin8\n    if (length < 0x100) {\n      view.setUint8(offset, 0xc4);\n      view.setUint8(offset + 1, length);\n      new Uint8Array(view.buffer).set(new Uint8Array(value), offset + 2);\n      return 2 + length;\n    }\n\n    // bin16\n    if (length < 0x10000) {\n      view.setUint8(offset, 0xc5);\n      view.setUint16(offset + 1, length);\n      new Uint8Array(view.buffer).set(new Uint8Array(value), offset + 3);\n      return 3 + length;\n    }\n\n    // bin 32\n    if (length < 0x100000000) {\n      view.setUint8(offset, 0xc6);\n      view.setUint32(offset + 1, length);\n      new Uint8Array(view.buffer).set(new Uint8Array(value), offset + 5);\n      return 5 + length;\n    }\n  }\n\n  if (typeof value === 'number') {\n    // Floating Point\n    // NOTE: We're always using float64\n    if (Math.floor(value) !== value) {\n      view.setUint8(offset, 0xcb);\n      view.setFloat64(offset + 1, value);\n      return 9;\n    }\n\n    // Integers\n    if (value >= 0) {\n      // positive fixnum\n      if (value < 0x80) {\n        view.setUint8(offset, value);\n        return 1;\n      }\n      // uint 8\n      if (value < 0x100) {\n        view.setUint8(offset, 0xcc);\n        view.setUint8(offset + 1, value);\n        return 2;\n      }\n      // uint 16\n      if (value < 0x10000) {\n        view.setUint8(offset, 0xcd);\n        view.setUint16(offset + 1, value);\n        return 3;\n      }\n      // uint 32\n      if (value < 0x100000000) {\n        view.setUint8(offset, 0xce);\n        view.setUint32(offset + 1, value);\n        return 5;\n      }\n      // uint 64\n      if (value < 0x10000000000000000) {\n        view.setUint8(offset, 0xcf);\n        setUint64(view, offset + 1, value);\n        return 9;\n      }\n      throw new Error('Number too big 0x' + value.toString(16));\n    }\n\n    // negative fixnum\n    if (value >= -0x20) {\n      view.setInt8(offset, value);\n      return 1;\n    }\n    // int 8\n    if (value >= -0x80) {\n      view.setUint8(offset, 0xd0);\n      view.setInt8(offset + 1, value);\n      return 2;\n    }\n    // int 16\n    if (value >= -0x8000) {\n      view.setUint8(offset, 0xd1);\n      view.setInt16(offset + 1, value);\n      return 3;\n    }\n    // int 32\n    if (value >= -0x80000000) {\n      view.setUint8(offset, 0xd2);\n      view.setInt32(offset + 1, value);\n      return 5;\n    }\n    // int 64\n    if (value >= -0x8000000000000000) {\n      view.setUint8(offset, 0xd3);\n      setInt64(view, offset + 1, value);\n      return 9;\n    }\n    throw new Error('Number too small -0x' + (-value).toString(16).substr(1));\n  }\n\n  // undefined - use d4 (NON-STANDARD)\n  if (type === 'undefined') {\n    if (sparse) return 0;\n    view.setUint8(offset, 0xd4);\n    view.setUint8(offset + 1, 0x00);\n    view.setUint8(offset + 2, 0x00);\n    return 3;\n  }\n\n  // null\n  if (value === null) {\n    if (sparse) return 0;\n    view.setUint8(offset, 0xc0);\n    return 1;\n  }\n\n  // Boolean\n  if (type === 'boolean') {\n    view.setUint8(offset, value ? 0xc3 : 0xc2);\n    return 1;\n  }\n\n  if ('function' === typeof (value as Date).toJSON) return _encode((value as Date).toJSON(), view, offset, sparse);\n\n  // Container Types\n  if (type === 'object') {\n    let length: number,\n      size = 0;\n    let keys: string[] | undefined;\n    const isArray = Array.isArray(value);\n\n    if (isArray) {\n      length = (value as unknown[]).length;\n    } else {\n      keys = encodeableKeys(value as { [key: string]: unknown }, sparse);\n      length = keys.length;\n    }\n\n    if (length < 0x10) {\n      view.setUint8(offset, length | (isArray ? 0x90 : 0x80));\n      size = 1;\n    } else if (length < 0x10000) {\n      view.setUint8(offset, isArray ? 0xdc : 0xde);\n      view.setUint16(offset + 1, length);\n      size = 3;\n    } else if (length < 0x100000000) {\n      view.setUint8(offset, isArray ? 0xdd : 0xdf);\n      view.setUint32(offset + 1, length);\n      size = 5;\n    }\n\n    if (isArray) {\n      for (let i = 0; i < length; i++) {\n        size += _encode((value as unknown[])[i], view, offset + size, sparse);\n      }\n    } else if (keys) {\n      for (let i = 0; i < length; i++) {\n        const key = keys[i];\n        size += _encode(key, view, offset + size);\n        size += _encode((value as { [key: string]: unknown })[key], view, offset + size, sparse);\n      }\n    }\n\n    return size;\n  }\n  if (type === 'function') return 0;\n\n  throw new Error('Unknown type ' + type);\n}\n\nfunction sizeof(value: unknown, sparse?: boolean): number {\n  const type = typeof value;\n\n  // fixstr or str8 or str16 or str32\n  if (type === 'string') {\n    const length = utf8ByteCount(value as string);\n    if (length < 0x20) {\n      return 1 + length;\n    }\n    if (length < 0x100) {\n      return 2 + length;\n    }\n    if (length < 0x10000) {\n      return 3 + length;\n    }\n    if (length < 0x100000000) {\n      return 5 + length;\n    }\n  }\n\n  if (ArrayBuffer.isView && ArrayBuffer.isView(value)) {\n    // extract the arraybuffer and fallthrough\n    value = value.buffer;\n  }\n\n  // bin8 or bin16 or bin32\n  if (value instanceof ArrayBuffer) {\n    const length = value.byteLength;\n    if (length < 0x100) {\n      return 2 + length;\n    }\n    if (length < 0x10000) {\n      return 3 + length;\n    }\n    if (length < 0x100000000) {\n      return 5 + length;\n    }\n  }\n\n  if (typeof value === 'number') {\n    // Floating Point (32 bits)\n    // double\n    if (Math.floor(value) !== value) return 9;\n\n    // Integers\n    if (value >= 0) {\n      // positive fixint\n      if (value < 0x80) return 1;\n      // uint 8\n      if (value < 0x100) return 2;\n      // uint 16\n      if (value < 0x10000) return 3;\n      // uint 32\n      if (value < 0x100000000) return 5;\n      // uint 64\n      if (value < 0x10000000000000000) return 9;\n      // Too big\n      throw new Error('Number too big 0x' + value.toString(16));\n    }\n    // negative fixint\n    if (value >= -0x20) return 1;\n    // int 8\n    if (value >= -0x80) return 2;\n    // int 16\n    if (value >= -0x8000) return 3;\n    // int 32\n    if (value >= -0x80000000) return 5;\n    // int 64\n    if (value >= -0x8000000000000000) return 9;\n    // Too small\n    throw new Error('Number too small -0x' + value.toString(16).substr(1));\n  }\n\n  // Boolean\n  if (type === 'boolean') return 1;\n\n  // undefined, null\n  if (value === null) return sparse ? 0 : 1;\n  if (value === undefined) return sparse ? 0 : 3;\n\n  if ('function' === typeof (value as Date).toJSON) return sizeof((value as Date).toJSON(), sparse);\n\n  // Container Types\n  if (type === 'object') {\n    let length: number,\n      size = 0;\n    if (Array.isArray(value)) {\n      length = value.length;\n      for (let i = 0; i < length; i++) {\n        size += sizeof(value[i], sparse);\n      }\n    } else {\n      const keys = encodeableKeys(value as { [key: string]: unknown }, sparse);\n      length = keys.length;\n      for (let i = 0; i < length; i++) {\n        const key = keys[i];\n        size += sizeof(key) + sizeof((value as { [key: string]: unknown })[key], sparse);\n      }\n    }\n    if (length < 0x10) {\n      return 1 + size;\n    }\n    if (length < 0x10000) {\n      return 3 + size;\n    }\n    if (length < 0x100000000) {\n      return 5 + size;\n    }\n    throw new Error('Array or object too long 0x' + length.toString(16));\n  }\n  if (type === 'function') return 0;\n\n  throw new Error('Unknown type ' + type);\n}\n\nexport default {\n  encode,\n  decode,\n  inspect,\n  utf8Write,\n  utf8Read,\n  utf8ByteCount,\n};\n", "import msgpack from './lib/util/msgpack';\nimport { IPlatformConfig } from '../../common/types/IPlatformConfig';\nimport * as Utils from 'common/lib/util/utils';\n\n// Workaround for salesforce lightning locker compat\nconst globalObject = Utils.getGlobalObject();\n\ndeclare var msCrypto: typeof crypto; // for IE11\n\nif (typeof Window === 'undefined' && typeof WorkerGlobalScope === 'undefined') {\n  console.log(\n    \"Warning: this distribution of Ably is intended for browsers. On nodejs, please use the 'ably' package on npm\"\n  );\n}\n\nfunction allowComet() {\n  /* xhr requests from local files are unreliable in some browsers, such as Chrome 65 and higher -- see eg\n   * https://stackoverflow.com/questions/49256429/chrome-65-unable-to-make-post-requests-from-local-files-to-flask\n   * So if websockets are supported, then just forget about comet transports and use that */\n  const loc = globalObject.location;\n  return !globalObject.WebSocket || !loc || !loc.origin || loc.origin.indexOf('http') > -1;\n}\n\nconst userAgent = globalObject.navigator && globalObject.navigator.userAgent.toString();\nconst currentUrl = globalObject.location && globalObject.location.href;\n\nconst Config: IPlatformConfig = {\n  agent: 'browser',\n  logTimestamps: true,\n  userAgent: userAgent,\n  currentUrl: currentUrl,\n  noUpgrade: userAgent && !!userAgent.match(/MSIE\\s8\\.0/),\n  binaryType: 'arraybuffer',\n  WebSocket: globalObject.WebSocket,\n  fetchSupported: !!globalObject.fetch,\n  xhrSupported: globalObject.XMLHttpRequest && 'withCredentials' in new XMLHttpRequest(),\n  allowComet: allowComet(),\n  streamingSupported: true,\n  useProtocolHeartbeats: true,\n  msgpack: msgpack,\n  supportsBinary: !!globalObject.TextDecoder,\n  preferBinary: false,\n  ArrayBuffer: globalObject.ArrayBuffer,\n  atob: globalObject.atob,\n  nextTick:\n    typeof globalObject.setImmediate !== 'undefined'\n      ? globalObject.setImmediate.bind(globalObject)\n      : function (f: () => void) {\n          setTimeout(f, 0);\n        },\n  addEventListener: globalObject.addEventListener,\n  inspect: JSON.stringify,\n  stringByteSize: function (str: string) {\n    /* str.length will be an underestimate for non-ascii strings. But if we're\n     * in a browser too old to support TextDecoder, not much we can do. Better\n     * to underestimate, so if we do go over-size, the server will reject the\n     * message */\n    return (globalObject.TextDecoder && new globalObject.TextEncoder().encode(str).length) || str.length;\n  },\n  TextEncoder: globalObject.TextEncoder,\n  TextDecoder: globalObject.TextDecoder,\n  getRandomValues: (function (crypto) {\n    if (crypto === undefined) {\n      return undefined;\n    }\n    return function (arr: ArrayBufferView, callback?: (error: Error | null) => void) {\n      crypto.getRandomValues(arr);\n      if (callback) {\n        callback(null);\n      }\n    };\n  })(globalObject.crypto || msCrypto),\n};\n\nexport default Config;\n", "import * as Utils from '../util/utils';\nimport ProtocolMessage from '../types/protocolmessage';\nimport Transport from './transport';\nimport Logger from '../util/logger';\nimport Defaults from '../util/defaults';\nimport ConnectionErrors from './connectionerrors';\nimport Auth from '../client/auth';\nimport ErrorInfo from '../types/errorinfo';\nimport IXHRRequest from '../../types/IXHRRequest';\nimport * as API from '../../../../ably';\nimport ConnectionManager, { TransportParams } from './connectionmanager';\nimport XHRStates from '../../constants/XHRStates';\nimport Platform from 'common/platform';\n\n/* TODO: can remove once realtime sends protocol message responses for comet errors */\nfunction shouldBeErrorAction(err: ErrorInfo) {\n  const UNRESOLVABLE_ERROR_CODES = [80015, 80017, 80030];\n  if (err.code) {\n    if (Auth.isTokenErr(err)) return false;\n    if (Utils.arrIn(UNRESOLVABLE_ERROR_CODES, err.code)) return true;\n    return err.code >= 40000 && err.code < 50000;\n  } else {\n    /* Likely a network or transport error of some kind. Certainly not fatal to the connection */\n    return false;\n  }\n}\n\nfunction protocolMessageFromRawError(err: ErrorInfo) {\n  /* err will be either a legacy (non-protocolmessage) comet error response\n   * (which will have an err.code), or a xhr/network error (which won't). */\n  if (shouldBeErrorAction(err)) {\n    return [ProtocolMessage.fromValues({ action: ProtocolMessage.Action.ERROR, error: err })];\n  } else {\n    return [ProtocolMessage.fromValues({ action: ProtocolMessage.Action.DISCONNECTED, error: err })];\n  }\n}\n\n/*\n * A base comet transport class\n */\nabstract class CometTransport extends Transport {\n  stream: string | boolean;\n  sendRequest: IXHRRequest | null;\n  recvRequest: null | IXHRRequest;\n  pendingCallback: null;\n  pendingItems: null | Array<ProtocolMessage>;\n  baseUri?: string;\n  authParams?: Record<string, any>;\n  closeUri?: string;\n  disconnectUri?: string;\n  sendUri?: string;\n  recvUri?: string;\n\n  constructor(connectionManager: ConnectionManager, auth: Auth, params: TransportParams) {\n    super(connectionManager, auth, params, /* binary not supported for comet so force JSON protocol */ true);\n    this.stream = 'stream' in params ? params.stream : true;\n    this.sendRequest = null;\n    this.recvRequest = null;\n    this.pendingCallback = null;\n    this.pendingItems = null;\n  }\n\n  abstract createRequest(\n    uri: string,\n    headers: Record<string, string> | null,\n    params?: Record<string, unknown> | null,\n    body?: unknown,\n    requestMode?: number\n  ): IXHRRequest;\n\n  connect(): void {\n    Logger.logAction(Logger.LOG_MINOR, 'CometTransport.connect()', 'starting');\n    Transport.prototype.connect.call(this);\n    const params = this.params;\n    const options = params.options;\n    const host = Defaults.getHost(options, params.host);\n    const port = Defaults.getPort(options);\n    const cometScheme = options.tls ? 'https://' : 'http://';\n\n    this.baseUri = cometScheme + host + ':' + port + '/comet/';\n    const connectUri = this.baseUri + 'connect';\n    Logger.logAction(Logger.LOG_MINOR, 'CometTransport.connect()', 'uri: ' + connectUri);\n    this.auth.getAuthParams((err: Error, authParams: Record<string, any>) => {\n      if (err) {\n        this.disconnect(err);\n        return;\n      }\n      if (this.isDisposed) {\n        return;\n      }\n      this.authParams = authParams;\n      const connectParams = this.params.getConnectParams(authParams);\n      if ('stream' in connectParams) this.stream = connectParams.stream;\n      Logger.logAction(\n        Logger.LOG_MINOR,\n        'CometTransport.connect()',\n        'connectParams:' + Utils.toQueryString(connectParams)\n      );\n\n      /* this will be the 'recvRequest' so this connection can stream messages */\n      let preconnected = false;\n      const connectRequest = (this.recvRequest = this.createRequest(\n        connectUri,\n        null,\n        connectParams,\n        null,\n        this.stream ? XHRStates.REQ_RECV_STREAM : XHRStates.REQ_RECV\n      ));\n\n      connectRequest.on('data', (data: any) => {\n        if (!this.recvRequest) {\n          /* the transport was disposed before we connected */\n          return;\n        }\n        if (!preconnected) {\n          preconnected = true;\n          this.emit('preconnect');\n        }\n        this.onData(data);\n      });\n      connectRequest.on('complete', (err: ErrorInfo) => {\n        if (!this.recvRequest) {\n          /* the transport was disposed before we connected */\n          err = err || new ErrorInfo('Request cancelled', 80003, 400);\n        }\n        this.recvRequest = null;\n        /* Connect request may complete without a emitting 'data' event since that is not\n         * emitted for e.g. a non-streamed error response. Still implies preconnect. */\n        if (!preconnected && !err) {\n          preconnected = true;\n          this.emit('preconnect');\n        }\n        this.onActivity();\n        if (err) {\n          if (err.code) {\n            /* A protocol error received from realtime. TODO: once realtime\n             * consistendly sends errors wrapped in protocol messages, should be\n             * able to remove this */\n            this.onData(protocolMessageFromRawError(err));\n          } else {\n            /* A network/xhr error. Don't bother wrapping in a protocol message,\n             * just disconnect the transport */\n            this.disconnect(err);\n          }\n          return;\n        }\n        Platform.Config.nextTick(() => {\n          this.recv();\n        });\n      });\n      connectRequest.exec();\n    });\n  }\n\n  requestClose(): void {\n    Logger.logAction(Logger.LOG_MINOR, 'CometTransport.requestClose()');\n    this._requestCloseOrDisconnect(true);\n  }\n\n  requestDisconnect(): void {\n    Logger.logAction(Logger.LOG_MINOR, 'CometTransport.requestDisconnect()');\n    this._requestCloseOrDisconnect(false);\n  }\n\n  _requestCloseOrDisconnect(closing: boolean): void {\n    const closeOrDisconnectUri = closing ? this.closeUri : this.disconnectUri;\n    if (closeOrDisconnectUri) {\n      const request = this.createRequest(closeOrDisconnectUri, null, this.authParams, null, XHRStates.REQ_SEND);\n\n      request.on('complete', (err: ErrorInfo) => {\n        if (err) {\n          Logger.logAction(\n            Logger.LOG_ERROR,\n            'CometTransport.request' + (closing ? 'Close()' : 'Disconnect()'),\n            'request returned err = ' + Utils.inspectError(err)\n          );\n          this.finish('disconnected', err);\n        }\n      });\n      request.exec();\n    }\n  }\n\n  dispose(): void {\n    Logger.logAction(Logger.LOG_MINOR, 'CometTransport.dispose()', '');\n    if (!this.isDisposed) {\n      this.isDisposed = true;\n      if (this.recvRequest) {\n        Logger.logAction(Logger.LOG_MINOR, 'CometTransport.dispose()', 'aborting recv request');\n        this.recvRequest.abort();\n        this.recvRequest = null;\n      }\n      /* In almost all cases the transport will be finished before it's\n       * disposed. Finish here just to make sure. */\n      this.finish('disconnected', ConnectionErrors.disconnected());\n      Platform.Config.nextTick(() => {\n        this.emit('disposed');\n      });\n    }\n  }\n\n  onConnect(message: ProtocolMessage): void {\n    /* if this transport has been disposed whilst awaiting connection, do nothing */\n    if (this.isDisposed) {\n      return;\n    }\n\n    /* the connectionKey in a comet connected response is really\n     * <instId>-<connectionKey> */\n    const connectionStr = message.connectionDetails?.connectionKey;\n    Transport.prototype.onConnect.call(this, message);\n\n    const baseConnectionUri = (this.baseUri as string) + connectionStr;\n    Logger.logAction(Logger.LOG_MICRO, 'CometTransport.onConnect()', 'baseUri = ' + baseConnectionUri);\n    this.sendUri = baseConnectionUri + '/send';\n    this.recvUri = baseConnectionUri + '/recv';\n    this.closeUri = baseConnectionUri + '/close';\n    this.disconnectUri = baseConnectionUri + '/disconnect';\n  }\n\n  send(message: ProtocolMessage): void {\n    if (this.sendRequest) {\n      /* there is a pending send, so queue this message */\n      this.pendingItems = this.pendingItems || [];\n      this.pendingItems.push(message);\n      return;\n    }\n    /* send this, plus any pending, now */\n    const pendingItems = this.pendingItems || [];\n    pendingItems.push(message);\n    this.pendingItems = null;\n\n    this.sendItems(pendingItems);\n  }\n\n  sendAnyPending(): void {\n    const pendingItems = this.pendingItems;\n\n    if (!pendingItems) {\n      return;\n    }\n\n    this.pendingItems = null;\n    this.sendItems(pendingItems);\n  }\n\n  sendItems(items: Array<ProtocolMessage>): void {\n    const sendRequest = (this.sendRequest = this.createRequest(\n      this.sendUri as string,\n      null,\n      this.authParams,\n      this.encodeRequest(items),\n      XHRStates.REQ_SEND\n    ));\n\n    sendRequest.on('complete', (err: ErrorInfo, data: string) => {\n      if (err)\n        Logger.logAction(\n          Logger.LOG_ERROR,\n          'CometTransport.sendItems()',\n          'on complete: err = ' + Utils.inspectError(err)\n        );\n      this.sendRequest = null;\n\n      /* the result of the request, even if a nack, is usually a protocol response\n       * contained in the data. An err is anomolous, and indicates some issue with the\n       * network,transport, or connection */\n      if (err) {\n        if (err.code) {\n          /* A protocol error received from realtime. TODO: once realtime\n           * consistendly sends errors wrapped in protocol messages, should be\n           * able to remove this */\n          this.onData(protocolMessageFromRawError(err));\n        } else {\n          /* A network/xhr error. Don't bother wrapping in a protocol message,\n           * just disconnect the transport */\n          this.disconnect(err);\n        }\n        return;\n      }\n\n      if (data) {\n        this.onData(data);\n      }\n\n      if (this.pendingItems) {\n        Platform.Config.nextTick(() => {\n          /* If there's a new send request by now, any pending items will have\n           * been picked up by that; any new ones added since then will be\n           * picked up after that one completes */\n          if (!this.sendRequest) {\n            this.sendAnyPending();\n          }\n        });\n      }\n    });\n    sendRequest.exec();\n  }\n\n  recv(): void {\n    /* do nothing if there is an active request, which might be streaming */\n    if (this.recvRequest) return;\n\n    /* If we're no longer connected, do nothing */\n    if (!this.isConnected) return;\n\n    const recvRequest = (this.recvRequest = this.createRequest(\n      this.recvUri as string,\n      null,\n      this.authParams,\n      null,\n      this.stream ? XHRStates.REQ_RECV_STREAM : XHRStates.REQ_RECV_POLL\n    ));\n\n    recvRequest.on('data', (data: string) => {\n      this.onData(data);\n    });\n    recvRequest.on('complete', (err: ErrorInfo) => {\n      this.recvRequest = null;\n      /* A request completing must be considered activity, as realtime sends\n       * heartbeats every 15s since a request began, not every 15s absolutely */\n      this.onActivity();\n      if (err) {\n        if (err.code) {\n          /* A protocol error received from realtime. TODO: once realtime\n           * consistently sends errors wrapped in protocol messages, should be\n           * able to remove this */\n          this.onData(protocolMessageFromRawError(err));\n        } else {\n          /* A network/xhr error. Don't bother wrapping in a protocol message,\n           * just disconnect the transport */\n          this.disconnect(err);\n        }\n        return;\n      }\n      Platform.Config.nextTick(() => {\n        this.recv();\n      });\n    });\n    recvRequest.exec();\n  }\n\n  onData(responseData: string | Record<string, any>): void {\n    try {\n      const items = this.decodeResponse(responseData);\n      if (items && items.length)\n        for (let i = 0; i < items.length; i++) this.onProtocolMessage(ProtocolMessage.fromDeserialized(items[i]));\n    } catch (e) {\n      Logger.logAction(\n        Logger.LOG_ERROR,\n        'CometTransport.onData()',\n        'Unexpected exception handing channel event: ' + (e as Error).stack\n      );\n    }\n  }\n\n  encodeRequest(requestItems: Array<ProtocolMessage>): string {\n    return JSON.stringify(requestItems);\n  }\n\n  decodeResponse(responseData: string | Record<string, any>): Record<string, any> {\n    if (typeof responseData == 'string') return JSON.parse(responseData);\n    return responseData;\n  }\n\n  /* Historical comment, back from when we supported JSONP:\n   *\n   * > For comet, we could do the auth update by aborting the current recv and\n   * > starting a new one with the new token, that'd be sufficient for realtime.\n   * > Problem is JSONP - you can't cancel truly abort a recv once started. So\n   * > we need to send an AUTH for jsonp. In which case it's simpler to keep all\n   * > comet transports the same and do it for all of them. So we send the AUTH\n   * > instead, and don't need to abort the recv\n   *\n   * Now that we\u2019ve dropped JSONP support, we may be able to revisit the above;\n   * see https://github.com/ably/ably-js/issues/1214.\n   */\n  onAuthUpdated = (tokenDetails: API.Types.TokenDetails): void => {\n    this.authParams = { access_token: tokenDetails.token };\n  };\n}\n\nexport default CometTransport;\n", "import Platform from '../../../../common/platform';\nimport CometTransport from '../../../../common/lib/transport/comettransport';\nimport XHRRequest from './xhrrequest';\nimport ConnectionManager, { TransportParams } from 'common/lib/transport/connectionmanager';\nimport Auth from 'common/lib/client/auth';\nimport { RequestParams } from 'common/types/http';\n\nvar shortName = 'xhr_polling';\nclass XHRPollingTransport extends CometTransport {\n  shortName = shortName;\n  constructor(connectionManager: ConnectionManager, auth: Auth, params: TransportParams) {\n    super(connectionManager, auth, params);\n    params.stream = false;\n    this.shortName = shortName;\n  }\n\n  static isAvailable() {\n    return Platform.Config.xhrSupported && Platform.Config.allowComet;\n  }\n\n  toString() {\n    return 'XHRPollingTransport; uri=' + this.baseUri + '; isConnected=' + this.isConnected;\n  }\n\n  createRequest(\n    uri: string,\n    headers: Record<string, string>,\n    params: RequestParams,\n    body: unknown,\n    requestMode: number\n  ) {\n    return XHRRequest.createRequest(uri, headers, params, body, requestMode, this.timeouts);\n  }\n}\n\nfunction initialiseTransport(connectionManager: any): typeof XHRPollingTransport {\n  if (XHRPollingTransport.isAvailable()) connectionManager.supportedTransports[shortName] = XHRPollingTransport;\n\n  return XHRPollingTransport;\n}\n\nexport default initialiseTransport;\n", "import CometTransport from '../../../../common/lib/transport/comettransport';\nimport Platform from '../../../../common/platform';\nimport XHRRequest from './xhrrequest';\nimport ConnectionManager, { TransportParams } from 'common/lib/transport/connectionmanager';\nimport Auth from 'common/lib/client/auth';\nimport { RequestParams } from 'common/types/http';\n\nconst shortName = 'xhr_streaming';\nclass XHRStreamingTransport extends CometTransport {\n  shortName = shortName;\n  constructor(connectionManager: ConnectionManager, auth: Auth, params: TransportParams) {\n    super(connectionManager, auth, params);\n  }\n\n  static isAvailable() {\n    return Platform.Config.xhrSupported && Platform.Config.streamingSupported && Platform.Config.allowComet;\n  }\n\n  toString() {\n    return 'XHRStreamingTransport; uri=' + this.baseUri + '; isConnected=' + this.isConnected;\n  }\n\n  createRequest(\n    uri: string,\n    headers: Record<string, string>,\n    params: RequestParams,\n    body: unknown,\n    requestMode: number\n  ) {\n    return XHRRequest.createRequest(uri, headers, params, body, requestMode, this.timeouts);\n  }\n}\n\nfunction initialiseTransport(connectionManager: any): typeof XHRStreamingTransport {\n  if (XHRStreamingTransport.isAvailable()) connectionManager.supportedTransports[shortName] = XHRStreamingTransport;\n\n  return XHRStreamingTransport;\n}\n\nexport default initialiseTransport;\n", "import XHRPollingTransport from './xhrpollingtransport';\nimport XHRStreamingTransport from './xhrstreamingtransport';\n\nexport default [XHRPollingTransport, XHRStreamingTransport];\n", "import * as Utils from 'common/lib/util/utils';\nimport IWebStorage from 'common/types/IWebStorage';\n\nconst test = 'ablyjs-storage-test';\n\nlet globalObject = typeof global !== 'undefined' ? global : typeof window !== 'undefined' ? window : self;\n\nclass Webstorage implements IWebStorage {\n  sessionSupported: boolean;\n  localSupported: boolean;\n\n  constructor() {\n    /* Even just accessing the session/localStorage object can throw a\n     * security exception in some circumstances with some browsers. In\n     * others, calling setItem will throw. So have to check in this\n     * somewhat roundabout way. (If unsupported or no global object,\n     * will throw on accessing a property of undefined) */\n    try {\n      globalObject.sessionStorage.setItem(test, test);\n      globalObject.sessionStorage.removeItem(test);\n      this.sessionSupported = true;\n    } catch (e) {\n      this.sessionSupported = false;\n    }\n\n    try {\n      globalObject.localStorage.setItem(test, test);\n      globalObject.localStorage.removeItem(test);\n      this.localSupported = true;\n    } catch (e) {\n      this.localSupported = false;\n    }\n  }\n\n  get(name: string): any {\n    return this._get(name, false);\n  }\n\n  getSession(name: string): any {\n    return this._get(name, true);\n  }\n\n  remove(name: string): void {\n    return this._remove(name, false);\n  }\n\n  removeSession(name: string): void {\n    return this._remove(name, true);\n  }\n\n  set(name: string, value: string, ttl?: number): void {\n    return this._set(name, value, ttl, false);\n  }\n\n  setSession(name: string, value: string, ttl?: number): void {\n    return this._set(name, value, ttl, true);\n  }\n\n  private _set(name: string, value: string, ttl: number | undefined, session: any) {\n    const wrappedValue: Record<string, any> = { value: value };\n    if (ttl) {\n      wrappedValue.expires = Utils.now() + ttl;\n    }\n    return this.storageInterface(session).setItem(name, JSON.stringify(wrappedValue));\n  }\n\n  private _get(name: string, session?: boolean) {\n    if (session && !this.sessionSupported) throw new Error('Session Storage not supported');\n    if (!session && !this.localSupported) throw new Error('Local Storage not supported');\n    const rawItem = this.storageInterface(session).getItem(name);\n    if (!rawItem) return null;\n    const wrappedValue = JSON.parse(rawItem);\n    if (wrappedValue.expires && wrappedValue.expires < Utils.now()) {\n      this.storageInterface(session).removeItem(name);\n      return null;\n    }\n    return wrappedValue.value;\n  }\n\n  private _remove(name: string, session?: boolean) {\n    return this.storageInterface(session).removeItem(name);\n  }\n\n  private storageInterface(session?: boolean) {\n    return session ? globalObject.sessionStorage : globalObject.localStorage;\n  }\n}\n\nexport default new Webstorage();\n", "enum TransportNames {\n  WebSocket = 'web_socket',\n  Comet = 'comet',\n  XhrStreaming = 'xhr_streaming',\n  XhrPolling = 'xhr_polling',\n}\n\nexport default TransportNames;\n", "import IDefaults from 'common/types/IDefaults';\nimport TransportNames from 'common/constants/TransportNames';\n\nconst Defaults: IDefaults = {\n  connectivityCheckUrl: 'https://internet-up.ably-realtime.com/is-the-internet-up.txt',\n  /* Order matters here: the base transport is the leftmost one in the\n   * intersection of baseTransportOrder and the transports clientOption that's\n   * supported. */\n  defaultTransports: [TransportNames.XhrPolling, TransportNames.XhrStreaming, TransportNames.WebSocket],\n  baseTransportOrder: [TransportNames.XhrPolling, TransportNames.XhrStreaming, TransportNames.WebSocket],\n  transportPreferenceOrder: [TransportNames.XhrPolling, TransportNames.XhrStreaming, TransportNames.WebSocket],\n  upgradeTransports: [TransportNames.XhrStreaming, TransportNames.WebSocket],\n};\n\nexport default Defaults;\n"],
  "mappings": "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",
  "names": ["_a", "Format", "_a", "n", "data", "agent", "_a", "HttpMethods", "err", "version", "_a", "headers", "params", "_a", "err", "err", "self", "_a", "body", "headers", "self", "headers", "noop", "headers", "noop", "headers", "version", "actions", "actions", "_a", "self", "HttpStatusCodes", "globalObject", "_a", "actions", "noop", "self", "connectionDetails", "actions", "noop", "err", "_a", "listeners", "Channels", "n", "hmac", "uint8Array", "hmac", "Crypto", "_a", "iv", "XHRStates", "noop", "version", "statusCode", "_a", "isAblyError", "getAblyError", "body", "getHosts", "isArray", "globalObject", "crypto", "err", "_a", "shortName", "initialiseTransport", "shortName", "initialiseTransport", "transport_default", "globalObject", "TransportNames", "Defaults", "defaults_default", "transport_default", "defaults_default"]
}
